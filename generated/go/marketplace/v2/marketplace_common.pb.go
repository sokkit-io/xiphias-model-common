// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: marketplace/v2/marketplace_common.proto

package marketplace

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v22 "github.com/sokkit-io/xiphias-model-common/generated/go/asset/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/blob/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/payment/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListingCategory int32

const (
	ListingCategory_NONE ListingCategory = 0
	// Category for message tipping listing. This category will only contain a single listing
	ListingCategory_MESSAGE_TIPPING ListingCategory = 1
	// Category for all recurring anonymous matching feature listings
	ListingCategory_ANON_MATCHING ListingCategory = 2
	// Category for daily earn listings
	ListingCategory_DAILY_EARN ListingCategory = 3
	// Category for one-time-spend paid chat theme listings
	ListingCategory_CHAT_THEME ListingCategory = 4
	// Category for one-time-earn tutorials
	ListingCategory_TUTORIAL ListingCategory = 5
)

// Enum value maps for ListingCategory.
var (
	ListingCategory_name = map[int32]string{
		0: "NONE",
		1: "MESSAGE_TIPPING",
		2: "ANON_MATCHING",
		3: "DAILY_EARN",
		4: "CHAT_THEME",
		5: "TUTORIAL",
	}
	ListingCategory_value = map[string]int32{
		"NONE":            0,
		"MESSAGE_TIPPING": 1,
		"ANON_MATCHING":   2,
		"DAILY_EARN":      3,
		"CHAT_THEME":      4,
		"TUTORIAL":        5,
	}
)

func (x ListingCategory) Enum() *ListingCategory {
	p := new(ListingCategory)
	*p = x
	return p
}

func (x ListingCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListingCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_marketplace_v2_marketplace_common_proto_enumTypes[0].Descriptor()
}

func (ListingCategory) Type() protoreflect.EnumType {
	return &file_marketplace_v2_marketplace_common_proto_enumTypes[0]
}

func (x ListingCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListingCategory.Descriptor instead.
func (ListingCategory) EnumDescriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{0}
}

// Listing id uniquely identifies a listing in the marketplace
// Id will be in the format of CATEGORY_[LISTING_ID | LISTING_UNIQUE_NAME]
type ListingId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue []byte `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *ListingId) Reset() {
	*x = ListingId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingId) ProtoMessage() {}

func (x *ListingId) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingId.ProtoReflect.Descriptor instead.
func (*ListingId) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{0}
}

func (x *ListingId) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

// Collection id uniquely identifies a collection in the marketplace
type ListingCollectionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue []byte `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *ListingCollectionId) Reset() {
	*x = ListingCollectionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingCollectionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingCollectionId) ProtoMessage() {}

func (x *ListingCollectionId) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingCollectionId.ProtoReflect.Descriptor instead.
func (*ListingCollectionId) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{1}
}

func (x *ListingCollectionId) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

// Listing display info contains data needed to display a listing in the marketplace
// Some listings may not have display info
type ListingDisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description  string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ActionText   string            `protobuf:"bytes,3,opt,name=action_text,json=actionText,proto3" json:"action_text,omitempty"`
	PreviewImage *v2.BlobReference `protobuf:"bytes,4,opt,name=preview_image,json=previewImage,proto3" json:"preview_image,omitempty"`
}

func (x *ListingDisplayInfo) Reset() {
	*x = ListingDisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingDisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingDisplayInfo) ProtoMessage() {}

func (x *ListingDisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingDisplayInfo.ProtoReflect.Descriptor instead.
func (*ListingDisplayInfo) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{2}
}

func (x *ListingDisplayInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListingDisplayInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListingDisplayInfo) GetActionText() string {
	if x != nil {
		return x.ActionText
	}
	return ""
}

func (x *ListingDisplayInfo) GetPreviewImage() *v2.BlobReference {
	if x != nil {
		return x.PreviewImage
	}
	return nil
}

// Listing transaction info contain payment related info for a listing
// The data included can also be used for display purposes
type ListingTransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Listing kin price. Some recurring listings (like tipping) will have a default value that
	// can be override by the user when claiming that listing
	KinAmount *v21.KinAmount `protobuf:"bytes,1,opt,name=kin_amount,json=kinAmount,proto3" json:"kin_amount,omitempty"`
	// Listing transaction type (earn or spend)
	TransactionType v21.TransactionType `protobuf:"varint,2,opt,name=transaction_type,json=transactionType,proto3,enum=common.kin.payment.v2.TransactionType" json:"transaction_type,omitempty"`
}

func (x *ListingTransactionInfo) Reset() {
	*x = ListingTransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingTransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingTransactionInfo) ProtoMessage() {}

func (x *ListingTransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingTransactionInfo.ProtoReflect.Descriptor instead.
func (*ListingTransactionInfo) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{3}
}

func (x *ListingTransactionInfo) GetKinAmount() *v21.KinAmount {
	if x != nil {
		return x.KinAmount
	}
	return nil
}

func (x *ListingTransactionInfo) GetTransactionType() v21.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return v21.TransactionType(0)
}

// Listing content Id defines id of content that is attached to a listing and is fetched from other services.
// Example: a listing can map to one or more chat themes. In this case the content id will be the chat theme id, and
// theme content will be fetched separately from the assets service
type ListingContentId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*ListingContentId_AssetId
	Kind isListingContentId_Kind `protobuf_oneof:"kind"`
}

func (x *ListingContentId) Reset() {
	*x = ListingContentId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingContentId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingContentId) ProtoMessage() {}

func (x *ListingContentId) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingContentId.ProtoReflect.Descriptor instead.
func (*ListingContentId) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{4}
}

func (m *ListingContentId) GetKind() isListingContentId_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ListingContentId) GetAssetId() *v22.AssetId {
	if x, ok := x.GetKind().(*ListingContentId_AssetId); ok {
		return x.AssetId
	}
	return nil
}

type isListingContentId_Kind interface {
	isListingContentId_Kind()
}

type ListingContentId_AssetId struct {
	AssetId *v22.AssetId `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3,oneof"`
}

func (*ListingContentId_AssetId) isListingContentId_Kind() {}

type Ownership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is_claimed is a flag that indicates whether a user has claimed a listing (one-time claims)
	// example: once a chat theme is bought can display disabled "purchased" button
	// example: if an earning opportunity has already been claimed shows disabled "claimed" button
	IsClaimed bool `protobuf:"varint,1,opt,name=is_claimed,json=isClaimed,proto3" json:"is_claimed,omitempty"`
	// Timestamp indicating when the listing was claimed by a user
	// For non-consumable listings (assets) this will remain fixed. For consumable listings, the timestamp will get
	// updated every time the user claims the listing.
	ClaimedTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=claimed_time,json=claimedTime,proto3" json:"claimed_time,omitempty"`
}

func (x *Ownership) Reset() {
	*x = Ownership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ownership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ownership) ProtoMessage() {}

func (x *Ownership) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ownership.ProtoReflect.Descriptor instead.
func (*Ownership) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{5}
}

func (x *Ownership) GetIsClaimed() bool {
	if x != nil {
		return x.IsClaimed
	}
	return false
}

func (x *Ownership) GetClaimedTime() *timestamp.Timestamp {
	if x != nil {
		return x.ClaimedTime
	}
	return nil
}

// A listing defines a single entry that can be displayed in the marketplace
// A listing can be claimed by a user
type Listing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ListingId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Category the listing belongs to
	Category ListingCategory `protobuf:"varint,2,opt,name=category,proto3,enum=common.marketplace.v2.ListingCategory" json:"category,omitempty"`
	// Listing transactional info
	TransactionInfo *ListingTransactionInfo `protobuf:"bytes,3,opt,name=transaction_info,json=transactionInfo,proto3" json:"transaction_info,omitempty"`
	// Optional listing display info. Some listings may not have display info
	DisplayInfo *ListingDisplayInfo `protobuf:"bytes,4,opt,name=display_info,json=displayInfo,proto3" json:"display_info,omitempty"`
	// Optional expiry date for a listing. If present, a listing cannot be claimed after date has passed
	ExpiryTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// Ownership indicates if requesting user owns the listing (previously purchased)
	// This field will only exist for listing that belong to purchasable categories (ex. chat themes), it will not
	// exist for recurring type of listing (ex. tipping)
	Ownership  *Ownership          `protobuf:"bytes,6,opt,name=ownership,proto3" json:"ownership,omitempty"`
	ContentIds []*ListingContentId `protobuf:"bytes,7,rep,name=content_ids,json=contentIds,proto3" json:"content_ids,omitempty"`
}

func (x *Listing) Reset() {
	*x = Listing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listing) ProtoMessage() {}

func (x *Listing) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listing.ProtoReflect.Descriptor instead.
func (*Listing) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{6}
}

func (x *Listing) GetId() *ListingId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Listing) GetCategory() ListingCategory {
	if x != nil {
		return x.Category
	}
	return ListingCategory_NONE
}

func (x *Listing) GetTransactionInfo() *ListingTransactionInfo {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

func (x *Listing) GetDisplayInfo() *ListingDisplayInfo {
	if x != nil {
		return x.DisplayInfo
	}
	return nil
}

func (x *Listing) GetExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *Listing) GetOwnership() *Ownership {
	if x != nil {
		return x.Ownership
	}
	return nil
}

func (x *Listing) GetContentIds() []*ListingContentId {
	if x != nil {
		return x.ContentIds
	}
	return nil
}

// A collection of one or more listings. Listings in a collection can belong to one or more categories
// All listings in a collection must have the same transaction type (earn or spend)
type ListingCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *ListingCollectionId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string               `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description  string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ActionText   string               `protobuf:"bytes,4,opt,name=action_text,json=actionText,proto3" json:"action_text,omitempty"`
	PreviewImage *v2.BlobReference    `protobuf:"bytes,5,opt,name=preview_image,json=previewImage,proto3" json:"preview_image,omitempty"`
	// Transaction type of the listings in the collection (earn or spend)
	TransactionType v21.TransactionType `protobuf:"varint,6,opt,name=transaction_type,json=transactionType,proto3,enum=common.kin.payment.v2.TransactionType" json:"transaction_type,omitempty"`
	Listings        []*Listing          `protobuf:"bytes,7,rep,name=listings,proto3" json:"listings,omitempty"`
}

func (x *ListingCollection) Reset() {
	*x = ListingCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListingCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListingCollection) ProtoMessage() {}

func (x *ListingCollection) ProtoReflect() protoreflect.Message {
	mi := &file_marketplace_v2_marketplace_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListingCollection.ProtoReflect.Descriptor instead.
func (*ListingCollection) Descriptor() ([]byte, []int) {
	return file_marketplace_v2_marketplace_common_proto_rawDescGZIP(), []int{7}
}

func (x *ListingCollection) GetId() *ListingCollectionId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListingCollection) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ListingCollection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListingCollection) GetActionText() string {
	if x != nil {
		return x.ActionText
	}
	return ""
}

func (x *ListingCollection) GetPreviewImage() *v2.BlobReference {
	if x != nil {
		return x.PreviewImage
	}
	return nil
}

func (x *ListingCollection) GetTransactionType() v21.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return v21.TransactionType(0)
}

func (x *ListingCollection) GetListings() []*Listing {
	if x != nil {
		return x.Listings
	}
	return nil
}

var File_marketplace_v2_marketplace_common_proto protoreflect.FileDescriptor

var file_marketplace_v2_marketplace_common_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x62, 0x6c,
	0x6f, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x6b, 0x69, 0x6e, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x32, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x30, 0x14,
	0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x30, 0x40, 0x52, 0x08, 0x72, 0x61,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x20, 0x20, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x20, 0x40, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x20, 0x20, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x42,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a,
	0x0a, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6b, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x69, 0x0a, 0x09,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x87, 0x04, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x60, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x51,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x07, 0xca, 0x9d,
	0x25, 0x03, 0x80, 0x01, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xa6, 0x03, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x20, 0x20, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x20, 0x40, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x20, 0x20,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x51, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x78, 0x01, 0x80, 0x01, 0x64,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x71, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x42, 0x75, 0x0a,
	0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x32, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_marketplace_v2_marketplace_common_proto_rawDescOnce sync.Once
	file_marketplace_v2_marketplace_common_proto_rawDescData = file_marketplace_v2_marketplace_common_proto_rawDesc
)

func file_marketplace_v2_marketplace_common_proto_rawDescGZIP() []byte {
	file_marketplace_v2_marketplace_common_proto_rawDescOnce.Do(func() {
		file_marketplace_v2_marketplace_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_marketplace_v2_marketplace_common_proto_rawDescData)
	})
	return file_marketplace_v2_marketplace_common_proto_rawDescData
}

var file_marketplace_v2_marketplace_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_marketplace_v2_marketplace_common_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_marketplace_v2_marketplace_common_proto_goTypes = []interface{}{
	(ListingCategory)(0),           // 0: common.marketplace.v2.ListingCategory
	(*ListingId)(nil),              // 1: common.marketplace.v2.ListingId
	(*ListingCollectionId)(nil),    // 2: common.marketplace.v2.ListingCollectionId
	(*ListingDisplayInfo)(nil),     // 3: common.marketplace.v2.ListingDisplayInfo
	(*ListingTransactionInfo)(nil), // 4: common.marketplace.v2.ListingTransactionInfo
	(*ListingContentId)(nil),       // 5: common.marketplace.v2.ListingContentId
	(*Ownership)(nil),              // 6: common.marketplace.v2.Ownership
	(*Listing)(nil),                // 7: common.marketplace.v2.Listing
	(*ListingCollection)(nil),      // 8: common.marketplace.v2.ListingCollection
	(*v2.BlobReference)(nil),       // 9: common.blob.v2.BlobReference
	(*v21.KinAmount)(nil),          // 10: common.kin.payment.v2.KinAmount
	(v21.TransactionType)(0),       // 11: common.kin.payment.v2.TransactionType
	(*v22.AssetId)(nil),            // 12: common.asset.v2.AssetId
	(*timestamp.Timestamp)(nil),    // 13: google.protobuf.Timestamp
}
var file_marketplace_v2_marketplace_common_proto_depIdxs = []int32{
	9,  // 0: common.marketplace.v2.ListingDisplayInfo.preview_image:type_name -> common.blob.v2.BlobReference
	10, // 1: common.marketplace.v2.ListingTransactionInfo.kin_amount:type_name -> common.kin.payment.v2.KinAmount
	11, // 2: common.marketplace.v2.ListingTransactionInfo.transaction_type:type_name -> common.kin.payment.v2.TransactionType
	12, // 3: common.marketplace.v2.ListingContentId.asset_id:type_name -> common.asset.v2.AssetId
	13, // 4: common.marketplace.v2.Ownership.claimed_time:type_name -> google.protobuf.Timestamp
	1,  // 5: common.marketplace.v2.Listing.id:type_name -> common.marketplace.v2.ListingId
	0,  // 6: common.marketplace.v2.Listing.category:type_name -> common.marketplace.v2.ListingCategory
	4,  // 7: common.marketplace.v2.Listing.transaction_info:type_name -> common.marketplace.v2.ListingTransactionInfo
	3,  // 8: common.marketplace.v2.Listing.display_info:type_name -> common.marketplace.v2.ListingDisplayInfo
	13, // 9: common.marketplace.v2.Listing.expiry_time:type_name -> google.protobuf.Timestamp
	6,  // 10: common.marketplace.v2.Listing.ownership:type_name -> common.marketplace.v2.Ownership
	5,  // 11: common.marketplace.v2.Listing.content_ids:type_name -> common.marketplace.v2.ListingContentId
	2,  // 12: common.marketplace.v2.ListingCollection.id:type_name -> common.marketplace.v2.ListingCollectionId
	9,  // 13: common.marketplace.v2.ListingCollection.preview_image:type_name -> common.blob.v2.BlobReference
	11, // 14: common.marketplace.v2.ListingCollection.transaction_type:type_name -> common.kin.payment.v2.TransactionType
	7,  // 15: common.marketplace.v2.ListingCollection.listings:type_name -> common.marketplace.v2.Listing
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_marketplace_v2_marketplace_common_proto_init() }
func file_marketplace_v2_marketplace_common_proto_init() {
	if File_marketplace_v2_marketplace_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_marketplace_v2_marketplace_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketplace_v2_marketplace_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingCollectionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketplace_v2_marketplace_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingDisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketplace_v2_marketplace_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingTransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketplace_v2_marketplace_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingContentId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketplace_v2_marketplace_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ownership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketplace_v2_marketplace_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketplace_v2_marketplace_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListingCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_marketplace_v2_marketplace_common_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ListingContentId_AssetId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_marketplace_v2_marketplace_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_marketplace_v2_marketplace_common_proto_goTypes,
		DependencyIndexes: file_marketplace_v2_marketplace_common_proto_depIdxs,
		EnumInfos:         file_marketplace_v2_marketplace_common_proto_enumTypes,
		MessageInfos:      file_marketplace_v2_marketplace_common_proto_msgTypes,
	}.Build()
	File_marketplace_v2_marketplace_common_proto = out.File
	file_marketplace_v2_marketplace_common_proto_rawDesc = nil
	file_marketplace_v2_marketplace_common_proto_goTypes = nil
	file_marketplace_v2_marketplace_common_proto_depIdxs = nil
}
