// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: tempban/v2/temp_ban_common.proto

package tempban

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TempBanReason int32

const (
	// Generic case for a violation of TOS
	TempBanReason_TOS_VIOLATION TempBanReason = 0
	// Cases for unacceptable profile pictures
	TempBanReason_UNACCEPTABLE_GROUP_PROFILE_PIC           TempBanReason = 1
	TempBanReason_UNACCEPTABLE_USER_PRIMARY_PROFILE_PIC    TempBanReason = 2
	TempBanReason_UNACCEPTABLE_USER_BACKGROUND_PROFILE_PIC TempBanReason = 3
	// Case for images sent in chat
	TempBanReason_UNACCEPTABLE_IMAGE_CHAT TempBanReason = 4
	// Cases for user-reported chat
	TempBanReason_REPORTED_FOR_ABUSE                   TempBanReason = 5
	TempBanReason_UNACCEPTABLE_IMAGE_FROM_ABUSE_REPORT TempBanReason = 6
	// Case for when spam detection might result in increased false-positives, a temp ban can be
	// issued instead of terminating the account
	TempBanReason_SUSPECTED_SPAM TempBanReason = 7
	// Case for suspected illegal behavior where a human review is required before possible termination.
	// A temp-ban gives moderators time to review, while preventing the user from possible further bad
	// behaviour for the time being
	TempBanReason_SUSPECTED_ILLEGAL           TempBanReason = 8
	TempBanReason_BULLYING_HARASSMENT_THREATS TempBanReason = 9
	TempBanReason_IMPERSONATION               TempBanReason = 10
)

// Enum value maps for TempBanReason.
var (
	TempBanReason_name = map[int32]string{
		0:  "TOS_VIOLATION",
		1:  "UNACCEPTABLE_GROUP_PROFILE_PIC",
		2:  "UNACCEPTABLE_USER_PRIMARY_PROFILE_PIC",
		3:  "UNACCEPTABLE_USER_BACKGROUND_PROFILE_PIC",
		4:  "UNACCEPTABLE_IMAGE_CHAT",
		5:  "REPORTED_FOR_ABUSE",
		6:  "UNACCEPTABLE_IMAGE_FROM_ABUSE_REPORT",
		7:  "SUSPECTED_SPAM",
		8:  "SUSPECTED_ILLEGAL",
		9:  "BULLYING_HARASSMENT_THREATS",
		10: "IMPERSONATION",
	}
	TempBanReason_value = map[string]int32{
		"TOS_VIOLATION":                            0,
		"UNACCEPTABLE_GROUP_PROFILE_PIC":           1,
		"UNACCEPTABLE_USER_PRIMARY_PROFILE_PIC":    2,
		"UNACCEPTABLE_USER_BACKGROUND_PROFILE_PIC": 3,
		"UNACCEPTABLE_IMAGE_CHAT":                  4,
		"REPORTED_FOR_ABUSE":                       5,
		"UNACCEPTABLE_IMAGE_FROM_ABUSE_REPORT":     6,
		"SUSPECTED_SPAM":                           7,
		"SUSPECTED_ILLEGAL":                        8,
		"BULLYING_HARASSMENT_THREATS":              9,
		"IMPERSONATION":                            10,
	}
)

func (x TempBanReason) Enum() *TempBanReason {
	p := new(TempBanReason)
	*p = x
	return p
}

func (x TempBanReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TempBanReason) Descriptor() protoreflect.EnumDescriptor {
	return file_tempban_v2_temp_ban_common_proto_enumTypes[0].Descriptor()
}

func (TempBanReason) Type() protoreflect.EnumType {
	return &file_tempban_v2_temp_ban_common_proto_enumTypes[0]
}

func (x TempBanReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TempBanReason.Descriptor instead.
func (TempBanReason) EnumDescriptor() ([]byte, []int) {
	return file_tempban_v2_temp_ban_common_proto_rawDescGZIP(), []int{0}
}

// Temp bans are issued for violations of TOS. They prevent a user from using Kik for a specific
// period of time. TempBanInfo captures all information relevant to the client to render the dialog.
type TempBanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total duration (from issue to expire) of ban
	TotalDuration *duration.Duration `protobuf:"bytes,1,opt,name=total_duration,json=totalDuration,proto3" json:"total_duration,omitempty"`
	// Timestamp of expiry of ban
	ExpireAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	// Reason for ban
	Reason TempBanReason `protobuf:"varint,3,opt,name=reason,proto3,enum=common.tempban.v2.TempBanReason" json:"reason,omitempty"`
}

func (x *TempBanInfo) Reset() {
	*x = TempBanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tempban_v2_temp_ban_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempBanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempBanInfo) ProtoMessage() {}

func (x *TempBanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tempban_v2_temp_ban_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempBanInfo.ProtoReflect.Descriptor instead.
func (*TempBanInfo) Descriptor() ([]byte, []int) {
	return file_tempban_v2_temp_ban_common_proto_rawDescGZIP(), []int{0}
}

func (x *TempBanInfo) GetTotalDuration() *duration.Duration {
	if x != nil {
		return x.TotalDuration
	}
	return nil
}

func (x *TempBanInfo) GetExpireAt() *timestamp.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *TempBanInfo) GetReason() TempBanReason {
	if x != nil {
		return x.Reason
	}
	return TempBanReason_TOS_VIOLATION
}

var File_tempban_v2_temp_ban_common_proto protoreflect.FileDescriptor

var file_tempban_v2_temp_ban_common_proto_rawDesc = []byte{
	0x0a, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x62, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x62,
	0x61, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd2, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x61, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x48, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x62, 0x61, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0xdd, 0x02, 0x0a, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x42,
	0x61, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x53, 0x5f,
	0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x55,
	0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x29, 0x0a, 0x25, 0x55, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x55, 0x4e,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x42, 0x55, 0x53, 0x45, 0x10, 0x05, 0x12, 0x28, 0x0a,
	0x24, 0x55, 0x4e, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x42, 0x55, 0x53, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x53, 0x50, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x41, 0x4d, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c,
	0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x4c, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x48,
	0x41, 0x52, 0x41, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x54,
	0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x42, 0x69, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69,
	0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x62, 0x61, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70,
	0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x74,
	0x65, 0x6d, 0x70, 0x62, 0x61, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x74, 0x65, 0x6d, 0x70, 0x62, 0x61,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tempban_v2_temp_ban_common_proto_rawDescOnce sync.Once
	file_tempban_v2_temp_ban_common_proto_rawDescData = file_tempban_v2_temp_ban_common_proto_rawDesc
)

func file_tempban_v2_temp_ban_common_proto_rawDescGZIP() []byte {
	file_tempban_v2_temp_ban_common_proto_rawDescOnce.Do(func() {
		file_tempban_v2_temp_ban_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_tempban_v2_temp_ban_common_proto_rawDescData)
	})
	return file_tempban_v2_temp_ban_common_proto_rawDescData
}

var file_tempban_v2_temp_ban_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tempban_v2_temp_ban_common_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tempban_v2_temp_ban_common_proto_goTypes = []interface{}{
	(TempBanReason)(0),          // 0: common.tempban.v2.TempBanReason
	(*TempBanInfo)(nil),         // 1: common.tempban.v2.TempBanInfo
	(*duration.Duration)(nil),   // 2: google.protobuf.Duration
	(*timestamp.Timestamp)(nil), // 3: google.protobuf.Timestamp
}
var file_tempban_v2_temp_ban_common_proto_depIdxs = []int32{
	2, // 0: common.tempban.v2.TempBanInfo.total_duration:type_name -> google.protobuf.Duration
	3, // 1: common.tempban.v2.TempBanInfo.expire_at:type_name -> google.protobuf.Timestamp
	0, // 2: common.tempban.v2.TempBanInfo.reason:type_name -> common.tempban.v2.TempBanReason
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_tempban_v2_temp_ban_common_proto_init() }
func file_tempban_v2_temp_ban_common_proto_init() {
	if File_tempban_v2_temp_ban_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tempban_v2_temp_ban_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempBanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tempban_v2_temp_ban_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tempban_v2_temp_ban_common_proto_goTypes,
		DependencyIndexes: file_tempban_v2_temp_ban_common_proto_depIdxs,
		EnumInfos:         file_tempban_v2_temp_ban_common_proto_enumTypes,
		MessageInfos:      file_tempban_v2_temp_ban_common_proto_msgTypes,
	}.Build()
	File_tempban_v2_temp_ban_common_proto = out.File
	file_tempban_v2_temp_ban_common_proto_rawDesc = nil
	file_tempban_v2_temp_ban_common_proto_goTypes = nil
	file_tempban_v2_temp_ban_common_proto_depIdxs = nil
}
