// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: persona/v2/persona_common.proto

package persona

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/asset/v1"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/blob/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v22 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/account/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PersonaShort wraps a subset of the Persona fields. Depending on the context under which the
// client is displaying Persona info, only this smaller subset of the Persona fields may be
// required.
// All of these fields except username will be specific to a given Persona instance, that is they
// exist apart from the Persona's owner's account info and each Persona can have different values
// for these fields even when those Personas are owned by the same user.
// Username will only be returned in cases where the caller is allowed to know the username.
// The rules governing when username will be returned are not yet determined.
type PersonaShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonaId *v2.PersonaId `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
	// An optional ChatId that should be used for one-to-one chats with this
	// persona. If the ID is not specified, then it is likely that chatting
	// with this persona is not permitted (note: persona != user).
	//
	// For example, alias based personas will not have a one_to_one_id.
	// However, if direct messaging is enabled for that user, then the PersonaFull
	// for the user will have a contact_list_persona_id set, which in turn will
	// have the one_to_one_id set.
	OneToOneId *v2.ChatId `protobuf:"bytes,9,opt,name=one_to_one_id,json=oneToOneId,proto3" json:"one_to_one_id,omitempty"`
	// If signalling_disabled is set to true; then signals _may_ not be sent for this persona.
	// Clients should periodically refresh their local stores for this persona, until signalling has
	// been enabled.
	SignallingDisabled bool `protobuf:"varint,2,opt,name=signalling_disabled,json=signallingDisabled,proto3" json:"signalling_disabled,omitempty"`
	// An optional field whose full use is still up in the air.
	// If provided, this username string can be used to retrieve this Persona.
	// For Genesis Personas, the user's account/login Username can be used to retrieve that Persona.
	// Going forward, other Personas may have Usernames associated with them, however those
	// Usernames will be unrelated to the account Username and will not be used for
	// authentication/logging in.
	Username *Username `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// The name displayed for this Persona when viewed by other users. It can be actively changed,
	// i.e. users can change it easily and frequently, and we aim to propagate those changes to
	// other clients promptly.
	// When set DisplayName consists of a required first name and an optional last name, but when
	// returned to the client the first name and last name are appended, and in fact the client
	// treats the first space in this combined display name as the break between the first and last
	// name, regardless of whether that matches the first and last name as stored on the server.
	DisplayName *DisplayName `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// In Kik Classic this is the ProfilePic. It can be actively changed. It's
	// the image displayed to other users when they see this Persona in a chat
	// list, or a chat with them, or viewing their Persona (i.e. viewing their
	// Profile in classic-Kik).
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based display_image.
	//
	// Deprecated: Marked as deprecated in persona/v2/persona_common.proto.
	DisplayImageLegacy *DisplayImage `protobuf:"bytes,5,opt,name=display_image_legacy,json=displayImageLegacy,proto3" json:"display_image_legacy,omitempty"`
	// In Kik Classic this is the ProfilePic. It can be actively changed. It's
	// the image displayed to other users when they see this Persona in a chat
	// list, or a chat with them, or viewing their Persona (i.e. viewing their
	// Profile in classic-Kik).
	DisplayImage *v21.BlobReference `protobuf:"bytes,8,opt,name=display_image,json=displayImage,proto3" json:"display_image,omitempty"`
	// EmojiStatus is an optional icon that appears with a Persona's DisplayImage. It does actively
	// change.
	EmojiStatus *EmojiStatus `protobuf:"bytes,6,opt,name=emoji_status,json=emojiStatus,proto3" json:"emoji_status,omitempty"`
	// Indicates that this Persona is for a bot. BotExtension also contains bot-specific information
	// (see below). It does not actively change.
	BotExtension *BotExtension `protobuf:"bytes,7,opt,name=bot_extension,json=botExtension,proto3" json:"bot_extension,omitempty"`
}

func (x *PersonaShort) Reset() {
	*x = PersonaShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonaShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonaShort) ProtoMessage() {}

func (x *PersonaShort) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonaShort.ProtoReflect.Descriptor instead.
func (*PersonaShort) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{0}
}

func (x *PersonaShort) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

func (x *PersonaShort) GetOneToOneId() *v2.ChatId {
	if x != nil {
		return x.OneToOneId
	}
	return nil
}

func (x *PersonaShort) GetSignallingDisabled() bool {
	if x != nil {
		return x.SignallingDisabled
	}
	return false
}

func (x *PersonaShort) GetUsername() *Username {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *PersonaShort) GetDisplayName() *DisplayName {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

// Deprecated: Marked as deprecated in persona/v2/persona_common.proto.
func (x *PersonaShort) GetDisplayImageLegacy() *DisplayImage {
	if x != nil {
		return x.DisplayImageLegacy
	}
	return nil
}

func (x *PersonaShort) GetDisplayImage() *v21.BlobReference {
	if x != nil {
		return x.DisplayImage
	}
	return nil
}

func (x *PersonaShort) GetEmojiStatus() *EmojiStatus {
	if x != nil {
		return x.EmojiStatus
	}
	return nil
}

func (x *PersonaShort) GetBotExtension() *BotExtension {
	if x != nil {
		return x.BotExtension
	}
	return nil
}

// PersonaFull contains all the fields in PersonaShort plus some other fields. All of the fields
// common to PersonaShort will have the same value for the same PersonaId; e.g. the PersonaShort and
// PersonaFull for the same PersonaId will never have different DisplayNames, EmojiStatuses, etc.
// Like the PersonaShort fields, the additional PersonaFull fields are specific to this Persona,
// apart from Registration. The Registration field always shows when the owner of the Persona
// registered their account, rather than when that specific Persona was created.
// While the user/client can change the PersonaFull fields on demand (apart from Registration),
// generally they're not expected to change as often as the "actively changed" PersonaShort fields,
// and the server may not propagate those changes to clients as promptly as it does the
// actively-changed PersonaShort fields.
type PersonaFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A PersonaFull extends/includes a PersonaShort. this.short.PersonaId is the PersonaId for this
	// Persona.
	Short *PersonaShort `protobuf:"bytes,1,opt,name=short,proto3" json:"short,omitempty"`
	// A text-only blurb written by the user, intended for them to describe themselves
	Bio *Bio `protobuf:"bytes,2,opt,name=bio,proto3" json:"bio,omitempty"`
	// original_display_pic_legacy is not the "standard"/"classic" display
	// picture that everyone sees; instead it's the original display image the
	// user took without any cropping/badges/etc. applied. The client can use the
	// original_display_pic to reconstruct the display image if any of the parts
	// of the composed image change.
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based original_display_pic.
	//
	// Deprecated: Marked as deprecated in persona/v2/persona_common.proto.
	OriginalDisplayPicLegacy *DisplayImage `protobuf:"bytes,3,opt,name=original_display_pic_legacy,json=originalDisplayPicLegacy,proto3" json:"original_display_pic_legacy,omitempty"`
	// A picture to appear behind the display image.
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based background_display_pic.
	//
	// Deprecated: Marked as deprecated in persona/v2/persona_common.proto.
	BackgroundDisplayPicLegacy *DisplayImage `protobuf:"bytes,4,opt,name=background_display_pic_legacy,json=backgroundDisplayPicLegacy,proto3" json:"background_display_pic_legacy,omitempty"`
	// original_display_pic is not the "standard"/"classic" display picture that
	// everyone sees; instead it's the original display image the user took
	// without any cropping/badges/etc. applied. The client can use the
	// original_display_pic to reconstruct the display image if any of the parts
	// of the composed image change.
	OriginalDisplayPic *v21.BlobReference `protobuf:"bytes,9,opt,name=original_display_pic,json=originalDisplayPic,proto3" json:"original_display_pic,omitempty"`
	// A picture to appear behind the display image.
	BackgroundDisplayPic *v21.BlobReference `protobuf:"bytes,10,opt,name=background_display_pic,json=backgroundDisplayPic,proto3" json:"background_display_pic,omitempty"`
	// Contains the date when the owner of this Persona created their Kik account
	Registration *Registration `protobuf:"bytes,5,opt,name=registration,proto3" json:"registration,omitempty"`
	// A list of activities/topics/etc. that the user has selected from a larger list created by
	// Kik.
	// Interests are currently set and stored in ProfileService.
	// See https://kikinteractive.atlassian.net/wiki/spaces/OW/pages/58720407/User+Interests and
	// https://github.com/sokkit-io/xiphias-service-feature-config/blob/970dc4932506c6a176b5ad07df553988d596bbc7/feature-config-service/src/main/java/com/kik/featureconfig/rpc/impl/FeatureConfigServiceImpl.java#L153
	// for more details.
	Interests *Interests `protobuf:"bytes,6,opt,name=interests,proto3" json:"interests,omitempty"`
	// Certain persona types (ie public group member persona / anon matching persona), can be
	// used for chatting, but not friending.  By product decisions, friending someone means
	// you might reveal more personal information to him/her.
	// Currently, friending is implemented as revealing your genesis persona by adding your
	// genesis persona to your contact list.
	//
	// contact_list_persona_id is the persona that the caller has in the contact list with
	// the requested persona_id.
	//
	// To support classic kik behaviour, contact_list_persona_id is to be returned only if
	// - Requested persona_id is backed by public group membner aliasjid or anon-matching
	//   aliasjid
	// - Requested persona's genesis persona is in caller's contact list
	ContactListPersonaId *v2.PersonaId `protobuf:"bytes,7,opt,name=contact_list_persona_id,json=contactListPersonaId,proto3" json:"contact_list_persona_id,omitempty"`
	// The active kin account Id for that user
	// Users have the option of registering multiple kin accounts (wallets). Only one kin account is active at a time
	// and is available in their persona profile
	// Other users on the app can use the kin account on a user's persona profile to send them kin (through a kin
	// feature, such as tipping)
	ActiveKinAccountId *v22.KinAccountId `protobuf:"bytes,8,opt,name=active_kin_account_id,json=activeKinAccountId,proto3" json:"active_kin_account_id,omitempty"`
}

func (x *PersonaFull) Reset() {
	*x = PersonaFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonaFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonaFull) ProtoMessage() {}

func (x *PersonaFull) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonaFull.ProtoReflect.Descriptor instead.
func (*PersonaFull) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{1}
}

func (x *PersonaFull) GetShort() *PersonaShort {
	if x != nil {
		return x.Short
	}
	return nil
}

func (x *PersonaFull) GetBio() *Bio {
	if x != nil {
		return x.Bio
	}
	return nil
}

// Deprecated: Marked as deprecated in persona/v2/persona_common.proto.
func (x *PersonaFull) GetOriginalDisplayPicLegacy() *DisplayImage {
	if x != nil {
		return x.OriginalDisplayPicLegacy
	}
	return nil
}

// Deprecated: Marked as deprecated in persona/v2/persona_common.proto.
func (x *PersonaFull) GetBackgroundDisplayPicLegacy() *DisplayImage {
	if x != nil {
		return x.BackgroundDisplayPicLegacy
	}
	return nil
}

func (x *PersonaFull) GetOriginalDisplayPic() *v21.BlobReference {
	if x != nil {
		return x.OriginalDisplayPic
	}
	return nil
}

func (x *PersonaFull) GetBackgroundDisplayPic() *v21.BlobReference {
	if x != nil {
		return x.BackgroundDisplayPic
	}
	return nil
}

func (x *PersonaFull) GetRegistration() *Registration {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *PersonaFull) GetInterests() *Interests {
	if x != nil {
		return x.Interests
	}
	return nil
}

func (x *PersonaFull) GetContactListPersonaId() *v2.PersonaId {
	if x != nil {
		return x.ContactListPersonaId
	}
	return nil
}

func (x *PersonaFull) GetActiveKinAccountId() *v22.KinAccountId {
	if x != nil {
		return x.ActiveKinAccountId
	}
	return nil
}

type Username struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Username) Reset() {
	*x = Username{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Username) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Username) ProtoMessage() {}

func (x *Username) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Username.ProtoReflect.Descriptor instead.
func (*Username) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{2}
}

func (x *Username) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type DisplayName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *DisplayName) Reset() {
	*x = DisplayName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayName) ProtoMessage() {}

func (x *DisplayName) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayName.ProtoReflect.Descriptor instead.
func (*DisplayName) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{3}
}

func (x *DisplayName) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// DEPRECATED: This message should _not_ be used. BlobReference's should be used
// instead.
//
// Contains the details of any image that is accessible by URL
type DisplayImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image URLs.
	// image will contain the url of the full-sized image file and image_preview will contain the
	// url of the thumbnail-sized image file.
	Image                *v1.MediaContent     `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	ImagePreview         *v1.MediaContent     `protobuf:"bytes,2,opt,name=image_preview,json=imagePreview,proto3" json:"image_preview,omitempty"`
	LastUpdatedTimestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp,proto3" json:"last_updated_timestamp,omitempty"`
}

func (x *DisplayImage) Reset() {
	*x = DisplayImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayImage) ProtoMessage() {}

func (x *DisplayImage) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayImage.ProtoReflect.Descriptor instead.
func (*DisplayImage) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{4}
}

func (x *DisplayImage) GetImage() *v1.MediaContent {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DisplayImage) GetImagePreview() *v1.MediaContent {
	if x != nil {
		return x.ImagePreview
	}
	return nil
}

func (x *DisplayImage) GetLastUpdatedTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdatedTimestamp
	}
	return nil
}

// BotExtension is present if and only if this Persona is for a bot.
// Further bot-specific fields may be added in the future.
type BotExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// is_kin_verified indicates if this bot is verified/trusted/allowed to use Kin.
	// Some important notes on the naming of these bot-related fields:
	// Previously there has been some unfortunate use of very similar names for bot-related fields.
	// In the legacy roster code, "verified" refers to a user being a bot, and is completely
	// unrelated to Kin. That legacy use of "verified" is equivalent to "bot_extension" being
	// present in a Persona.
	// In AccountExtraInfoService and EntityService, "IsTrusted" is used to denote bots that are
	// verified/trusted/allowed to use Kin, and is equivalent to "is_kin_verified" here.
	IsKinVerified bool `protobuf:"varint,1,opt,name=is_kin_verified,json=isKinVerified,proto3" json:"is_kin_verified,omitempty"`
}

func (x *BotExtension) Reset() {
	*x = BotExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BotExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotExtension) ProtoMessage() {}

func (x *BotExtension) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotExtension.ProtoReflect.Descriptor instead.
func (*BotExtension) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{5}
}

func (x *BotExtension) GetIsKinVerified() bool {
	if x != nil {
		return x.IsKinVerified
	}
	return false
}

// Contains an kik asset id. A Kik Asset is something that is premade by Kik and provided to users
// A kik_asset_id might be something like SMILEY_FACE or FLAG_CANADA
type EmojiStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of a Kik Asset
	KikAssetId string `protobuf:"bytes,1,opt,name=kik_asset_id,json=kikAssetId,proto3" json:"kik_asset_id,omitempty"`
}

func (x *EmojiStatus) Reset() {
	*x = EmojiStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmojiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojiStatus) ProtoMessage() {}

func (x *EmojiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojiStatus.ProtoReflect.Descriptor instead.
func (*EmojiStatus) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{6}
}

func (x *EmojiStatus) GetKikAssetId() string {
	if x != nil {
		return x.KikAssetId
	}
	return ""
}

type Bio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a biography or short biographical profile of someone
	Bio string `protobuf:"bytes,1,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *Bio) Reset() {
	*x = Bio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bio) ProtoMessage() {}

func (x *Bio) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bio.ProtoReflect.Descriptor instead.
func (*Bio) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{7}
}

func (x *Bio) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// System time of when the user originally created their account
	CreationDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{8}
}

func (x *Registration) GetCreationDate() *timestamp.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

type Interests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interests []*Interests_InterestItem `protobuf:"bytes,1,rep,name=interests,proto3" json:"interests,omitempty"`
}

func (x *Interests) Reset() {
	*x = Interests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interests) ProtoMessage() {}

func (x *Interests) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interests.ProtoReflect.Descriptor instead.
func (*Interests) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{9}
}

func (x *Interests) GetInterests() []*Interests_InterestItem {
	if x != nil {
		return x.Interests
	}
	return nil
}

type Interests_InterestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key identifying the interest such that its name/description can be localized. The list of
	// possible interests comes from the server via FeatureConfigService.
	// For details see
	// https://github.com/sokkit-io/xiphias-service-feature-config/blob/970dc4932506c6a176b5ad07df553988d596bbc7/feature-config-service/src/main/java/com/kik/featureconfig/rpc/impl/FeatureConfigServiceImpl.java#L153
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The localized (if possible) name to display for this Interest
	LocalizedVerbiage string `protobuf:"bytes,2,opt,name=localized_verbiage,json=localizedVerbiage,proto3" json:"localized_verbiage,omitempty"`
}

func (x *Interests_InterestItem) Reset() {
	*x = Interests_InterestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persona_v2_persona_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interests_InterestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interests_InterestItem) ProtoMessage() {}

func (x *Interests_InterestItem) ProtoReflect() protoreflect.Message {
	mi := &file_persona_v2_persona_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interests_InterestItem.ProtoReflect.Descriptor instead.
func (*Interests_InterestItem) Descriptor() ([]byte, []int) {
	return file_persona_v2_persona_common_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Interests_InterestItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Interests_InterestItem) GetLocalizedVerbiage() string {
	if x != nil {
		return x.LocalizedVerbiage
	}
	return ""
}

var File_persona_v2_persona_common_proto protoreflect.FileDescriptor

var file_persona_v2_persona_common_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x62,
	0x6c, 0x6f, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6b, 0x69, 0x6e, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca,
	0x04, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x33, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x0a,
	0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76,
	0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x42,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0d, 0x62, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x62,
	0x6f, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x06, 0x0a, 0x0b,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x6f, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x62, 0x0a, 0x1b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x12, 0x66, 0x0a, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x69, 0x63, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x69, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x12, 0x53, 0x0a, 0x16, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x12, 0x43,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x4b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x15,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x30, 0x80, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03,
	0x30, 0x80, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x36, 0x0a, 0x0c,
	0x42, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f,
	0x69, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4b, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x0b, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x6b, 0x69, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x30,
	0xf4, 0x03, 0x52, 0x0a, 0x6b, 0x69, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x20,
	0x0a, 0x03, 0x42, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x30, 0x88, 0x27, 0x52, 0x03, 0x62, 0x69, 0x6f,
	0x22, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x50, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x07, 0xca,
	0x9d, 0x25, 0x03, 0x80, 0x01, 0x14, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x73, 0x1a, 0x61, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca,
	0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x88, 0x27, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x69, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x30, 0x88,
	0x27, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x65, 0x72, 0x62,
	0x69, 0x61, 0x67, 0x65, 0x42, 0x78, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e,
	0x67, 0x65, 0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x5a, 0x49,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69,
	0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2f, 0x76,
	0x32, 0x3b, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0xa2, 0x02, 0x12, 0x4b, 0x50, 0x42, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x56, 0x32, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_persona_v2_persona_common_proto_rawDescOnce sync.Once
	file_persona_v2_persona_common_proto_rawDescData = file_persona_v2_persona_common_proto_rawDesc
)

func file_persona_v2_persona_common_proto_rawDescGZIP() []byte {
	file_persona_v2_persona_common_proto_rawDescOnce.Do(func() {
		file_persona_v2_persona_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_persona_v2_persona_common_proto_rawDescData)
	})
	return file_persona_v2_persona_common_proto_rawDescData
}

var file_persona_v2_persona_common_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_persona_v2_persona_common_proto_goTypes = []interface{}{
	(*PersonaShort)(nil),           // 0: common.persona.v2.PersonaShort
	(*PersonaFull)(nil),            // 1: common.persona.v2.PersonaFull
	(*Username)(nil),               // 2: common.persona.v2.Username
	(*DisplayName)(nil),            // 3: common.persona.v2.DisplayName
	(*DisplayImage)(nil),           // 4: common.persona.v2.DisplayImage
	(*BotExtension)(nil),           // 5: common.persona.v2.BotExtension
	(*EmojiStatus)(nil),            // 6: common.persona.v2.EmojiStatus
	(*Bio)(nil),                    // 7: common.persona.v2.Bio
	(*Registration)(nil),           // 8: common.persona.v2.Registration
	(*Interests)(nil),              // 9: common.persona.v2.Interests
	(*Interests_InterestItem)(nil), // 10: common.persona.v2.Interests.InterestItem
	(*v2.PersonaId)(nil),           // 11: common.v2.PersonaId
	(*v2.ChatId)(nil),              // 12: common.v2.ChatId
	(*v21.BlobReference)(nil),      // 13: common.blob.v2.BlobReference
	(*v22.KinAccountId)(nil),       // 14: common.kin.account.v2.KinAccountId
	(*v1.MediaContent)(nil),        // 15: common.asset.v1.MediaContent
	(*timestamp.Timestamp)(nil),    // 16: google.protobuf.Timestamp
}
var file_persona_v2_persona_common_proto_depIdxs = []int32{
	11, // 0: common.persona.v2.PersonaShort.persona_id:type_name -> common.v2.PersonaId
	12, // 1: common.persona.v2.PersonaShort.one_to_one_id:type_name -> common.v2.ChatId
	2,  // 2: common.persona.v2.PersonaShort.username:type_name -> common.persona.v2.Username
	3,  // 3: common.persona.v2.PersonaShort.display_name:type_name -> common.persona.v2.DisplayName
	4,  // 4: common.persona.v2.PersonaShort.display_image_legacy:type_name -> common.persona.v2.DisplayImage
	13, // 5: common.persona.v2.PersonaShort.display_image:type_name -> common.blob.v2.BlobReference
	6,  // 6: common.persona.v2.PersonaShort.emoji_status:type_name -> common.persona.v2.EmojiStatus
	5,  // 7: common.persona.v2.PersonaShort.bot_extension:type_name -> common.persona.v2.BotExtension
	0,  // 8: common.persona.v2.PersonaFull.short:type_name -> common.persona.v2.PersonaShort
	7,  // 9: common.persona.v2.PersonaFull.bio:type_name -> common.persona.v2.Bio
	4,  // 10: common.persona.v2.PersonaFull.original_display_pic_legacy:type_name -> common.persona.v2.DisplayImage
	4,  // 11: common.persona.v2.PersonaFull.background_display_pic_legacy:type_name -> common.persona.v2.DisplayImage
	13, // 12: common.persona.v2.PersonaFull.original_display_pic:type_name -> common.blob.v2.BlobReference
	13, // 13: common.persona.v2.PersonaFull.background_display_pic:type_name -> common.blob.v2.BlobReference
	8,  // 14: common.persona.v2.PersonaFull.registration:type_name -> common.persona.v2.Registration
	9,  // 15: common.persona.v2.PersonaFull.interests:type_name -> common.persona.v2.Interests
	11, // 16: common.persona.v2.PersonaFull.contact_list_persona_id:type_name -> common.v2.PersonaId
	14, // 17: common.persona.v2.PersonaFull.active_kin_account_id:type_name -> common.kin.account.v2.KinAccountId
	15, // 18: common.persona.v2.DisplayImage.image:type_name -> common.asset.v1.MediaContent
	15, // 19: common.persona.v2.DisplayImage.image_preview:type_name -> common.asset.v1.MediaContent
	16, // 20: common.persona.v2.DisplayImage.last_updated_timestamp:type_name -> google.protobuf.Timestamp
	16, // 21: common.persona.v2.Registration.creation_date:type_name -> google.protobuf.Timestamp
	10, // 22: common.persona.v2.Interests.interests:type_name -> common.persona.v2.Interests.InterestItem
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_persona_v2_persona_common_proto_init() }
func file_persona_v2_persona_common_proto_init() {
	if File_persona_v2_persona_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_persona_v2_persona_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonaShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonaFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Username); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BotExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmojiStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persona_v2_persona_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interests_InterestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_persona_v2_persona_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_persona_v2_persona_common_proto_goTypes,
		DependencyIndexes: file_persona_v2_persona_common_proto_depIdxs,
		MessageInfos:      file_persona_v2_persona_common_proto_msgTypes,
	}.Build()
	File_persona_v2_persona_common_proto = out.File
	file_persona_v2_persona_common_proto_rawDesc = nil
	file_persona_v2_persona_common_proto_goTypes = nil
	file_persona_v2_persona_common_proto_depIdxs = nil
}
