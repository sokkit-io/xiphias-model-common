// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: video/v2/model.proto

package video

import (
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VideoConferenceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID value of the conference ID.
	// IDs are client-generated and do not follow any specific rule aside from being unique to a chat.
	Id *v2.Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VideoConferenceId) Reset() {
	*x = VideoConferenceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConferenceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConferenceId) ProtoMessage() {}

func (x *VideoConferenceId) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConferenceId.ProtoReflect.Descriptor instead.
func (*VideoConferenceId) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{0}
}

func (x *VideoConferenceId) GetId() *v2.Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

// The contents of a video conference session represent the items that were sent by the remote peer in order to
// establish a peer to peer connection.
// This includes the offer or answer, as well as the ICE candidates.
// A VideoConferenceSessionContents only contains the items sent by the remote peer, and does not include the ones sent
// by the client receiving the contents.
// Explanation about the WebRTC flow can be found at https://docs.google.com/document/d/18akXJMDcuZyEjUt9NLH32rcwncgCnmMxWOeXgrDL7-I
type VideoConferenceSessionContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat ID in which this video conference is taking place.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// The ID of that video conference. Several conferences may take place in the same chat during its history, but
	// Only one conference may be active at any given time.
	VideoConferenceId *VideoConferenceId `protobuf:"bytes,2,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
	// Types that are assignable to OfferOrAnswer:
	//	*VideoConferenceSessionContents_Offer
	//	*VideoConferenceSessionContents_Answer
	OfferOrAnswer isVideoConferenceSessionContents_OfferOrAnswer `protobuf_oneof:"offer_or_answer"`
	// List of ICE candidates allowing the receiving client to reach the other client.
	// Candidates that were sent by the client receiving this VideoConferenceSessionContents should not be included in
	// this list.
	RemoteIceCandidates []*IceCandidate `protobuf:"bytes,5,rep,name=remote_ice_candidates,json=remoteIceCandidates,proto3" json:"remote_ice_candidates,omitempty"`
	// Interval at which clients should call the RPC to notify server that the call is still alive and the peer connection
	// hasn't been closed.
	KeepAliveRefreshIntervalSeconds uint32 `protobuf:"varint,6,opt,name=keep_alive_refresh_interval_seconds,json=keepAliveRefreshIntervalSeconds,proto3" json:"keep_alive_refresh_interval_seconds,omitempty"`
	// Version number to allow clients to discard stale server responses in the event of non-FIFO ordering.
	Version uint32 `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VideoConferenceSessionContents) Reset() {
	*x = VideoConferenceSessionContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConferenceSessionContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConferenceSessionContents) ProtoMessage() {}

func (x *VideoConferenceSessionContents) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConferenceSessionContents.ProtoReflect.Descriptor instead.
func (*VideoConferenceSessionContents) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{1}
}

func (x *VideoConferenceSessionContents) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *VideoConferenceSessionContents) GetVideoConferenceId() *VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

func (m *VideoConferenceSessionContents) GetOfferOrAnswer() isVideoConferenceSessionContents_OfferOrAnswer {
	if m != nil {
		return m.OfferOrAnswer
	}
	return nil
}

func (x *VideoConferenceSessionContents) GetOffer() *WebRTCOffer {
	if x, ok := x.GetOfferOrAnswer().(*VideoConferenceSessionContents_Offer); ok {
		return x.Offer
	}
	return nil
}

func (x *VideoConferenceSessionContents) GetAnswer() *WebRTCAnswer {
	if x, ok := x.GetOfferOrAnswer().(*VideoConferenceSessionContents_Answer); ok {
		return x.Answer
	}
	return nil
}

func (x *VideoConferenceSessionContents) GetRemoteIceCandidates() []*IceCandidate {
	if x != nil {
		return x.RemoteIceCandidates
	}
	return nil
}

func (x *VideoConferenceSessionContents) GetKeepAliveRefreshIntervalSeconds() uint32 {
	if x != nil {
		return x.KeepAliveRefreshIntervalSeconds
	}
	return 0
}

func (x *VideoConferenceSessionContents) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type isVideoConferenceSessionContents_OfferOrAnswer interface {
	isVideoConferenceSessionContents_OfferOrAnswer()
}

type VideoConferenceSessionContents_Offer struct {
	// The offer that was sent by the initiating client.
	// If the client is the initiator of the call, this should not be set.
	// If an ICE restart is triggered, this offer will be updated with the new session description.
	Offer *WebRTCOffer `protobuf:"bytes,3,opt,name=offer,proto3,oneof"`
}

type VideoConferenceSessionContents_Answer struct {
	// The answer that was sent by the receiving client.
	// If the client is the receiver of the call, this should not be set.
	Answer *WebRTCAnswer `protobuf:"bytes,4,opt,name=answer,proto3,oneof"`
}

func (*VideoConferenceSessionContents_Offer) isVideoConferenceSessionContents_OfferOrAnswer() {}

func (*VideoConferenceSessionContents_Answer) isVideoConferenceSessionContents_OfferOrAnswer() {}

// A session description allows two clients to establish a call between each other. It may also be referred to as "SDP".
type WebRTCSessionDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw SDP string
	// See https://tools.ietf.org/id/draft-ietf-rtcweb-sdp-07.html for an example of the format of an SDP
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *WebRTCSessionDescription) Reset() {
	*x = WebRTCSessionDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRTCSessionDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCSessionDescription) ProtoMessage() {}

func (x *WebRTCSessionDescription) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCSessionDescription.ProtoReflect.Descriptor instead.
func (*WebRTCSessionDescription) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{2}
}

func (x *WebRTCSessionDescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Offer that is sent by the initiating client in order to establish a peer to peer connection
type WebRTCOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *WebRTCSessionDescription `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates whether this offer was generated in order to establish the initial connection, or to trigger an ICE restart
	IsIceRestart bool `protobuf:"varint,2,opt,name=is_ice_restart,json=isIceRestart,proto3" json:"is_ice_restart,omitempty"`
}

func (x *WebRTCOffer) Reset() {
	*x = WebRTCOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRTCOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCOffer) ProtoMessage() {}

func (x *WebRTCOffer) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCOffer.ProtoReflect.Descriptor instead.
func (*WebRTCOffer) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{3}
}

func (x *WebRTCOffer) GetDescription() *WebRTCSessionDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *WebRTCOffer) GetIsIceRestart() bool {
	if x != nil {
		return x.IsIceRestart
	}
	return false
}

// Answer that is sent by the receiving client after receiving a WebRTCOffer in order to establish a peer to peer connection
type WebRTCAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *WebRTCSessionDescription `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *WebRTCAnswer) Reset() {
	*x = WebRTCAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRTCAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCAnswer) ProtoMessage() {}

func (x *WebRTCAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCAnswer.ProtoReflect.Descriptor instead.
func (*WebRTCAnswer) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{4}
}

func (x *WebRTCAnswer) GetDescription() *WebRTCSessionDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

// Candidate for one peer to reach the other. Each candidate is generated by a client and transmitted to the other
// client, but should not be sent to the original client.
type IceCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp           string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	SdpMid        string `protobuf:"bytes,2,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	SdpMLineIndex uint32 `protobuf:"varint,3,opt,name=sdp_m_line_index,json=sdpMLineIndex,proto3" json:"sdp_m_line_index,omitempty"`
}

func (x *IceCandidate) Reset() {
	*x = IceCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceCandidate) ProtoMessage() {}

func (x *IceCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceCandidate.ProtoReflect.Descriptor instead.
func (*IceCandidate) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{5}
}

func (x *IceCandidate) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *IceCandidate) GetSdpMid() string {
	if x != nil {
		return x.SdpMid
	}
	return ""
}

func (x *IceCandidate) GetSdpMLineIndex() uint32 {
	if x != nil {
		return x.SdpMLineIndex
	}
	return 0
}

// An ICE server is used by clients in order to find routes for remote peers to reach them
type IceServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uris []*IceServer_IceServerUri `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty"`
	// Username to be used for authentication
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Credential (password) to be used for authentication
	Credential string `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *IceServer) Reset() {
	*x = IceServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceServer) ProtoMessage() {}

func (x *IceServer) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceServer.ProtoReflect.Descriptor instead.
func (*IceServer) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{6}
}

func (x *IceServer) GetUris() []*IceServer_IceServerUri {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *IceServer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *IceServer) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

// WebRTC can be used to transmit bytes between peers without the need for Kik's servers.
// In some cases, clients need to communicate through these data channels to notify their peer of something, such as
// whether their video or audio is enabled or not.
// Such messages should only be used between clients, and should not be used for communicating with a service.
type WebRTCDataChannelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*WebRTCDataChannelMessage_StreamSettingsChanged_
	Kind isWebRTCDataChannelMessage_Kind `protobuf_oneof:"kind"`
}

func (x *WebRTCDataChannelMessage) Reset() {
	*x = WebRTCDataChannelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRTCDataChannelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCDataChannelMessage) ProtoMessage() {}

func (x *WebRTCDataChannelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCDataChannelMessage.ProtoReflect.Descriptor instead.
func (*WebRTCDataChannelMessage) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{7}
}

func (m *WebRTCDataChannelMessage) GetKind() isWebRTCDataChannelMessage_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *WebRTCDataChannelMessage) GetStreamSettingsChanged() *WebRTCDataChannelMessage_StreamSettingsChanged {
	if x, ok := x.GetKind().(*WebRTCDataChannelMessage_StreamSettingsChanged_); ok {
		return x.StreamSettingsChanged
	}
	return nil
}

type isWebRTCDataChannelMessage_Kind interface {
	isWebRTCDataChannelMessage_Kind()
}

type WebRTCDataChannelMessage_StreamSettingsChanged_ struct {
	StreamSettingsChanged *WebRTCDataChannelMessage_StreamSettingsChanged `protobuf:"bytes,1,opt,name=stream_settings_changed,json=streamSettingsChanged,proto3,oneof"`
}

func (*WebRTCDataChannelMessage_StreamSettingsChanged_) isWebRTCDataChannelMessage_Kind() {}

type IceServer_IceServerUri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *IceServer_IceServerUri) Reset() {
	*x = IceServer_IceServerUri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IceServer_IceServerUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceServer_IceServerUri) ProtoMessage() {}

func (x *IceServer_IceServerUri) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceServer_IceServerUri.ProtoReflect.Descriptor instead.
func (*IceServer_IceServerUri) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{6, 0}
}

func (x *IceServer_IceServerUri) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

// During a video call, a client may enable or disable their audio/video stream, in which case the other client
// needs to be notified in order to display an icon or a placeholder to the user.
type WebRTCDataChannelMessage_StreamSettingsChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoStreamEnabled bool `protobuf:"varint,1,opt,name=video_stream_enabled,json=videoStreamEnabled,proto3" json:"video_stream_enabled,omitempty"`
	AudioStreamEnabled bool `protobuf:"varint,2,opt,name=audio_stream_enabled,json=audioStreamEnabled,proto3" json:"audio_stream_enabled,omitempty"`
}

func (x *WebRTCDataChannelMessage_StreamSettingsChanged) Reset() {
	*x = WebRTCDataChannelMessage_StreamSettingsChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v2_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRTCDataChannelMessage_StreamSettingsChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRTCDataChannelMessage_StreamSettingsChanged) ProtoMessage() {}

func (x *WebRTCDataChannelMessage_StreamSettingsChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_v2_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRTCDataChannelMessage_StreamSettingsChanged.ProtoReflect.Descriptor instead.
func (*WebRTCDataChannelMessage_StreamSettingsChanged) Descriptor() ([]byte, []int) {
	return file_video_v2_model_proto_rawDescGZIP(), []int{7, 0}
}

func (x *WebRTCDataChannelMessage_StreamSettingsChanged) GetVideoStreamEnabled() bool {
	if x != nil {
		return x.VideoStreamEnabled
	}
	return false
}

func (x *WebRTCDataChannelMessage_StreamSettingsChanged) GetAudioStreamEnabled() bool {
	if x != nil {
		return x.AudioStreamEnabled
	}
	return false
}

var File_video_v2_model_proto protoreflect.FileDescriptor

var file_video_v2_model_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x11, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x04, 0x0a, 0x1e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x5a,
	0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x65, 0x62, 0x52,
	0x54, 0x43, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x48,
	0x00, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54,
	0x43, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x48,
	0x00, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x15, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x80,
	0x01, 0x64, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x22, 0x47, 0x0a, 0x18, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x20, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x32, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x63, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x65,
	0x62, 0x52, 0x54, 0x43, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x0c, 0x49,
	0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x73,
	0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01,
	0x30, 0xc8, 0x01, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x5f,
	0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08,
	0x01, 0x30, 0xc8, 0x01, 0x52, 0x06, 0x73, 0x64, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x10,
	0x73, 0x64, 0x70, 0x5f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x64, 0x70, 0x4d, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x69, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07,
	0x08, 0x01, 0x78, 0x01, 0x80, 0x01, 0x14, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x12, 0x25, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x00, 0x30, 0x90, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x00,
	0x30, 0x90, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a,
	0x2b, 0x0a, 0x0c, 0x49, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x69, 0x12,
	0x1b, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d,
	0x25, 0x05, 0x08, 0x01, 0x30, 0xc8, 0x01, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x9a, 0x02, 0x0a,
	0x18, 0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x79, 0x0a, 0x17, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x57, 0x65, 0x62,
	0x52, 0x54, 0x43, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x1a, 0x7b, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x70, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76,
	0x32, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f,
	0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f,
	0x76, 0x32, 0x3b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0xa2, 0x02, 0x10, 0x4b, 0x50, 0x42, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_video_v2_model_proto_rawDescOnce sync.Once
	file_video_v2_model_proto_rawDescData = file_video_v2_model_proto_rawDesc
)

func file_video_v2_model_proto_rawDescGZIP() []byte {
	file_video_v2_model_proto_rawDescOnce.Do(func() {
		file_video_v2_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_v2_model_proto_rawDescData)
	})
	return file_video_v2_model_proto_rawDescData
}

var file_video_v2_model_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_video_v2_model_proto_goTypes = []interface{}{
	(*VideoConferenceId)(nil),                              // 0: common.video.v2.VideoConferenceId
	(*VideoConferenceSessionContents)(nil),                 // 1: common.video.v2.VideoConferenceSessionContents
	(*WebRTCSessionDescription)(nil),                       // 2: common.video.v2.WebRTCSessionDescription
	(*WebRTCOffer)(nil),                                    // 3: common.video.v2.WebRTCOffer
	(*WebRTCAnswer)(nil),                                   // 4: common.video.v2.WebRTCAnswer
	(*IceCandidate)(nil),                                   // 5: common.video.v2.IceCandidate
	(*IceServer)(nil),                                      // 6: common.video.v2.IceServer
	(*WebRTCDataChannelMessage)(nil),                       // 7: common.video.v2.WebRTCDataChannelMessage
	(*IceServer_IceServerUri)(nil),                         // 8: common.video.v2.IceServer.IceServerUri
	(*WebRTCDataChannelMessage_StreamSettingsChanged)(nil), // 9: common.video.v2.WebRTCDataChannelMessage.StreamSettingsChanged
	(*v2.Uuid)(nil),                                        // 10: common.v2.Uuid
	(*v2.ChatId)(nil),                                      // 11: common.v2.ChatId
}
var file_video_v2_model_proto_depIdxs = []int32{
	10, // 0: common.video.v2.VideoConferenceId.id:type_name -> common.v2.Uuid
	11, // 1: common.video.v2.VideoConferenceSessionContents.chat_id:type_name -> common.v2.ChatId
	0,  // 2: common.video.v2.VideoConferenceSessionContents.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	3,  // 3: common.video.v2.VideoConferenceSessionContents.offer:type_name -> common.video.v2.WebRTCOffer
	4,  // 4: common.video.v2.VideoConferenceSessionContents.answer:type_name -> common.video.v2.WebRTCAnswer
	5,  // 5: common.video.v2.VideoConferenceSessionContents.remote_ice_candidates:type_name -> common.video.v2.IceCandidate
	2,  // 6: common.video.v2.WebRTCOffer.description:type_name -> common.video.v2.WebRTCSessionDescription
	2,  // 7: common.video.v2.WebRTCAnswer.description:type_name -> common.video.v2.WebRTCSessionDescription
	8,  // 8: common.video.v2.IceServer.uris:type_name -> common.video.v2.IceServer.IceServerUri
	9,  // 9: common.video.v2.WebRTCDataChannelMessage.stream_settings_changed:type_name -> common.video.v2.WebRTCDataChannelMessage.StreamSettingsChanged
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_video_v2_model_proto_init() }
func file_video_v2_model_proto_init() {
	if File_video_v2_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_v2_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConferenceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConferenceSessionContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRTCSessionDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRTCOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRTCAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRTCDataChannelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IceServer_IceServerUri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v2_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRTCDataChannelMessage_StreamSettingsChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_v2_model_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VideoConferenceSessionContents_Offer)(nil),
		(*VideoConferenceSessionContents_Answer)(nil),
	}
	file_video_v2_model_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*WebRTCDataChannelMessage_StreamSettingsChanged_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_v2_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_v2_model_proto_goTypes,
		DependencyIndexes: file_video_v2_model_proto_depIdxs,
		MessageInfos:      file_video_v2_model_proto_msgTypes,
	}.Build()
	File_video_v2_model_proto = out.File
	file_video_v2_model_proto_rawDesc = nil
	file_video_v2_model_proto_goTypes = nil
	file_video_v2_model_proto_depIdxs = nil
}
