// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: groups/v1/groups_common.proto

package groups

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Top level group object.  This should be used for APIs that return complete
// group info, including display data and roster data.
//
// NOTE: This should be kept field compatible with LimitedGroupDetails from
// https://github.com/sokkit-io/xiphias-api-mobile/blob/master/proto/groups/v1/group_search_service.proto
type GroupRosterEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jid *_go.XiGroupJid `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
	// Contains data required for mobile clients to display groups
	DisplayData *GroupDisplayData `protobuf:"bytes,2,opt,name=display_data,json=displayData,proto3" json:"display_data,omitempty"`
	// Explicit indication of a public group
	IsPublic bool `protobuf:"varint,11,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// Deletion status of the group if fetching single group entry; or,
	// deletion status of user from the group if fetching roster entries for a user.
	//
	// Types that are assignable to GroupOrMemberDeleted:
	//	*GroupRosterEntry_IsGroupDeleted
	//	*GroupRosterEntry_IsMemberDeleted
	GroupOrMemberDeleted isGroupRosterEntry_GroupOrMemberDeleted `protobuf_oneof:"group_or_member_deleted"`
	// Time of last update to group
	LastUpdated *timestamp.Timestamp `protobuf:"bytes,13,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Optional group member list, does not include banned users, does include admins
	Members []*GroupMember `protobuf:"bytes,14,rep,name=members,proto3" json:"members,omitempty"`
	// Optional banned member list
	BannedMembers []*BannedGroupMember `protobuf:"bytes,15,rep,name=banned_members,json=bannedMembers,proto3" json:"banned_members,omitempty"`
}

func (x *GroupRosterEntry) Reset() {
	*x = GroupRosterEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v1_groups_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRosterEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRosterEntry) ProtoMessage() {}

func (x *GroupRosterEntry) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v1_groups_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRosterEntry.ProtoReflect.Descriptor instead.
func (*GroupRosterEntry) Descriptor() ([]byte, []int) {
	return file_groups_v1_groups_common_proto_rawDescGZIP(), []int{0}
}

func (x *GroupRosterEntry) GetJid() *_go.XiGroupJid {
	if x != nil {
		return x.Jid
	}
	return nil
}

func (x *GroupRosterEntry) GetDisplayData() *GroupDisplayData {
	if x != nil {
		return x.DisplayData
	}
	return nil
}

func (x *GroupRosterEntry) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (m *GroupRosterEntry) GetGroupOrMemberDeleted() isGroupRosterEntry_GroupOrMemberDeleted {
	if m != nil {
		return m.GroupOrMemberDeleted
	}
	return nil
}

func (x *GroupRosterEntry) GetIsGroupDeleted() bool {
	if x, ok := x.GetGroupOrMemberDeleted().(*GroupRosterEntry_IsGroupDeleted); ok {
		return x.IsGroupDeleted
	}
	return false
}

func (x *GroupRosterEntry) GetIsMemberDeleted() bool {
	if x, ok := x.GetGroupOrMemberDeleted().(*GroupRosterEntry_IsMemberDeleted); ok {
		return x.IsMemberDeleted
	}
	return false
}

func (x *GroupRosterEntry) GetLastUpdated() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *GroupRosterEntry) GetMembers() []*GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupRosterEntry) GetBannedMembers() []*BannedGroupMember {
	if x != nil {
		return x.BannedMembers
	}
	return nil
}

type isGroupRosterEntry_GroupOrMemberDeleted interface {
	isGroupRosterEntry_GroupOrMemberDeleted()
}

type GroupRosterEntry_IsGroupDeleted struct {
	IsGroupDeleted bool `protobuf:"varint,12,opt,name=is_group_deleted,json=isGroupDeleted,proto3,oneof"`
}

type GroupRosterEntry_IsMemberDeleted struct {
	IsMemberDeleted bool `protobuf:"varint,16,opt,name=is_member_deleted,json=isMemberDeleted,proto3,oneof"`
}

func (*GroupRosterEntry_IsGroupDeleted) isGroupRosterEntry_GroupOrMemberDeleted() {}

func (*GroupRosterEntry_IsMemberDeleted) isGroupRosterEntry_GroupOrMemberDeleted() {}

// Display-specific metadata for a group
type GroupDisplayData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional Hashtag of the group (aka 'code' in server parlance)
	// This field must contain '#' plus 2 to 32 more characters
	// Note: this is deprecated, use group_code field
	//
	// Deprecated: Marked as deprecated in groups/v1/groups_common.proto.
	Hashtag string `protobuf:"bytes,2,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
	// Optional display name of group.
	// Note: this is deprecated, use group_name field
	//
	// Deprecated: Marked as deprecated in groups/v1/groups_common.proto.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional group code or 'hashtag'.
	GroupCode *GroupCode `protobuf:"bytes,6,opt,name=group_code,json=groupCode,proto3" json:"group_code,omitempty"`
	// Optional group display name.
	GroupName *GroupName `protobuf:"bytes,7,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Optional BASE URL of group's display picture.  The base URL is
	// an incomplete URL that requires {size} and {display_pic_last_modified}
	// appended for use by the mobile client.  see NOTE below for format:
	//
	// NOTE: Construct an actual URL using something like
	//       {display_pic_base_url}/{size}.jpg?ts={display_pic_last_modified}
	//       where {size} is "orig" or "thumb", and the other variables are
	//       taken from fields in this message
	// See the following link for more details:
	// https://github.com/sokkit-io/kik-product/wiki/Profile-Pictures#download-url-format
	//
	DisplayPicBaseUrl string `protobuf:"bytes,4,opt,name=display_pic_base_url,json=displayPicBaseUrl,proto3" json:"display_pic_base_url,omitempty"`
	// Optional timestamp of the group's display picture.
	// NOTE: This is a special case - we explicitly are not using google.protobuf.Timestamp here.
	// TODO: REVISIT THIS - do we want a more generic bytes or string to be attached to the
	//       URL for cache busting?
	DisplayPicLastModified uint64 `protobuf:"varint,5,opt,name=display_pic_last_modified,json=displayPicLastModified,proto3" json:"display_pic_last_modified,omitempty"`
}

func (x *GroupDisplayData) Reset() {
	*x = GroupDisplayData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v1_groups_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDisplayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDisplayData) ProtoMessage() {}

func (x *GroupDisplayData) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v1_groups_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDisplayData.ProtoReflect.Descriptor instead.
func (*GroupDisplayData) Descriptor() ([]byte, []int) {
	return file_groups_v1_groups_common_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in groups/v1/groups_common.proto.
func (x *GroupDisplayData) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

// Deprecated: Marked as deprecated in groups/v1/groups_common.proto.
func (x *GroupDisplayData) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *GroupDisplayData) GetGroupCode() *GroupCode {
	if x != nil {
		return x.GroupCode
	}
	return nil
}

func (x *GroupDisplayData) GetGroupName() *GroupName {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *GroupDisplayData) GetDisplayPicBaseUrl() string {
	if x != nil {
		return x.DisplayPicBaseUrl
	}
	return ""
}

func (x *GroupDisplayData) GetDisplayPicLastModified() uint64 {
	if x != nil {
		return x.DisplayPicLastModified
	}
	return 0
}

// Member (not banned member) of a group
//
// Keep this field compatible with the BannedGroupMember message
type GroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of group member
	Jid          *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
	IsAdmin      bool               `protobuf:"varint,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	IsSuperAdmin bool               `protobuf:"varint,4,opt,name=is_super_admin,json=isSuperAdmin,proto3" json:"is_super_admin,omitempty"`
	IsInactive   bool               `protobuf:"varint,5,opt,name=is_inactive,json=isInactive,proto3" json:"is_inactive,omitempty"`
	IsBot        bool               `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	// If true, users will not be directly reachable by public group members
	DirectMessagingDisabled bool `protobuf:"varint,7,opt,name=direct_messaging_disabled,json=directMessagingDisabled,proto3" json:"direct_messaging_disabled,omitempty"`
}

func (x *GroupMember) Reset() {
	*x = GroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v1_groups_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMember) ProtoMessage() {}

func (x *GroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v1_groups_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMember.ProtoReflect.Descriptor instead.
func (*GroupMember) Descriptor() ([]byte, []int) {
	return file_groups_v1_groups_common_proto_rawDescGZIP(), []int{2}
}

func (x *GroupMember) GetJid() *_go.XiBareUserJid {
	if x != nil {
		return x.Jid
	}
	return nil
}

func (x *GroupMember) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *GroupMember) GetIsSuperAdmin() bool {
	if x != nil {
		return x.IsSuperAdmin
	}
	return false
}

func (x *GroupMember) GetIsInactive() bool {
	if x != nil {
		return x.IsInactive
	}
	return false
}

func (x *GroupMember) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

func (x *GroupMember) GetDirectMessagingDisabled() bool {
	if x != nil {
		return x.DirectMessagingDisabled
	}
	return false
}

// Banned Member of a group
//
// Keep this field compatible with the GroupMember message
type BannedGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of group member
	Jid *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
}

func (x *BannedGroupMember) Reset() {
	*x = BannedGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v1_groups_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannedGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannedGroupMember) ProtoMessage() {}

func (x *BannedGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v1_groups_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannedGroupMember.ProtoReflect.Descriptor instead.
func (*BannedGroupMember) Descriptor() ([]byte, []int) {
	return file_groups_v1_groups_common_proto_rawDescGZIP(), []int{3}
}

func (x *BannedGroupMember) GetJid() *_go.XiBareUserJid {
	if x != nil {
		return x.Jid
	}
	return nil
}

// Code which identifies a group; used for group search.
type GroupCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hastag must contain '#' plus 2 to 32 more characters.
	Hashtag string `protobuf:"bytes,1,opt,name=hashtag,proto3" json:"hashtag,omitempty"`
}

func (x *GroupCode) Reset() {
	*x = GroupCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v1_groups_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCode) ProtoMessage() {}

func (x *GroupCode) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v1_groups_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCode.ProtoReflect.Descriptor instead.
func (*GroupCode) Descriptor() ([]byte, []int) {
	return file_groups_v1_groups_common_proto_rawDescGZIP(), []int{4}
}

func (x *GroupCode) GetHashtag() string {
	if x != nil {
		return x.Hashtag
	}
	return ""
}

// Display name of group.
type GroupName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *GroupName) Reset() {
	*x = GroupName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v1_groups_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupName) ProtoMessage() {}

func (x *GroupName) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v1_groups_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupName.ProtoReflect.Descriptor instead.
func (*GroupName) Descriptor() ([]byte, []int) {
	return file_groups_v1_groups_common_proto_rawDescGZIP(), []int{5}
}

func (x *GroupName) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// A code used for associating a group invitation to a particular group member.
type GroupInviteCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a 160-bit random number encoded into a URL-safe base64 string.
	// 160/6 ~ 27 base64 characters, allowing more to be safe.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GroupInviteCode) Reset() {
	*x = GroupInviteCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_groups_v1_groups_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInviteCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInviteCode) ProtoMessage() {}

func (x *GroupInviteCode) ProtoReflect() protoreflect.Message {
	mi := &file_groups_v1_groups_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInviteCode.ProtoReflect.Descriptor instead.
func (*GroupInviteCode) Descriptor() ([]byte, []int) {
	return file_groups_v1_groups_common_proto_rawDescGZIP(), []int{6}
}

func (x *GroupInviteCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

var File_groups_v1_groups_common_proto protoreflect.FileDescriptor

var file_groups_v1_groups_common_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfe, 0x03, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x03, 0x6a, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x0c, 0xca, 0x9d, 0x25, 0x08, 0x08, 0x00, 0x78, 0x00, 0x80, 0x01, 0x96, 0x01, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x00, 0x78, 0x00, 0x80,
	0x01, 0x6e, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x42, 0x19, 0x0a, 0x17, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x22, 0xf9, 0x02, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74,
	0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xca, 0x9d, 0x25, 0x1a, 0x08, 0x00,
	0x12, 0x16, 0x5e, 0x23, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2e, 0x5f,
	0x5d, 0x7b, 0x32, 0x2c, 0x33, 0x32, 0x7d, 0x24, 0x18, 0x01, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68,
	0x74, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x03, 0x30,
	0xfc, 0x07, 0x18, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x30, 0x80, 0x10,
	0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70,
	0x69, 0x63, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x69, 0x63, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xf3,
	0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xca, 0x9d, 0x25, 0x13, 0x08, 0x01,
	0x12, 0x0f, 0x5e, 0x23, 0x5b, 0x5c, 0x77, 0x5c, 0x2e, 0x5d, 0x7b, 0x32, 0x2c, 0x33, 0x32, 0x7d,
	0x24, 0x52, 0x07, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x22, 0x39, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca,
	0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0xfc, 0x07, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x9d, 0x25, 0x06, 0x08, 0x01, 0x28, 0x01,
	0x30, 0x32, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x59, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f,
	0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_groups_v1_groups_common_proto_rawDescOnce sync.Once
	file_groups_v1_groups_common_proto_rawDescData = file_groups_v1_groups_common_proto_rawDesc
)

func file_groups_v1_groups_common_proto_rawDescGZIP() []byte {
	file_groups_v1_groups_common_proto_rawDescOnce.Do(func() {
		file_groups_v1_groups_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_groups_v1_groups_common_proto_rawDescData)
	})
	return file_groups_v1_groups_common_proto_rawDescData
}

var file_groups_v1_groups_common_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_groups_v1_groups_common_proto_goTypes = []interface{}{
	(*GroupRosterEntry)(nil),    // 0: common.groups.v1.GroupRosterEntry
	(*GroupDisplayData)(nil),    // 1: common.groups.v1.GroupDisplayData
	(*GroupMember)(nil),         // 2: common.groups.v1.GroupMember
	(*BannedGroupMember)(nil),   // 3: common.groups.v1.BannedGroupMember
	(*GroupCode)(nil),           // 4: common.groups.v1.GroupCode
	(*GroupName)(nil),           // 5: common.groups.v1.GroupName
	(*GroupInviteCode)(nil),     // 6: common.groups.v1.GroupInviteCode
	(*_go.XiGroupJid)(nil),      // 7: common.XiGroupJid
	(*timestamp.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*_go.XiBareUserJid)(nil),   // 9: common.XiBareUserJid
}
var file_groups_v1_groups_common_proto_depIdxs = []int32{
	7, // 0: common.groups.v1.GroupRosterEntry.jid:type_name -> common.XiGroupJid
	1, // 1: common.groups.v1.GroupRosterEntry.display_data:type_name -> common.groups.v1.GroupDisplayData
	8, // 2: common.groups.v1.GroupRosterEntry.last_updated:type_name -> google.protobuf.Timestamp
	2, // 3: common.groups.v1.GroupRosterEntry.members:type_name -> common.groups.v1.GroupMember
	3, // 4: common.groups.v1.GroupRosterEntry.banned_members:type_name -> common.groups.v1.BannedGroupMember
	4, // 5: common.groups.v1.GroupDisplayData.group_code:type_name -> common.groups.v1.GroupCode
	5, // 6: common.groups.v1.GroupDisplayData.group_name:type_name -> common.groups.v1.GroupName
	9, // 7: common.groups.v1.GroupMember.jid:type_name -> common.XiBareUserJid
	9, // 8: common.groups.v1.BannedGroupMember.jid:type_name -> common.XiBareUserJid
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_groups_v1_groups_common_proto_init() }
func file_groups_v1_groups_common_proto_init() {
	if File_groups_v1_groups_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_groups_v1_groups_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRosterEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v1_groups_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDisplayData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v1_groups_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v1_groups_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannedGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v1_groups_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v1_groups_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_groups_v1_groups_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInviteCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_groups_v1_groups_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GroupRosterEntry_IsGroupDeleted)(nil),
		(*GroupRosterEntry_IsMemberDeleted)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_groups_v1_groups_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_groups_v1_groups_common_proto_goTypes,
		DependencyIndexes: file_groups_v1_groups_common_proto_depIdxs,
		MessageInfos:      file_groups_v1_groups_common_proto_msgTypes,
	}.Build()
	File_groups_v1_groups_common_proto = out.File
	file_groups_v1_groups_common_proto_rawDesc = nil
	file_groups_v1_groups_common_proto_goTypes = nil
	file_groups_v1_groups_common_proto_depIdxs = nil
}
