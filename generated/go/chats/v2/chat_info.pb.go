// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: chats/v2/chat_info.proto

package chats

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/asset/v1"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/blob/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	v22 "github.com/sokkit-io/xiphias-model-common/generated/go/groups/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v24 "github.com/sokkit-io/xiphias-model-common/generated/go/matching/v2"
	v23 "github.com/sokkit-io/xiphias-model-common/generated/go/persona/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GroupChatThemeLock_LockStatus int32

const (
	// Any member of the group can change the chat theme.
	GroupChatThemeLock_UNLOCKED GroupChatThemeLock_LockStatus = 0
	// Only admins of the group can change the chat theme.
	GroupChatThemeLock_ADMIN_LOCKED GroupChatThemeLock_LockStatus = 1
)

// Enum value maps for GroupChatThemeLock_LockStatus.
var (
	GroupChatThemeLock_LockStatus_name = map[int32]string{
		0: "UNLOCKED",
		1: "ADMIN_LOCKED",
	}
	GroupChatThemeLock_LockStatus_value = map[string]int32{
		"UNLOCKED":     0,
		"ADMIN_LOCKED": 1,
	}
)

func (x GroupChatThemeLock_LockStatus) Enum() *GroupChatThemeLock_LockStatus {
	p := new(GroupChatThemeLock_LockStatus)
	*p = x
	return p
}

func (x GroupChatThemeLock_LockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupChatThemeLock_LockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chats_v2_chat_info_proto_enumTypes[0].Descriptor()
}

func (GroupChatThemeLock_LockStatus) Type() protoreflect.EnumType {
	return &file_chats_v2_chat_info_proto_enumTypes[0]
}

func (x GroupChatThemeLock_LockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupChatThemeLock_LockStatus.Descriptor instead.
func (GroupChatThemeLock_LockStatus) EnumDescriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{9, 0}
}

// OneToOne chat-specific info.
// Note that clients will look to the members of this chat for more display information.
type OneToOneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Members of the OneToOne chat. There can only be exactly two members of a OneToOne chat.
	Members []*OneToOneMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *OneToOneInfo) Reset() {
	*x = OneToOneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneToOneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneToOneInfo) ProtoMessage() {}

func (x *OneToOneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneToOneInfo.ProtoReflect.Descriptor instead.
func (*OneToOneInfo) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{0}
}

func (x *OneToOneInfo) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *OneToOneInfo) GetMembers() []*OneToOneMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type OneToOneMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonaId *v2.PersonaId `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
	// Whether or not this persona belongs to the requesting persona when this model
	// is used in the context of a request-response.
	// This is useful to handle client-server syncing issues so that client always
	// knows which persona in the OneToOne chat belongs to the user.
	IsSelf bool `protobuf:"varint,2,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
}

func (x *OneToOneMember) Reset() {
	*x = OneToOneMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneToOneMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneToOneMember) ProtoMessage() {}

func (x *OneToOneMember) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneToOneMember.ProtoReflect.Descriptor instead.
func (*OneToOneMember) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{1}
}

func (x *OneToOneMember) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

func (x *OneToOneMember) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

// Group chat-specific info - short edition.
// Contains the bare minimum of what is needed to display a group chat.
// For full group info, see GroupInfoFull.
type GroupInfoShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Optional group display name.
	DisplayName *DisplayName `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional display picture for the group.
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based display_pic.
	//
	// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
	DisplayPicLegacy *DisplayImage `protobuf:"bytes,3,opt,name=display_pic_legacy,json=displayPicLegacy,proto3" json:"display_pic_legacy,omitempty"`
	// Optional display picture for the group.
	DisplayPic *v21.BlobReference `protobuf:"bytes,7,opt,name=display_pic,json=displayPic,proto3" json:"display_pic,omitempty"`
	// Optional public group fields.
	// A group is a public group iff this is set.
	PublicGroupFields *v22.PublicGroupFields `protobuf:"bytes,4,opt,name=public_group_fields,json=publicGroupFields,proto3" json:"public_group_fields,omitempty"`
	// Optional lock on chat theme modification for the group. An admin can modify who
	// has permissions to change the chat_theme.
	ChatThemeLock *GroupChatThemeLock `protobuf:"bytes,5,opt,name=chat_theme_lock,json=chatThemeLock,proto3" json:"chat_theme_lock,omitempty"`
	// Group member list, does not include banned users, does include admins
	Members []*GroupMember `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
	// Optional set of flags for enabling features on a group
	KinGroupFeatureFlags *KinGroupFeatureFlags `protobuf:"bytes,8,opt,name=kin_group_feature_flags,json=kinGroupFeatureFlags,proto3" json:"kin_group_feature_flags,omitempty"`
}

func (x *GroupInfoShort) Reset() {
	*x = GroupInfoShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoShort) ProtoMessage() {}

func (x *GroupInfoShort) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoShort.ProtoReflect.Descriptor instead.
func (*GroupInfoShort) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{2}
}

func (x *GroupInfoShort) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *GroupInfoShort) GetDisplayName() *DisplayName {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
func (x *GroupInfoShort) GetDisplayPicLegacy() *DisplayImage {
	if x != nil {
		return x.DisplayPicLegacy
	}
	return nil
}

func (x *GroupInfoShort) GetDisplayPic() *v21.BlobReference {
	if x != nil {
		return x.DisplayPic
	}
	return nil
}

func (x *GroupInfoShort) GetPublicGroupFields() *v22.PublicGroupFields {
	if x != nil {
		return x.PublicGroupFields
	}
	return nil
}

func (x *GroupInfoShort) GetChatThemeLock() *GroupChatThemeLock {
	if x != nil {
		return x.ChatThemeLock
	}
	return nil
}

func (x *GroupInfoShort) GetMembers() []*GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupInfoShort) GetKinGroupFeatureFlags() *KinGroupFeatureFlags {
	if x != nil {
		return x.KinGroupFeatureFlags
	}
	return nil
}

// Group chat-specific info - full edition.
// Superset of GroupInfoShort, contains all information about a group.
type GroupInfoFull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoShort *GroupInfoShort `protobuf:"bytes,1,opt,name=info_short,json=infoShort,proto3" json:"info_short,omitempty"`
	// Optional background picture for the group.
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based background_pic.
	//
	// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
	BackgroundPicLegacy *DisplayImage `protobuf:"bytes,2,opt,name=background_pic_legacy,json=backgroundPicLegacy,proto3" json:"background_pic_legacy,omitempty"`
	// Optional background picture for the group.
	BackgroundPic *v21.BlobReference `protobuf:"bytes,4,opt,name=background_pic,json=backgroundPic,proto3" json:"background_pic,omitempty"`
	// Optional group bio.
	Bio *Bio `protobuf:"bytes,3,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *GroupInfoFull) Reset() {
	*x = GroupInfoFull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoFull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoFull) ProtoMessage() {}

func (x *GroupInfoFull) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoFull.ProtoReflect.Descriptor instead.
func (*GroupInfoFull) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{3}
}

func (x *GroupInfoFull) GetInfoShort() *GroupInfoShort {
	if x != nil {
		return x.InfoShort
	}
	return nil
}

// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
func (x *GroupInfoFull) GetBackgroundPicLegacy() *DisplayImage {
	if x != nil {
		return x.BackgroundPicLegacy
	}
	return nil
}

func (x *GroupInfoFull) GetBackgroundPic() *v21.BlobReference {
	if x != nil {
		return x.BackgroundPic
	}
	return nil
}

func (x *GroupInfoFull) GetBio() *Bio {
	if x != nil {
		return x.Bio
	}
	return nil
}

// Member of a group
// Note that this is not a banned member. See mobile.groups.v2.BannedGroupMember.
type GroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of group member
	// Keep this field compatible with the mobile.groups.v2.BannedGroupMember message
	PersonaId *v2.PersonaId `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
	// Whether or not this persona belongs to the requesting persona when this model
	// is used in the context of a request-response.
	// This is useful to handle client-server syncing issues so that client always
	// knows which persona in a group belongs to the user.
	IsSelf bool `protobuf:"varint,2,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
	// Admins have special privileges in group chats.
	// Admins can perform all group operations regular members can, but they
	// can additionally:
	// - promote non-admin members to admin.
	// - ban non-admin members from the group chat.
	// - change group name.
	// - change group photo.
	// - change chat theme modification permissions.
	IsAdmin bool `protobuf:"varint,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	// Super admins are admins with further privileges over regular admins.
	// In addition to all regular admin actions, super admins can also do the following:
	// - demote admins.
	// - remove admins from the group chat.
	// - ban admins from the group chat.
	//
	// Note that SuperAdmins are also considered admins, and will always
	// have is_admin enabled as well.
	IsSuperAdmin bool `protobuf:"varint,4,opt,name=is_super_admin,json=isSuperAdmin,proto3" json:"is_super_admin,omitempty"`
	// If true, direct messaging is blocked and other members will not be able to start one to one
	// chats with this group member.
	// Note that is the same flag as the legacy direct_messaging_disabled, avoiding the double negative.
	IsDirectMessagingBlocked bool `protobuf:"varint,5,opt,name=is_direct_messaging_blocked,json=isDirectMessagingBlocked,proto3" json:"is_direct_messaging_blocked,omitempty"`
}

func (x *GroupMember) Reset() {
	*x = GroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMember) ProtoMessage() {}

func (x *GroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMember.ProtoReflect.Descriptor instead.
func (*GroupMember) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{4}
}

func (x *GroupMember) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

func (x *GroupMember) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

func (x *GroupMember) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *GroupMember) GetIsSuperAdmin() bool {
	if x != nil {
		return x.IsSuperAdmin
	}
	return false
}

func (x *GroupMember) GetIsDirectMessagingBlocked() bool {
	if x != nil {
		return x.IsDirectMessagingBlocked
	}
	return false
}

// This is all the information the client needs to display about a group
// before a user joins; this info is found by searching for the group
// or being invited to join it by someone who is not in your contact list.
// This message will not contain a ChatId or any PersonaIds.
type GroupInfoDisplayOnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional group display name.
	DisplayName *DisplayName `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional display picture for the group.
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based display_pic.
	//
	// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
	DisplayPicLegacy *DisplayImage `protobuf:"bytes,2,opt,name=display_pic_legacy,json=displayPicLegacy,proto3" json:"display_pic_legacy,omitempty"`
	// Optional display picture for the group.
	DisplayPic *v21.BlobReference `protobuf:"bytes,8,opt,name=display_pic,json=displayPic,proto3" json:"display_pic,omitempty"`
	// Optional public group fields.
	// A group is a public group iff this is set.
	// Hashtag is in here.
	PublicGroupFields *v22.PublicGroupFields `protobuf:"bytes,3,opt,name=public_group_fields,json=publicGroupFields,proto3" json:"public_group_fields,omitempty"`
	// Group member list, does not include banned users, does include admins.
	// Only the display names and profile pictures of the members are returned.
	Members []*GroupMemberDisplayOnly `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`
	// The maximum number of members that can be in this group.
	MaxGroupSize uint32 `protobuf:"varint,5,opt,name=max_group_size,json=maxGroupSize,proto3" json:"max_group_size,omitempty"`
	// Optional background picture for the group.
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based background_pic.
	//
	// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
	BackgroundPicLegacy *DisplayImage `protobuf:"bytes,6,opt,name=background_pic_legacy,json=backgroundPicLegacy,proto3" json:"background_pic_legacy,omitempty"`
	// Optional background picture for the group.
	BackgroundPic *v21.BlobReference `protobuf:"bytes,9,opt,name=background_pic,json=backgroundPic,proto3" json:"background_pic,omitempty"`
	// Optional group bio.
	Bio *Bio `protobuf:"bytes,7,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *GroupInfoDisplayOnly) Reset() {
	*x = GroupInfoDisplayOnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoDisplayOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoDisplayOnly) ProtoMessage() {}

func (x *GroupInfoDisplayOnly) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoDisplayOnly.ProtoReflect.Descriptor instead.
func (*GroupInfoDisplayOnly) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{5}
}

func (x *GroupInfoDisplayOnly) GetDisplayName() *DisplayName {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
func (x *GroupInfoDisplayOnly) GetDisplayPicLegacy() *DisplayImage {
	if x != nil {
		return x.DisplayPicLegacy
	}
	return nil
}

func (x *GroupInfoDisplayOnly) GetDisplayPic() *v21.BlobReference {
	if x != nil {
		return x.DisplayPic
	}
	return nil
}

func (x *GroupInfoDisplayOnly) GetPublicGroupFields() *v22.PublicGroupFields {
	if x != nil {
		return x.PublicGroupFields
	}
	return nil
}

func (x *GroupInfoDisplayOnly) GetMembers() []*GroupMemberDisplayOnly {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupInfoDisplayOnly) GetMaxGroupSize() uint32 {
	if x != nil {
		return x.MaxGroupSize
	}
	return 0
}

// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
func (x *GroupInfoDisplayOnly) GetBackgroundPicLegacy() *DisplayImage {
	if x != nil {
		return x.BackgroundPicLegacy
	}
	return nil
}

func (x *GroupInfoDisplayOnly) GetBackgroundPic() *v21.BlobReference {
	if x != nil {
		return x.BackgroundPic
	}
	return nil
}

func (x *GroupInfoDisplayOnly) GetBio() *Bio {
	if x != nil {
		return x.Bio
	}
	return nil
}

// Display info for a member of a group, used specific contexts where only a
// subset of the full member information of GroupMember should be returned.
type GroupMemberDisplayOnly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional member display name.
	// Note: In classic the Group "display info only" only returns the first name, not the
	// user's full display name. Discussed this with client devs, decided that display name
	// is appropriate here, for consistency's sake more than anything, and the client can
	// choose what parts of it to show.
	DisplayName *v23.DisplayName `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional member profile pic info.
	//
	// This field will be filled out by server, but should
	// be ignored by clients in favour of the BlobReference
	// based display_image.
	//
	// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
	DisplayImageLegacy *v23.DisplayImage `protobuf:"bytes,2,opt,name=display_image_legacy,json=displayImageLegacy,proto3" json:"display_image_legacy,omitempty"`
	// Optional member profile pic info.
	DisplayImage *v21.BlobReference `protobuf:"bytes,6,opt,name=display_image,json=displayImage,proto3" json:"display_image,omitempty"`
	// Will be true for both admins and super admins
	IsAdmin      bool `protobuf:"varint,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	IsSuperAdmin bool `protobuf:"varint,4,opt,name=is_super_admin,json=isSuperAdmin,proto3" json:"is_super_admin,omitempty"`
	IsBot        bool `protobuf:"varint,5,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
}

func (x *GroupMemberDisplayOnly) Reset() {
	*x = GroupMemberDisplayOnly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemberDisplayOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemberDisplayOnly) ProtoMessage() {}

func (x *GroupMemberDisplayOnly) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemberDisplayOnly.ProtoReflect.Descriptor instead.
func (*GroupMemberDisplayOnly) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{6}
}

func (x *GroupMemberDisplayOnly) GetDisplayName() *v23.DisplayName {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

// Deprecated: Marked as deprecated in chats/v2/chat_info.proto.
func (x *GroupMemberDisplayOnly) GetDisplayImageLegacy() *v23.DisplayImage {
	if x != nil {
		return x.DisplayImageLegacy
	}
	return nil
}

func (x *GroupMemberDisplayOnly) GetDisplayImage() *v21.BlobReference {
	if x != nil {
		return x.DisplayImage
	}
	return nil
}

func (x *GroupMemberDisplayOnly) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *GroupMemberDisplayOnly) GetIsSuperAdmin() bool {
	if x != nil {
		return x.IsSuperAdmin
	}
	return false
}

func (x *GroupMemberDisplayOnly) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

// Display name of a chat.
// This has very relaxed validation in order to accommodate various display name sizes.
type DisplayName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *DisplayName) Reset() {
	*x = DisplayName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayName) ProtoMessage() {}

func (x *DisplayName) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayName.ProtoReflect.Descriptor instead.
func (*DisplayName) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{7}
}

func (x *DisplayName) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// DEPRECATED: This message should _not_ be used. BlobReference's should be used
// instead.
//
// Contains the details of any image that is accessible by URL
type DisplayImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image URLs.
	// image will contain the url of the full-sized image file and image_preview will contain the
	// url of the thumbnail-sized image file.
	Image                *v1.MediaContent     `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	ImagePreview         *v1.MediaContent     `protobuf:"bytes,2,opt,name=image_preview,json=imagePreview,proto3" json:"image_preview,omitempty"`
	LastUpdatedTimestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp,proto3" json:"last_updated_timestamp,omitempty"`
}

func (x *DisplayImage) Reset() {
	*x = DisplayImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayImage) ProtoMessage() {}

func (x *DisplayImage) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayImage.ProtoReflect.Descriptor instead.
func (*DisplayImage) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{8}
}

func (x *DisplayImage) GetImage() *v1.MediaContent {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DisplayImage) GetImagePreview() *v1.MediaContent {
	if x != nil {
		return x.ImagePreview
	}
	return nil
}

func (x *DisplayImage) GetLastUpdatedTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdatedTimestamp
	}
	return nil
}

// Group chat theme lock that allows admins to lock permissions on chat theme
// modification within the group chat.
type GroupChatThemeLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current permission settings for modifying a group's chat theme
	LockStatus GroupChatThemeLock_LockStatus `protobuf:"varint,1,opt,name=lock_status,json=lockStatus,proto3,enum=common.chats.v2.GroupChatThemeLock_LockStatus" json:"lock_status,omitempty"`
}

func (x *GroupChatThemeLock) Reset() {
	*x = GroupChatThemeLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupChatThemeLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupChatThemeLock) ProtoMessage() {}

func (x *GroupChatThemeLock) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupChatThemeLock.ProtoReflect.Descriptor instead.
func (*GroupChatThemeLock) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{9}
}

func (x *GroupChatThemeLock) GetLockStatus() GroupChatThemeLock_LockStatus {
	if x != nil {
		return x.LockStatus
	}
	return GroupChatThemeLock_UNLOCKED
}

// A biography or short biographical of a group chat.
type Bio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bio string `protobuf:"bytes,1,opt,name=bio,proto3" json:"bio,omitempty"`
}

func (x *Bio) Reset() {
	*x = Bio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bio) ProtoMessage() {}

func (x *Bio) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bio.ProtoReflect.Descriptor instead.
func (*Bio) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{10}
}

func (x *Bio) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

// Anonymous chat-specific info that clients needs to
// display an anonymous chat.
type AnonMatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id that uniquely identifies chat between two anonymous users
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// Members of the anonymous chat. There can only be exactly two members of an anonymous chat.
	Members []*AnonChatMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	// Chat session end time (UTC)
	SessionEndTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=session_end_time,json=sessionEndTime,proto3" json:"session_end_time,omitempty"`
	// Session vote expiry (UTC), the session could be cleaned up any time after this. no further actions can be
	// taken on this session after this time.
	SessionVoteExpiryTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=session_vote_expiry_time,json=sessionVoteExpiryTime,proto3" json:"session_vote_expiry_time,omitempty"`
	SessionState          v24.ChatSessionState `protobuf:"varint,5,opt,name=session_state,json=sessionState,proto3,enum=common.matching.v2.ChatSessionState" json:"session_state,omitempty"`
	// This is set to true if the calling user has initiated a friend request
	// from this anonymous chat session
	FriendRequestInitiated bool `protobuf:"varint,6,opt,name=friend_request_initiated,json=friendRequestInitiated,proto3" json:"friend_request_initiated,omitempty"`
	// When both user agrees to be friends, the chat is considered to be `ChatSessionState.UPGRADED`
	// In that case, this field will be set to the 1:1 chatId for clients to upgrade the anonymous chat
	// to a 1:1 chat
	UpgradedChatId *v2.ChatId `protobuf:"bytes,7,opt,name=upgraded_chat_id,json=upgradedChatId,proto3" json:"upgraded_chat_id,omitempty"`
	// This is set to true if the calling user has rated the chat session
	IsRated bool `protobuf:"varint,8,opt,name=is_rated,json=isRated,proto3" json:"is_rated,omitempty"`
}

func (x *AnonMatchInfo) Reset() {
	*x = AnonMatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonMatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonMatchInfo) ProtoMessage() {}

func (x *AnonMatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonMatchInfo.ProtoReflect.Descriptor instead.
func (*AnonMatchInfo) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{11}
}

func (x *AnonMatchInfo) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *AnonMatchInfo) GetMembers() []*AnonChatMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *AnonMatchInfo) GetSessionEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionEndTime
	}
	return nil
}

func (x *AnonMatchInfo) GetSessionVoteExpiryTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionVoteExpiryTime
	}
	return nil
}

func (x *AnonMatchInfo) GetSessionState() v24.ChatSessionState {
	if x != nil {
		return x.SessionState
	}
	return v24.ChatSessionState(0)
}

func (x *AnonMatchInfo) GetFriendRequestInitiated() bool {
	if x != nil {
		return x.FriendRequestInitiated
	}
	return false
}

func (x *AnonMatchInfo) GetUpgradedChatId() *v2.ChatId {
	if x != nil {
		return x.UpgradedChatId
	}
	return nil
}

func (x *AnonMatchInfo) GetIsRated() bool {
	if x != nil {
		return x.IsRated
	}
	return false
}

type AnonChatMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PersonaId *v2.PersonaId `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
	// Whether or not this persona belongs to the requesting persona when this model
	// is used in the context of a request-response.
	// This is useful to handle client-server syncing issues so that client always
	// knows which persona in the anonymous chat belongs to the user.
	IsSelf bool `protobuf:"varint,2,opt,name=is_self,json=isSelf,proto3" json:"is_self,omitempty"`
}

func (x *AnonChatMember) Reset() {
	*x = AnonChatMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonChatMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonChatMember) ProtoMessage() {}

func (x *AnonChatMember) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonChatMember.ProtoReflect.Descriptor instead.
func (*AnonChatMember) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{12}
}

func (x *AnonChatMember) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

func (x *AnonChatMember) GetIsSelf() bool {
	if x != nil {
		return x.IsSelf
	}
	return false
}

// Contains flags for whether or not a group feature is enabled
type KinGroupFeatureFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicGroupMessageTippingEnabled bool `protobuf:"varint,1,opt,name=public_group_message_tipping_enabled,json=publicGroupMessageTippingEnabled,proto3" json:"public_group_message_tipping_enabled,omitempty"`
}

func (x *KinGroupFeatureFlags) Reset() {
	*x = KinGroupFeatureFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_chat_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KinGroupFeatureFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KinGroupFeatureFlags) ProtoMessage() {}

func (x *KinGroupFeatureFlags) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_chat_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KinGroupFeatureFlags.ProtoReflect.Descriptor instead.
func (*KinGroupFeatureFlags) Descriptor() ([]byte, []int) {
	return file_chats_v2_chat_info_proto_rawDescGZIP(), []int{13}
}

func (x *KinGroupFeatureFlags) GetPublicGroupMessageTippingEnabled() bool {
	if x != nil {
		return x.PublicGroupMessageTippingEnabled
	}
	return false
}

var File_chats_v2_chat_info_proto protoreflect.FileDescriptor

var file_chats_v2_chat_info_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x6e, 0x65, 0x54,
	0x6f, 0x4f, 0x6e, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0e, 0xca, 0x9d, 0x25, 0x0a,
	0x08, 0x01, 0x78, 0x02, 0x80, 0x01, 0x02, 0x88, 0x01, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x22, 0x66, 0x0a, 0x0e, 0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x22, 0xdc, 0x04, 0x0a, 0x0e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70,
	0x69, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x69, 0x63, 0x12, 0x53, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0xca, 0x9d, 0x25, 0x08, 0x08, 0x01, 0x78, 0x01, 0x80,
	0x01, 0xe8, 0x07, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x17,
	0x6b, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4b, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x52, 0x14, 0x6b, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x0a,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x50, 0x69, 0x63, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x69,
	0x63, 0x12, 0x26, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x69, 0x6f, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22,
	0xf5, 0x04, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x69, 0x63, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x69, 0x63, 0x12, 0x53, 0x0a, 0x13, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x4b, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x80,
	0x01, 0xe8, 0x07, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x69, 0x63, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0e, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x12,
	0x26, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x69, 0x6f, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x22, 0xce, 0x02, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x22, 0x3b, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca,
	0x9d, 0x25, 0x05, 0x08, 0x01, 0x20, 0xe8, 0x07, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x50, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x4c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x22, 0x20, 0x0a, 0x03, 0x42, 0x69, 0x6f, 0x12, 0x19,
	0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25,
	0x03, 0x20, 0xe2, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x22, 0x83, 0x04, 0x0a, 0x0d, 0x41, 0x6e,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x46, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x78, 0x02, 0x80, 0x01, 0x02, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a,
	0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x66, 0x0a, 0x0e, 0x41, 0x6e, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x22, 0x66, 0x0a, 0x14, 0x4b, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x4e, 0x0a, 0x24, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42,
	0x70, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69,
	0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x73, 0xa2, 0x02,
	0x10, 0x4b, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x73, 0x56,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chats_v2_chat_info_proto_rawDescOnce sync.Once
	file_chats_v2_chat_info_proto_rawDescData = file_chats_v2_chat_info_proto_rawDesc
)

func file_chats_v2_chat_info_proto_rawDescGZIP() []byte {
	file_chats_v2_chat_info_proto_rawDescOnce.Do(func() {
		file_chats_v2_chat_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_chats_v2_chat_info_proto_rawDescData)
	})
	return file_chats_v2_chat_info_proto_rawDescData
}

var file_chats_v2_chat_info_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chats_v2_chat_info_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_chats_v2_chat_info_proto_goTypes = []interface{}{
	(GroupChatThemeLock_LockStatus)(0), // 0: common.chats.v2.GroupChatThemeLock.LockStatus
	(*OneToOneInfo)(nil),               // 1: common.chats.v2.OneToOneInfo
	(*OneToOneMember)(nil),             // 2: common.chats.v2.OneToOneMember
	(*GroupInfoShort)(nil),             // 3: common.chats.v2.GroupInfoShort
	(*GroupInfoFull)(nil),              // 4: common.chats.v2.GroupInfoFull
	(*GroupMember)(nil),                // 5: common.chats.v2.GroupMember
	(*GroupInfoDisplayOnly)(nil),       // 6: common.chats.v2.GroupInfoDisplayOnly
	(*GroupMemberDisplayOnly)(nil),     // 7: common.chats.v2.GroupMemberDisplayOnly
	(*DisplayName)(nil),                // 8: common.chats.v2.DisplayName
	(*DisplayImage)(nil),               // 9: common.chats.v2.DisplayImage
	(*GroupChatThemeLock)(nil),         // 10: common.chats.v2.GroupChatThemeLock
	(*Bio)(nil),                        // 11: common.chats.v2.Bio
	(*AnonMatchInfo)(nil),              // 12: common.chats.v2.AnonMatchInfo
	(*AnonChatMember)(nil),             // 13: common.chats.v2.AnonChatMember
	(*KinGroupFeatureFlags)(nil),       // 14: common.chats.v2.KinGroupFeatureFlags
	(*v2.ChatId)(nil),                  // 15: common.v2.ChatId
	(*v2.PersonaId)(nil),               // 16: common.v2.PersonaId
	(*v21.BlobReference)(nil),          // 17: common.blob.v2.BlobReference
	(*v22.PublicGroupFields)(nil),      // 18: common.groups.v2.PublicGroupFields
	(*v23.DisplayName)(nil),            // 19: common.persona.v2.DisplayName
	(*v23.DisplayImage)(nil),           // 20: common.persona.v2.DisplayImage
	(*v1.MediaContent)(nil),            // 21: common.asset.v1.MediaContent
	(*timestamp.Timestamp)(nil),        // 22: google.protobuf.Timestamp
	(v24.ChatSessionState)(0),          // 23: common.matching.v2.ChatSessionState
}
var file_chats_v2_chat_info_proto_depIdxs = []int32{
	15, // 0: common.chats.v2.OneToOneInfo.chat_id:type_name -> common.v2.ChatId
	2,  // 1: common.chats.v2.OneToOneInfo.members:type_name -> common.chats.v2.OneToOneMember
	16, // 2: common.chats.v2.OneToOneMember.persona_id:type_name -> common.v2.PersonaId
	15, // 3: common.chats.v2.GroupInfoShort.chat_id:type_name -> common.v2.ChatId
	8,  // 4: common.chats.v2.GroupInfoShort.display_name:type_name -> common.chats.v2.DisplayName
	9,  // 5: common.chats.v2.GroupInfoShort.display_pic_legacy:type_name -> common.chats.v2.DisplayImage
	17, // 6: common.chats.v2.GroupInfoShort.display_pic:type_name -> common.blob.v2.BlobReference
	18, // 7: common.chats.v2.GroupInfoShort.public_group_fields:type_name -> common.groups.v2.PublicGroupFields
	10, // 8: common.chats.v2.GroupInfoShort.chat_theme_lock:type_name -> common.chats.v2.GroupChatThemeLock
	5,  // 9: common.chats.v2.GroupInfoShort.members:type_name -> common.chats.v2.GroupMember
	14, // 10: common.chats.v2.GroupInfoShort.kin_group_feature_flags:type_name -> common.chats.v2.KinGroupFeatureFlags
	3,  // 11: common.chats.v2.GroupInfoFull.info_short:type_name -> common.chats.v2.GroupInfoShort
	9,  // 12: common.chats.v2.GroupInfoFull.background_pic_legacy:type_name -> common.chats.v2.DisplayImage
	17, // 13: common.chats.v2.GroupInfoFull.background_pic:type_name -> common.blob.v2.BlobReference
	11, // 14: common.chats.v2.GroupInfoFull.bio:type_name -> common.chats.v2.Bio
	16, // 15: common.chats.v2.GroupMember.persona_id:type_name -> common.v2.PersonaId
	8,  // 16: common.chats.v2.GroupInfoDisplayOnly.display_name:type_name -> common.chats.v2.DisplayName
	9,  // 17: common.chats.v2.GroupInfoDisplayOnly.display_pic_legacy:type_name -> common.chats.v2.DisplayImage
	17, // 18: common.chats.v2.GroupInfoDisplayOnly.display_pic:type_name -> common.blob.v2.BlobReference
	18, // 19: common.chats.v2.GroupInfoDisplayOnly.public_group_fields:type_name -> common.groups.v2.PublicGroupFields
	7,  // 20: common.chats.v2.GroupInfoDisplayOnly.members:type_name -> common.chats.v2.GroupMemberDisplayOnly
	9,  // 21: common.chats.v2.GroupInfoDisplayOnly.background_pic_legacy:type_name -> common.chats.v2.DisplayImage
	17, // 22: common.chats.v2.GroupInfoDisplayOnly.background_pic:type_name -> common.blob.v2.BlobReference
	11, // 23: common.chats.v2.GroupInfoDisplayOnly.bio:type_name -> common.chats.v2.Bio
	19, // 24: common.chats.v2.GroupMemberDisplayOnly.display_name:type_name -> common.persona.v2.DisplayName
	20, // 25: common.chats.v2.GroupMemberDisplayOnly.display_image_legacy:type_name -> common.persona.v2.DisplayImage
	17, // 26: common.chats.v2.GroupMemberDisplayOnly.display_image:type_name -> common.blob.v2.BlobReference
	21, // 27: common.chats.v2.DisplayImage.image:type_name -> common.asset.v1.MediaContent
	21, // 28: common.chats.v2.DisplayImage.image_preview:type_name -> common.asset.v1.MediaContent
	22, // 29: common.chats.v2.DisplayImage.last_updated_timestamp:type_name -> google.protobuf.Timestamp
	0,  // 30: common.chats.v2.GroupChatThemeLock.lock_status:type_name -> common.chats.v2.GroupChatThemeLock.LockStatus
	15, // 31: common.chats.v2.AnonMatchInfo.chat_id:type_name -> common.v2.ChatId
	13, // 32: common.chats.v2.AnonMatchInfo.members:type_name -> common.chats.v2.AnonChatMember
	22, // 33: common.chats.v2.AnonMatchInfo.session_end_time:type_name -> google.protobuf.Timestamp
	22, // 34: common.chats.v2.AnonMatchInfo.session_vote_expiry_time:type_name -> google.protobuf.Timestamp
	23, // 35: common.chats.v2.AnonMatchInfo.session_state:type_name -> common.matching.v2.ChatSessionState
	15, // 36: common.chats.v2.AnonMatchInfo.upgraded_chat_id:type_name -> common.v2.ChatId
	16, // 37: common.chats.v2.AnonChatMember.persona_id:type_name -> common.v2.PersonaId
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_chats_v2_chat_info_proto_init() }
func file_chats_v2_chat_info_proto_init() {
	if File_chats_v2_chat_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chats_v2_chat_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneToOneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneToOneMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoFull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoDisplayOnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemberDisplayOnly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupChatThemeLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonMatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonChatMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_chat_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KinGroupFeatureFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chats_v2_chat_info_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chats_v2_chat_info_proto_goTypes,
		DependencyIndexes: file_chats_v2_chat_info_proto_depIdxs,
		EnumInfos:         file_chats_v2_chat_info_proto_enumTypes,
		MessageInfos:      file_chats_v2_chat_info_proto_msgTypes,
	}.Build()
	File_chats_v2_chat_info_proto = out.File
	file_chats_v2_chat_info_proto_rawDesc = nil
	file_chats_v2_chat_info_proto_goTypes = nil
	file_chats_v2_chat_info_proto_depIdxs = nil
}
