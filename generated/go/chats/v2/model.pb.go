// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: chats/v2/model.proto

package chats

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/asset/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MuteStatus_Status int32

const (
	MuteStatus_NOT_MUTED MuteStatus_Status = 0
	MuteStatus_MUTED     MuteStatus_Status = 1
)

// Enum value maps for MuteStatus_Status.
var (
	MuteStatus_Status_name = map[int32]string{
		0: "NOT_MUTED",
		1: "MUTED",
	}
	MuteStatus_Status_value = map[string]int32{
		"NOT_MUTED": 0,
		"MUTED":     1,
	}
)

func (x MuteStatus_Status) Enum() *MuteStatus_Status {
	p := new(MuteStatus_Status)
	*p = x
	return p
}

func (x MuteStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MuteStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_chats_v2_model_proto_enumTypes[0].Descriptor()
}

func (MuteStatus_Status) Type() protoreflect.EnumType {
	return &file_chats_v2_model_proto_enumTypes[0]
}

func (x MuteStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MuteStatus_Status.Descriptor instead.
func (MuteStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_chats_v2_model_proto_rawDescGZIP(), []int{2, 0}
}

type ChatCategory_Category int32

const (
	ChatCategory_UNKNOWN  ChatCategory_Category = 0
	ChatCategory_NEW      ChatCategory_Category = 1
	ChatCategory_FRIENDLY ChatCategory_Category = 2
)

// Enum value maps for ChatCategory_Category.
var (
	ChatCategory_Category_name = map[int32]string{
		0: "UNKNOWN",
		1: "NEW",
		2: "FRIENDLY",
	}
	ChatCategory_Category_value = map[string]int32{
		"UNKNOWN":  0,
		"NEW":      1,
		"FRIENDLY": 2,
	}
)

func (x ChatCategory_Category) Enum() *ChatCategory_Category {
	p := new(ChatCategory_Category)
	*p = x
	return p
}

func (x ChatCategory_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatCategory_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_chats_v2_model_proto_enumTypes[1].Descriptor()
}

func (ChatCategory_Category) Type() protoreflect.EnumType {
	return &file_chats_v2_model_proto_enumTypes[1]
}

func (x ChatCategory_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatCategory_Category.Descriptor instead.
func (ChatCategory_Category) EnumDescriptor() ([]byte, []int) {
	return file_chats_v2_model_proto_rawDescGZIP(), []int{3, 0}
}

// Chat represents the 'metadata' about a Chat. A chat is fundamentally broken
// down into:
//
//  1. Metadata (id, type info, etc)
//  2. Message Log (log of actual messages)
//  3. Pointer States
//
// This represents (1), while the other two only have accessors via APIs, since
// implementations of (2) and (3) are highly varied between server and clients.
type Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *v2.ChatId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Contains minimal chat info depending on the type of chat.
	// Note that this oneof is required.
	//
	// Types that are assignable to Info:
	//	*Chat_OneToOneInfo
	//	*Chat_GroupInfo
	//	*Chat_AnonMatchInfo
	Info isChat_Info `protobuf_oneof:"info"`
	// Optional chat theme of this chat.
	ChatThemeId *ChatThemeId `protobuf:"bytes,4,opt,name=chat_theme_id,json=chatThemeId,proto3" json:"chat_theme_id,omitempty"`
	// Optional mute status of this chat. Note that this is caller sensitive as it denotes
	// whether or not the _caller_ has muted the chat. Multiple members of a chat might
	// see different mute statuses here.
	MuteStatus *MuteStatus `protobuf:"bytes,5,opt,name=mute_status,json=muteStatus,proto3" json:"mute_status,omitempty"`
	// Default category of this chat. NEW signifies that this chat should be placed
	// in the New Chats bucket on clients.
	ChatCategory *ChatCategory `protobuf:"bytes,6,opt,name=chat_category,json=chatCategory,proto3" json:"chat_category,omitempty"`
}

func (x *Chat) Reset() {
	*x = Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_chats_v2_model_proto_rawDescGZIP(), []int{0}
}

func (x *Chat) GetId() *v2.ChatId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *Chat) GetInfo() isChat_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *Chat) GetOneToOneInfo() *OneToOneInfo {
	if x, ok := x.GetInfo().(*Chat_OneToOneInfo); ok {
		return x.OneToOneInfo
	}
	return nil
}

func (x *Chat) GetGroupInfo() *GroupInfoShort {
	if x, ok := x.GetInfo().(*Chat_GroupInfo); ok {
		return x.GroupInfo
	}
	return nil
}

func (x *Chat) GetAnonMatchInfo() *AnonMatchInfo {
	if x, ok := x.GetInfo().(*Chat_AnonMatchInfo); ok {
		return x.AnonMatchInfo
	}
	return nil
}

func (x *Chat) GetChatThemeId() *ChatThemeId {
	if x != nil {
		return x.ChatThemeId
	}
	return nil
}

func (x *Chat) GetMuteStatus() *MuteStatus {
	if x != nil {
		return x.MuteStatus
	}
	return nil
}

func (x *Chat) GetChatCategory() *ChatCategory {
	if x != nil {
		return x.ChatCategory
	}
	return nil
}

type isChat_Info interface {
	isChat_Info()
}

type Chat_OneToOneInfo struct {
	OneToOneInfo *OneToOneInfo `protobuf:"bytes,2,opt,name=one_to_one_info,json=oneToOneInfo,proto3,oneof"`
}

type Chat_GroupInfo struct {
	GroupInfo *GroupInfoShort `protobuf:"bytes,3,opt,name=group_info,json=groupInfo,proto3,oneof"`
}

type Chat_AnonMatchInfo struct {
	AnonMatchInfo *AnonMatchInfo `protobuf:"bytes,7,opt,name=anon_match_info,json=anonMatchInfo,proto3,oneof"`
}

func (*Chat_OneToOneInfo) isChat_Info() {}

func (*Chat_GroupInfo) isChat_Info() {}

func (*Chat_AnonMatchInfo) isChat_Info() {}

// Theme id of a chat. Chats like OneToOne and Group chats can have chat themes which are products
// that customize the user's chat experience.
type ChatThemeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the chat theme product to be displayed.
	// Chat theme assets are fetched from the chat assets service using this asset id.
	AssetId *v21.AssetId `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ChatThemeId) Reset() {
	*x = ChatThemeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatThemeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatThemeId) ProtoMessage() {}

func (x *ChatThemeId) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatThemeId.ProtoReflect.Descriptor instead.
func (*ChatThemeId) Descriptor() ([]byte, []int) {
	return file_chats_v2_model_proto_rawDescGZIP(), []int{1}
}

func (x *ChatThemeId) GetAssetId() *v21.AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

// Mute status of a chat from the perspective of the caller.
type MuteStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MuteStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=common.chats.v2.MuteStatus_Status" json:"status,omitempty"`
	// Optional expiry time of the mute.
	// If status == MUTED and this is set, then this mute status will expire
	// on the value of this field and status will automatically change to NOT_MUTED.
	// If status == MUTED and this is _not_ set, then this mute will not expire until
	// the mute status is explicitly set to NOT_MUTED.
	Expiry *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *MuteStatus) Reset() {
	*x = MuteStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteStatus) ProtoMessage() {}

func (x *MuteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteStatus.ProtoReflect.Descriptor instead.
func (*MuteStatus) Descriptor() ([]byte, []int) {
	return file_chats_v2_model_proto_rawDescGZIP(), []int{2}
}

func (x *MuteStatus) GetStatus() MuteStatus_Status {
	if x != nil {
		return x.Status
	}
	return MuteStatus_NOT_MUTED
}

func (x *MuteStatus) GetExpiry() *timestamp.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type ChatCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category ChatCategory_Category `protobuf:"varint,1,opt,name=category,proto3,enum=common.chats.v2.ChatCategory_Category" json:"category,omitempty"`
}

func (x *ChatCategory) Reset() {
	*x = ChatCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chats_v2_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCategory) ProtoMessage() {}

func (x *ChatCategory) ProtoReflect() protoreflect.Message {
	mi := &file_chats_v2_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCategory.ProtoReflect.Descriptor instead.
func (*ChatCategory) Descriptor() ([]byte, []int) {
	return file_chats_v2_model_proto_rawDescGZIP(), []int{3}
}

func (x *ChatCategory) GetCategory() ChatCategory_Category {
	if x != nil {
		return x.Category
	}
	return ChatCategory_UNKNOWN
}

var File_chats_v2_model_proto protoreflect.FileDescriptor

var file_chats_v2_model_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x68, 0x61, 0x74,
	0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x03, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x6e,
	0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0f,
	0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74,
	0x68, 0x65, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x6d, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6d, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa0,
	0x01, 0x0a, 0x0a, 0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x22, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x4d,
	0x55, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x49, 0x45,
	0x4e, 0x44, 0x4c, 0x59, 0x10, 0x02, 0x42, 0x70, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69,
	0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69,
	0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x3b,
	0x63, 0x68, 0x61, 0x74, 0x73, 0xa2, 0x02, 0x10, 0x4b, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x73, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chats_v2_model_proto_rawDescOnce sync.Once
	file_chats_v2_model_proto_rawDescData = file_chats_v2_model_proto_rawDesc
)

func file_chats_v2_model_proto_rawDescGZIP() []byte {
	file_chats_v2_model_proto_rawDescOnce.Do(func() {
		file_chats_v2_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_chats_v2_model_proto_rawDescData)
	})
	return file_chats_v2_model_proto_rawDescData
}

var file_chats_v2_model_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chats_v2_model_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_chats_v2_model_proto_goTypes = []interface{}{
	(MuteStatus_Status)(0),      // 0: common.chats.v2.MuteStatus.Status
	(ChatCategory_Category)(0),  // 1: common.chats.v2.ChatCategory.Category
	(*Chat)(nil),                // 2: common.chats.v2.Chat
	(*ChatThemeId)(nil),         // 3: common.chats.v2.ChatThemeId
	(*MuteStatus)(nil),          // 4: common.chats.v2.MuteStatus
	(*ChatCategory)(nil),        // 5: common.chats.v2.ChatCategory
	(*v2.ChatId)(nil),           // 6: common.v2.ChatId
	(*OneToOneInfo)(nil),        // 7: common.chats.v2.OneToOneInfo
	(*GroupInfoShort)(nil),      // 8: common.chats.v2.GroupInfoShort
	(*AnonMatchInfo)(nil),       // 9: common.chats.v2.AnonMatchInfo
	(*v21.AssetId)(nil),         // 10: common.asset.v2.AssetId
	(*timestamp.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_chats_v2_model_proto_depIdxs = []int32{
	6,  // 0: common.chats.v2.Chat.id:type_name -> common.v2.ChatId
	7,  // 1: common.chats.v2.Chat.one_to_one_info:type_name -> common.chats.v2.OneToOneInfo
	8,  // 2: common.chats.v2.Chat.group_info:type_name -> common.chats.v2.GroupInfoShort
	9,  // 3: common.chats.v2.Chat.anon_match_info:type_name -> common.chats.v2.AnonMatchInfo
	3,  // 4: common.chats.v2.Chat.chat_theme_id:type_name -> common.chats.v2.ChatThemeId
	4,  // 5: common.chats.v2.Chat.mute_status:type_name -> common.chats.v2.MuteStatus
	5,  // 6: common.chats.v2.Chat.chat_category:type_name -> common.chats.v2.ChatCategory
	10, // 7: common.chats.v2.ChatThemeId.asset_id:type_name -> common.asset.v2.AssetId
	0,  // 8: common.chats.v2.MuteStatus.status:type_name -> common.chats.v2.MuteStatus.Status
	11, // 9: common.chats.v2.MuteStatus.expiry:type_name -> google.protobuf.Timestamp
	1,  // 10: common.chats.v2.ChatCategory.category:type_name -> common.chats.v2.ChatCategory.Category
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chats_v2_model_proto_init() }
func file_chats_v2_model_proto_init() {
	if File_chats_v2_model_proto != nil {
		return
	}
	file_chats_v2_chat_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chats_v2_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatThemeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chats_v2_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chats_v2_model_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Chat_OneToOneInfo)(nil),
		(*Chat_GroupInfo)(nil),
		(*Chat_AnonMatchInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chats_v2_model_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chats_v2_model_proto_goTypes,
		DependencyIndexes: file_chats_v2_model_proto_depIdxs,
		EnumInfos:         file_chats_v2_model_proto_enumTypes,
		MessageInfos:      file_chats_v2_model_proto_msgTypes,
	}.Build()
	File_chats_v2_model_proto = out.File
	file_chats_v2_model_proto_rawDesc = nil
	file_chats_v2_model_proto_goTypes = nil
	file_chats_v2_model_proto_depIdxs = nil
}
