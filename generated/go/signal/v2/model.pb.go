// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: signal/v2/model.proto

package signal

import (
	v25 "github.com/sokkit-io/xiphias-model-common/generated/go/asset/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v22 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/account/v2"
	v23 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/transaction/v2"
	v24 "github.com/sokkit-io/xiphias-model-common/generated/go/marketplace/v2"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/video/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A signal notifies a client that an action should be performed. It's primary
// intention is to be a mechanism in which services can 'signal' a user client
// to perform some kind of action in a reliable way. It is _not_ a mechanism
// to send data, or synchronize data in and of itself. It _can_, however, be
// used as a mechanism to indicate that synchronization should be performed.
//
// See the related services in xiphias-api-internal and xiphias-api-mobile for
// usage details.
type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id is _only_ generated by the internal signal service. It is opaque to
	// the rest of the world (both internal and external).
	// This should always be set for persistent signals and should never be set for
	// transient signals.
	Id *Signal_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Kind:
	//	*Signal_GlobalSignal
	//	*Signal_PersonaSignal
	//	*Signal_ChatSignal
	//	*Signal_ContactListSignal
	//	*Signal_IsTypingSignal
	//	*Signal_KikCodeScannedSignal
	//	*Signal_VideoConferenceUpdateSignal
	//	*Signal_KinAccountActivatedSignal
	//	*Signal_TransactionHistoryUpdatedSignal
	//	*Signal_ChatAssetListingClaimedSignal
	//	*Signal_SafetyNetSignal
	//	*Signal_ChatAssetSignal
	//	*Signal_AnonMatchListingClaimedSignal
	Kind isSignal_Kind `protobuf_oneof:"kind"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{0}
}

func (x *Signal) GetId() *Signal_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *Signal) GetKind() isSignal_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Signal) GetGlobalSignal() *GlobalSignal {
	if x, ok := x.GetKind().(*Signal_GlobalSignal); ok {
		return x.GlobalSignal
	}
	return nil
}

func (x *Signal) GetPersonaSignal() *PersonaSignal {
	if x, ok := x.GetKind().(*Signal_PersonaSignal); ok {
		return x.PersonaSignal
	}
	return nil
}

func (x *Signal) GetChatSignal() *ChatSignal {
	if x, ok := x.GetKind().(*Signal_ChatSignal); ok {
		return x.ChatSignal
	}
	return nil
}

func (x *Signal) GetContactListSignal() *ContactListSignal {
	if x, ok := x.GetKind().(*Signal_ContactListSignal); ok {
		return x.ContactListSignal
	}
	return nil
}

func (x *Signal) GetIsTypingSignal() *IsTypingSignal {
	if x, ok := x.GetKind().(*Signal_IsTypingSignal); ok {
		return x.IsTypingSignal
	}
	return nil
}

func (x *Signal) GetKikCodeScannedSignal() *KikCodeScannedSignal {
	if x, ok := x.GetKind().(*Signal_KikCodeScannedSignal); ok {
		return x.KikCodeScannedSignal
	}
	return nil
}

func (x *Signal) GetVideoConferenceUpdateSignal() *VideoConferenceUpdateSignal {
	if x, ok := x.GetKind().(*Signal_VideoConferenceUpdateSignal); ok {
		return x.VideoConferenceUpdateSignal
	}
	return nil
}

func (x *Signal) GetKinAccountActivatedSignal() *KinAccountActivatedSignal {
	if x, ok := x.GetKind().(*Signal_KinAccountActivatedSignal); ok {
		return x.KinAccountActivatedSignal
	}
	return nil
}

func (x *Signal) GetTransactionHistoryUpdatedSignal() *TransactionHistoryUpdatedSignal {
	if x, ok := x.GetKind().(*Signal_TransactionHistoryUpdatedSignal); ok {
		return x.TransactionHistoryUpdatedSignal
	}
	return nil
}

func (x *Signal) GetChatAssetListingClaimedSignal() *ChatAssetListingClaimedSignal {
	if x, ok := x.GetKind().(*Signal_ChatAssetListingClaimedSignal); ok {
		return x.ChatAssetListingClaimedSignal
	}
	return nil
}

func (x *Signal) GetSafetyNetSignal() *SafetyNetSignal {
	if x, ok := x.GetKind().(*Signal_SafetyNetSignal); ok {
		return x.SafetyNetSignal
	}
	return nil
}

func (x *Signal) GetChatAssetSignal() *ChatAssetSignal {
	if x, ok := x.GetKind().(*Signal_ChatAssetSignal); ok {
		return x.ChatAssetSignal
	}
	return nil
}

func (x *Signal) GetAnonMatchListingClaimedSignal() *AnonMatchListingClaimedSignal {
	if x, ok := x.GetKind().(*Signal_AnonMatchListingClaimedSignal); ok {
		return x.AnonMatchListingClaimedSignal
	}
	return nil
}

type isSignal_Kind interface {
	isSignal_Kind()
}

type Signal_GlobalSignal struct {
	GlobalSignal *GlobalSignal `protobuf:"bytes,2,opt,name=global_signal,json=globalSignal,proto3,oneof"`
}

type Signal_PersonaSignal struct {
	PersonaSignal *PersonaSignal `protobuf:"bytes,3,opt,name=persona_signal,json=personaSignal,proto3,oneof"`
}

type Signal_ChatSignal struct {
	ChatSignal *ChatSignal `protobuf:"bytes,4,opt,name=chat_signal,json=chatSignal,proto3,oneof"`
}

type Signal_ContactListSignal struct {
	ContactListSignal *ContactListSignal `protobuf:"bytes,5,opt,name=contact_list_signal,json=contactListSignal,proto3,oneof"`
}

type Signal_IsTypingSignal struct {
	IsTypingSignal *IsTypingSignal `protobuf:"bytes,6,opt,name=is_typing_signal,json=isTypingSignal,proto3,oneof"`
}

type Signal_KikCodeScannedSignal struct {
	KikCodeScannedSignal *KikCodeScannedSignal `protobuf:"bytes,7,opt,name=kik_code_scanned_signal,json=kikCodeScannedSignal,proto3,oneof"`
}

type Signal_VideoConferenceUpdateSignal struct {
	VideoConferenceUpdateSignal *VideoConferenceUpdateSignal `protobuf:"bytes,8,opt,name=video_conference_update_signal,json=videoConferenceUpdateSignal,proto3,oneof"`
}

type Signal_KinAccountActivatedSignal struct {
	KinAccountActivatedSignal *KinAccountActivatedSignal `protobuf:"bytes,9,opt,name=kin_account_activated_signal,json=kinAccountActivatedSignal,proto3,oneof"`
}

type Signal_TransactionHistoryUpdatedSignal struct {
	TransactionHistoryUpdatedSignal *TransactionHistoryUpdatedSignal `protobuf:"bytes,10,opt,name=transaction_history_updated_signal,json=transactionHistoryUpdatedSignal,proto3,oneof"`
}

type Signal_ChatAssetListingClaimedSignal struct {
	ChatAssetListingClaimedSignal *ChatAssetListingClaimedSignal `protobuf:"bytes,11,opt,name=chat_asset_listing_claimed_signal,json=chatAssetListingClaimedSignal,proto3,oneof"`
}

type Signal_SafetyNetSignal struct {
	SafetyNetSignal *SafetyNetSignal `protobuf:"bytes,12,opt,name=safety_net_signal,json=safetyNetSignal,proto3,oneof"`
}

type Signal_ChatAssetSignal struct {
	ChatAssetSignal *ChatAssetSignal `protobuf:"bytes,13,opt,name=chat_asset_signal,json=chatAssetSignal,proto3,oneof"`
}

type Signal_AnonMatchListingClaimedSignal struct {
	AnonMatchListingClaimedSignal *AnonMatchListingClaimedSignal `protobuf:"bytes,14,opt,name=anon_match_listing_claimed_signal,json=anonMatchListingClaimedSignal,proto3,oneof"`
}

func (*Signal_GlobalSignal) isSignal_Kind() {}

func (*Signal_PersonaSignal) isSignal_Kind() {}

func (*Signal_ChatSignal) isSignal_Kind() {}

func (*Signal_ContactListSignal) isSignal_Kind() {}

func (*Signal_IsTypingSignal) isSignal_Kind() {}

func (*Signal_KikCodeScannedSignal) isSignal_Kind() {}

func (*Signal_VideoConferenceUpdateSignal) isSignal_Kind() {}

func (*Signal_KinAccountActivatedSignal) isSignal_Kind() {}

func (*Signal_TransactionHistoryUpdatedSignal) isSignal_Kind() {}

func (*Signal_ChatAssetListingClaimedSignal) isSignal_Kind() {}

func (*Signal_SafetyNetSignal) isSignal_Kind() {}

func (*Signal_ChatAssetSignal) isSignal_Kind() {}

func (*Signal_AnonMatchListingClaimedSignal) isSignal_Kind() {}

// GlobalSignal indicates that everything should be scheduled for a
// refresh.
//
// It is reserved more more extreme edge cases, such as when an account
// may be inactive for an extended period of time, and their log is
// getting significantly full. The sending of a GlobalSignal is therefore
// restricted to a whitelisted set of signaler's, enforced by the Signaler
// service.
type GlobalSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalSignal) Reset() {
	*x = GlobalSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSignal) ProtoMessage() {}

func (x *GlobalSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSignal.ProtoReflect.Descriptor instead.
func (*GlobalSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{1}
}

type PersonaSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If persona_id is set, then only the specified persona should be updated.
	// If persona_id is not set, then all personas should be updated.
	PersonaId *v2.PersonaId `protobuf:"bytes,1,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
}

func (x *PersonaSignal) Reset() {
	*x = PersonaSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonaSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonaSignal) ProtoMessage() {}

func (x *PersonaSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonaSignal.ProtoReflect.Descriptor instead.
func (*PersonaSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{2}
}

func (x *PersonaSignal) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

type ChatSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if chat_id is set, then only the indicated chat should be updated.
	// If chat_id is not set, then all chats should be updated.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *ChatSignal) Reset() {
	*x = ChatSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSignal) ProtoMessage() {}

func (x *ChatSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSignal.ProtoReflect.Descriptor instead.
func (*ChatSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{3}
}

func (x *ChatSignal) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

type ContactListSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactId *v2.PersonaId `protobuf:"bytes,1,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
}

func (x *ContactListSignal) Reset() {
	*x = ContactListSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactListSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactListSignal) ProtoMessage() {}

func (x *ContactListSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactListSignal.ProtoReflect.Descriptor instead.
func (*ContactListSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{4}
}

func (x *ContactListSignal) GetContactId() *v2.PersonaId {
	if x != nil {
		return x.ContactId
	}
	return nil
}

type IsTypingSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications []*IsTypingSignal_IsTypingNotification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *IsTypingSignal) Reset() {
	*x = IsTypingSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTypingSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTypingSignal) ProtoMessage() {}

func (x *IsTypingSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTypingSignal.ProtoReflect.Descriptor instead.
func (*IsTypingSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{5}
}

func (x *IsTypingSignal) GetNotifications() []*IsTypingSignal_IsTypingNotification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

// Signal notifying a user that someone has scanned one of their Kik codes.
// The signal is not guaranteed to be persistent and may be lost if the receiving client isn't currently bound to the
// signal stream.
type KikCodeScannedSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Persona ID of the user that scanning this code
	ScanningPersonaId *v2.PersonaId `protobuf:"bytes,1,opt,name=scanning_persona_id,json=scanningPersonaId,proto3" json:"scanning_persona_id,omitempty"`
	// Nonce contained in the scanned code. The receiving client may decide to trigger different actions based on it.
	Nonce uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *KikCodeScannedSignal) Reset() {
	*x = KikCodeScannedSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KikCodeScannedSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KikCodeScannedSignal) ProtoMessage() {}

func (x *KikCodeScannedSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KikCodeScannedSignal.ProtoReflect.Descriptor instead.
func (*KikCodeScannedSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{6}
}

func (x *KikCodeScannedSignal) GetScanningPersonaId() *v2.PersonaId {
	if x != nil {
		return x.ScanningPersonaId
	}
	return nil
}

func (x *KikCodeScannedSignal) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// Signal notifying a client that there was an update to a video conference triggered by a remote client.
// Upon receiving this type of signal, clients should attempt to fetch the video conference contents and update their
// local peer connection with the updated contents.
// This signal type should expire after a short delay, as they are not needed to be received once the video conference
// is terminated.
type VideoConferenceUpdateSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId            *v2.ChatId             `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	VideoConferenceId *v21.VideoConferenceId `protobuf:"bytes,3,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
}

func (x *VideoConferenceUpdateSignal) Reset() {
	*x = VideoConferenceUpdateSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConferenceUpdateSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConferenceUpdateSignal) ProtoMessage() {}

func (x *VideoConferenceUpdateSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConferenceUpdateSignal.ProtoReflect.Descriptor instead.
func (*VideoConferenceUpdateSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{7}
}

func (x *VideoConferenceUpdateSignal) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *VideoConferenceUpdateSignal) GetVideoConferenceId() *v21.VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

// Signal notifying the successful activation of a kin account for a user (User's kin wallet was activated).
// Upon receiving this type of signal, the user will have the ability to transact on the marketplace and use various kin
// features on the app. If kin account id isn't provided, the client will re-fetch its persona profile (which will
// contain the kin account id)
type KinAccountActivatedSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KinAccountId *v22.KinAccountId `protobuf:"bytes,1,opt,name=kin_account_id,json=kinAccountId,proto3" json:"kin_account_id,omitempty"`
}

func (x *KinAccountActivatedSignal) Reset() {
	*x = KinAccountActivatedSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KinAccountActivatedSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KinAccountActivatedSignal) ProtoMessage() {}

func (x *KinAccountActivatedSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KinAccountActivatedSignal.ProtoReflect.Descriptor instead.
func (*KinAccountActivatedSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{8}
}

func (x *KinAccountActivatedSignal) GetKinAccountId() *v22.KinAccountId {
	if x != nil {
		return x.KinAccountId
	}
	return nil
}

// Signal notifying the addition of a new transaction record or update of an existing one, as well as a notifying
// to refresh entire transaction history. Upon receiving this type of signal, the client will fetch or re-fetch a
// specific transaction record entry using the hash enclosed. If a transaction id is not provided, the client will
// have to refresh the entire transaction history
type TransactionHistoryUpdatedSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId *v23.TransactionId `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *TransactionHistoryUpdatedSignal) Reset() {
	*x = TransactionHistoryUpdatedSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHistoryUpdatedSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHistoryUpdatedSignal) ProtoMessage() {}

func (x *TransactionHistoryUpdatedSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHistoryUpdatedSignal.ProtoReflect.Descriptor instead.
func (*TransactionHistoryUpdatedSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionHistoryUpdatedSignal) GetTransactionId() *v23.TransactionId {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

// Signal notifying the successful claim of a chat asset by a user. Upon receiving this type of signal, the client will
// re-fetch the chat asset data (which will include an updated claimed flag).
// If asset id is not provided, client will re-fetch entire set of a specific listing type
type ChatAssetListingClaimedSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListingCategory v24.ListingCategory `protobuf:"varint,1,opt,name=listing_category,json=listingCategory,proto3,enum=common.marketplace.v2.ListingCategory" json:"listing_category,omitempty"`
	ListingId       *v24.ListingId      `protobuf:"bytes,2,opt,name=listing_id,json=listingId,proto3" json:"listing_id,omitempty"`
}

func (x *ChatAssetListingClaimedSignal) Reset() {
	*x = ChatAssetListingClaimedSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatAssetListingClaimedSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatAssetListingClaimedSignal) ProtoMessage() {}

func (x *ChatAssetListingClaimedSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatAssetListingClaimedSignal.ProtoReflect.Descriptor instead.
func (*ChatAssetListingClaimedSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{10}
}

func (x *ChatAssetListingClaimedSignal) GetListingCategory() v24.ListingCategory {
	if x != nil {
		return x.ListingCategory
	}
	return v24.ListingCategory(0)
}

func (x *ChatAssetListingClaimedSignal) GetListingId() *v24.ListingId {
	if x != nil {
		return x.ListingId
	}
	return nil
}

// Signal notifying the successful claim of a chat asset by a user. Upon receiving this type of signal, the client will
// re-fetch the chat asset data (which will include an updated claimed flag).
// If asset ids are not provided, client will re-fetch all chat assets
type ChatAssetSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIds []*v25.AssetId `protobuf:"bytes,1,rep,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty"`
}

func (x *ChatAssetSignal) Reset() {
	*x = ChatAssetSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatAssetSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatAssetSignal) ProtoMessage() {}

func (x *ChatAssetSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatAssetSignal.ProtoReflect.Descriptor instead.
func (*ChatAssetSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{11}
}

func (x *ChatAssetSignal) GetAssetIds() []*v25.AssetId {
	if x != nil {
		return x.AssetIds
	}
	return nil
}

// Signals a client to perform a safety net check. This applies to Android only. iPhone's must ignore this signal.
// This signal should persist but expire after a reasonable delay to allow clients to connect and respond if offline.
// Only the most recent signal should be persisted, older signals should be deleted.
type SafetyNetSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SafetyNetSignal) Reset() {
	*x = SafetyNetSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafetyNetSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafetyNetSignal) ProtoMessage() {}

func (x *SafetyNetSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafetyNetSignal.ProtoReflect.Descriptor instead.
func (*SafetyNetSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{12}
}

// Signal notifying the successful claim of an anonymous match transaction. Upon receiving this type of signal,
// the client can take appropriate action based on the listingId that was claimed.
// For example, if a "weekly earn offer" was claimed, the clients can show a dialog box to the user.
// This signal may be dropped during compaction.
type AnonMatchListingClaimedSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListingId *v24.ListingId `protobuf:"bytes,1,opt,name=listing_id,json=listingId,proto3" json:"listing_id,omitempty"`
}

func (x *AnonMatchListingClaimedSignal) Reset() {
	*x = AnonMatchListingClaimedSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonMatchListingClaimedSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonMatchListingClaimedSignal) ProtoMessage() {}

func (x *AnonMatchListingClaimedSignal) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonMatchListingClaimedSignal.ProtoReflect.Descriptor instead.
func (*AnonMatchListingClaimedSignal) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{13}
}

func (x *AnonMatchListingClaimedSignal) GetListingId() *v24.ListingId {
	if x != nil {
		return x.ListingId
	}
	return nil
}

// Id is a byte-wise lexicographically sortable Id used for synchronizing
// the signal stream between clients and server.
type Signal_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue []byte `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *Signal_Id) Reset() {
	*x = Signal_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal_Id) ProtoMessage() {}

func (x *Signal_Id) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal_Id.ProtoReflect.Descriptor instead.
func (*Signal_Id) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Signal_Id) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

// IsTypingNotification is a notification indicating if a chat participant is typing.
// A participant currently typing is modelled by periodic IsTypingNotification's with
// is_typing=true.
// A participant which has stopped typing is modelled by either the periodic is_typing=true
// notifications stopping (and some client defined timeout has elapsed) _or_ an
// IsTypingNotification with is_typing=false.
type IsTypingSignal_IsTypingNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId      *v2.ChatId    `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Participant *v2.PersonaId `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
	IsTyping    bool          `protobuf:"varint,3,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"`
}

func (x *IsTypingSignal_IsTypingNotification) Reset() {
	*x = IsTypingSignal_IsTypingNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signal_v2_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTypingSignal_IsTypingNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTypingSignal_IsTypingNotification) ProtoMessage() {}

func (x *IsTypingSignal_IsTypingNotification) ProtoReflect() protoreflect.Message {
	mi := &file_signal_v2_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTypingSignal_IsTypingNotification.ProtoReflect.Descriptor instead.
func (*IsTypingSignal_IsTypingNotification) Descriptor() ([]byte, []int) {
	return file_signal_v2_model_proto_rawDescGZIP(), []int{5, 0}
}

func (x *IsTypingSignal_IsTypingNotification) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *IsTypingSignal_IsTypingNotification) GetParticipant() *v2.PersonaId {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *IsTypingSignal_IsTypingNotification) GetIsTyping() bool {
	if x != nil {
		return x.IsTyping
	}
	return false
}

var File_signal_v2_model_proto protoreflect.FileDescriptor

var file_signal_v2_model_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x6b, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6b, 0x69, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1,
	0x0a, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e,
	0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45,
	0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x55, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x5f, 0x0a, 0x17, 0x6b, 0x69, 0x6b, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x14, 0x6b, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x74, 0x0a, 0x1e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x1b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x6e, 0x0a, 0x1c,
	0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x19, 0x6b, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x80, 0x01, 0x0a,
	0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x1f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x7b, 0x0a, 0x21, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x63,
	0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x11,
	0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x4e, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4e, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a,
	0x11, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x7b,
	0x0a, 0x21, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6e, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x6e,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x1a, 0x2d, 0x0a, 0x02, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0xca, 0x9d, 0x25, 0x06, 0x08, 0x01, 0x28, 0x10, 0x30, 0x20,
	0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64,
	0x22, 0x40, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x22, 0x50, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49,
	0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x69, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0xca, 0x9d, 0x25, 0x08, 0x08, 0x01, 0x78, 0x01, 0x80,
	0x01, 0x80, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x14, 0x49, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x92, 0x01, 0x0a,
	0x14, 0x4b, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x13, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x16, 0xca, 0x9d, 0x25, 0x12, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x41, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x22, 0xad, 0x01, 0x0a, 0x1b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x11,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x66, 0x0a, 0x19, 0x4b, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x49,
	0x0a, 0x0e, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6b, 0x69, 0x6e, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4b,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x6b, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69,
	0x6e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb3, 0x01,
	0x0a, 0x1d, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x51, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x80, 0x01, 0x64, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x4e, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x1d, 0x41, 0x6e, 0x6f,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x42, 0x74, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x76, 0x32, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69,
	0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x32, 0x3b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0xa2, 0x02, 0x11,
	0x4b, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x56,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_signal_v2_model_proto_rawDescOnce sync.Once
	file_signal_v2_model_proto_rawDescData = file_signal_v2_model_proto_rawDesc
)

func file_signal_v2_model_proto_rawDescGZIP() []byte {
	file_signal_v2_model_proto_rawDescOnce.Do(func() {
		file_signal_v2_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_signal_v2_model_proto_rawDescData)
	})
	return file_signal_v2_model_proto_rawDescData
}

var file_signal_v2_model_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_signal_v2_model_proto_goTypes = []interface{}{
	(*Signal)(nil),                              // 0: common.signal.v2.Signal
	(*GlobalSignal)(nil),                        // 1: common.signal.v2.GlobalSignal
	(*PersonaSignal)(nil),                       // 2: common.signal.v2.PersonaSignal
	(*ChatSignal)(nil),                          // 3: common.signal.v2.ChatSignal
	(*ContactListSignal)(nil),                   // 4: common.signal.v2.ContactListSignal
	(*IsTypingSignal)(nil),                      // 5: common.signal.v2.IsTypingSignal
	(*KikCodeScannedSignal)(nil),                // 6: common.signal.v2.KikCodeScannedSignal
	(*VideoConferenceUpdateSignal)(nil),         // 7: common.signal.v2.VideoConferenceUpdateSignal
	(*KinAccountActivatedSignal)(nil),           // 8: common.signal.v2.KinAccountActivatedSignal
	(*TransactionHistoryUpdatedSignal)(nil),     // 9: common.signal.v2.TransactionHistoryUpdatedSignal
	(*ChatAssetListingClaimedSignal)(nil),       // 10: common.signal.v2.ChatAssetListingClaimedSignal
	(*ChatAssetSignal)(nil),                     // 11: common.signal.v2.ChatAssetSignal
	(*SafetyNetSignal)(nil),                     // 12: common.signal.v2.SafetyNetSignal
	(*AnonMatchListingClaimedSignal)(nil),       // 13: common.signal.v2.AnonMatchListingClaimedSignal
	(*Signal_Id)(nil),                           // 14: common.signal.v2.Signal.Id
	(*IsTypingSignal_IsTypingNotification)(nil), // 15: common.signal.v2.IsTypingSignal.IsTypingNotification
	(*v2.PersonaId)(nil),                        // 16: common.v2.PersonaId
	(*v2.ChatId)(nil),                           // 17: common.v2.ChatId
	(*v21.VideoConferenceId)(nil),               // 18: common.video.v2.VideoConferenceId
	(*v22.KinAccountId)(nil),                    // 19: common.kin.account.v2.KinAccountId
	(*v23.TransactionId)(nil),                   // 20: common.kin.transaction.v2.TransactionId
	(v24.ListingCategory)(0),                    // 21: common.marketplace.v2.ListingCategory
	(*v24.ListingId)(nil),                       // 22: common.marketplace.v2.ListingId
	(*v25.AssetId)(nil),                         // 23: common.asset.v2.AssetId
}
var file_signal_v2_model_proto_depIdxs = []int32{
	14, // 0: common.signal.v2.Signal.id:type_name -> common.signal.v2.Signal.Id
	1,  // 1: common.signal.v2.Signal.global_signal:type_name -> common.signal.v2.GlobalSignal
	2,  // 2: common.signal.v2.Signal.persona_signal:type_name -> common.signal.v2.PersonaSignal
	3,  // 3: common.signal.v2.Signal.chat_signal:type_name -> common.signal.v2.ChatSignal
	4,  // 4: common.signal.v2.Signal.contact_list_signal:type_name -> common.signal.v2.ContactListSignal
	5,  // 5: common.signal.v2.Signal.is_typing_signal:type_name -> common.signal.v2.IsTypingSignal
	6,  // 6: common.signal.v2.Signal.kik_code_scanned_signal:type_name -> common.signal.v2.KikCodeScannedSignal
	7,  // 7: common.signal.v2.Signal.video_conference_update_signal:type_name -> common.signal.v2.VideoConferenceUpdateSignal
	8,  // 8: common.signal.v2.Signal.kin_account_activated_signal:type_name -> common.signal.v2.KinAccountActivatedSignal
	9,  // 9: common.signal.v2.Signal.transaction_history_updated_signal:type_name -> common.signal.v2.TransactionHistoryUpdatedSignal
	10, // 10: common.signal.v2.Signal.chat_asset_listing_claimed_signal:type_name -> common.signal.v2.ChatAssetListingClaimedSignal
	12, // 11: common.signal.v2.Signal.safety_net_signal:type_name -> common.signal.v2.SafetyNetSignal
	11, // 12: common.signal.v2.Signal.chat_asset_signal:type_name -> common.signal.v2.ChatAssetSignal
	13, // 13: common.signal.v2.Signal.anon_match_listing_claimed_signal:type_name -> common.signal.v2.AnonMatchListingClaimedSignal
	16, // 14: common.signal.v2.PersonaSignal.persona_id:type_name -> common.v2.PersonaId
	17, // 15: common.signal.v2.ChatSignal.chat_id:type_name -> common.v2.ChatId
	16, // 16: common.signal.v2.ContactListSignal.contact_id:type_name -> common.v2.PersonaId
	15, // 17: common.signal.v2.IsTypingSignal.notifications:type_name -> common.signal.v2.IsTypingSignal.IsTypingNotification
	16, // 18: common.signal.v2.KikCodeScannedSignal.scanning_persona_id:type_name -> common.v2.PersonaId
	17, // 19: common.signal.v2.VideoConferenceUpdateSignal.chat_id:type_name -> common.v2.ChatId
	18, // 20: common.signal.v2.VideoConferenceUpdateSignal.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	19, // 21: common.signal.v2.KinAccountActivatedSignal.kin_account_id:type_name -> common.kin.account.v2.KinAccountId
	20, // 22: common.signal.v2.TransactionHistoryUpdatedSignal.transaction_id:type_name -> common.kin.transaction.v2.TransactionId
	21, // 23: common.signal.v2.ChatAssetListingClaimedSignal.listing_category:type_name -> common.marketplace.v2.ListingCategory
	22, // 24: common.signal.v2.ChatAssetListingClaimedSignal.listing_id:type_name -> common.marketplace.v2.ListingId
	23, // 25: common.signal.v2.ChatAssetSignal.asset_ids:type_name -> common.asset.v2.AssetId
	22, // 26: common.signal.v2.AnonMatchListingClaimedSignal.listing_id:type_name -> common.marketplace.v2.ListingId
	17, // 27: common.signal.v2.IsTypingSignal.IsTypingNotification.chat_id:type_name -> common.v2.ChatId
	16, // 28: common.signal.v2.IsTypingSignal.IsTypingNotification.participant:type_name -> common.v2.PersonaId
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_signal_v2_model_proto_init() }
func file_signal_v2_model_proto_init() {
	if File_signal_v2_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_signal_v2_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonaSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactListSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTypingSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KikCodeScannedSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConferenceUpdateSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KinAccountActivatedSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHistoryUpdatedSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatAssetListingClaimedSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatAssetSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafetyNetSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonMatchListingClaimedSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signal_v2_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTypingSignal_IsTypingNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_signal_v2_model_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Signal_GlobalSignal)(nil),
		(*Signal_PersonaSignal)(nil),
		(*Signal_ChatSignal)(nil),
		(*Signal_ContactListSignal)(nil),
		(*Signal_IsTypingSignal)(nil),
		(*Signal_KikCodeScannedSignal)(nil),
		(*Signal_VideoConferenceUpdateSignal)(nil),
		(*Signal_KinAccountActivatedSignal)(nil),
		(*Signal_TransactionHistoryUpdatedSignal)(nil),
		(*Signal_ChatAssetListingClaimedSignal)(nil),
		(*Signal_SafetyNetSignal)(nil),
		(*Signal_ChatAssetSignal)(nil),
		(*Signal_AnonMatchListingClaimedSignal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_signal_v2_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_signal_v2_model_proto_goTypes,
		DependencyIndexes: file_signal_v2_model_proto_depIdxs,
		MessageInfos:      file_signal_v2_model_proto_msgTypes,
	}.Build()
	File_signal_v2_model_proto = out.File
	file_signal_v2_model_proto_rawDesc = nil
	file_signal_v2_model_proto_goTypes = nil
	file_signal_v2_model_proto_depIdxs = nil
}
