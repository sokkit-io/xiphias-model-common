// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: messagepath/v1/keyboards.proto

package messagepath

import (
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v1"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KeyboardAttachment defines the mechanism that allow bots to alter the behavior of keyboards on a
// user's device.
//
// Specifying a Keyboard allows a bot to give the user more information about what kinds of
// responses they expect from the user at that point in time.
//
// Up to 51 of these may be present in a single message to be delivered. The case where this can
// occur is in the case of a bot responding to a mention in a group containing 50 individuals, and
// also having a default.
//
// If a client receives multiple keyboards in this list. The first one should be taken as the
// correct one to display. In the future, clients may support multiple keyboards being received.
//
// See: https://docs.google.com/document/d/18C33WPHg9v-Yaot1eMeR8bonllo5qbL0oR0pC3ZjDPs/edit
// And: https://docs.google.com/document/d/11WF4MeW55z1bPkBQwoDlQ1-kT0pQz_or4FWXBZgf2PY/edit
// And: https://dev.kik.com/#/docs/messaging#keyboards
type KeyboardAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyboards []*Keyboard `protobuf:"bytes,1,rep,name=keyboards,proto3" json:"keyboards,omitempty"`
}

func (x *KeyboardAttachment) Reset() {
	*x = KeyboardAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyboardAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyboardAttachment) ProtoMessage() {}

func (x *KeyboardAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyboardAttachment.ProtoReflect.Descriptor instead.
func (*KeyboardAttachment) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{0}
}

func (x *KeyboardAttachment) GetKeyboards() []*Keyboard {
	if x != nil {
		return x.Keyboards
	}
	return nil
}

// A single keyboard defines how a client should render the input space on their screen.
type Keyboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user that will receive this particular instance of the keyboard.
	//
	// In the event that this field is omitted, this keyboard should be sent to all users that will
	// receive the message containing this keyboard.
	// TODO: To be removed after switching all consumers to to_v2
	//
	// Deprecated: Marked as deprecated in messagepath/v1/keyboards.proto.
	To *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	// to_v2 will replace non-versioned.
	// The to can be userJid or an aliased jid
	ToV2 *v1.XiBareUserJidOrAliasJid `protobuf:"bytes,3,opt,name=to_v2,json=toV2,proto3" json:"to_v2,omitempty"`
	// Determines whether or not this keyboard will be shown to the user first.
	//
	// If true, show the user the system default keyboard with the option to toggle to this
	// keyboard.
	// If false, this keyboard should be shown first, with the option to toggle back to the system
	// keyboard.
	Hidden bool `protobuf:"varint,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Types that are assignable to Type:
	//	*Keyboard_SuggestedResponseKeyboard
	Type isKeyboard_Type `protobuf_oneof:"type"`
}

func (x *Keyboard) Reset() {
	*x = Keyboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyboard) ProtoMessage() {}

func (x *Keyboard) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyboard.ProtoReflect.Descriptor instead.
func (*Keyboard) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in messagepath/v1/keyboards.proto.
func (x *Keyboard) GetTo() *_go.XiBareUserJid {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Keyboard) GetToV2() *v1.XiBareUserJidOrAliasJid {
	if x != nil {
		return x.ToV2
	}
	return nil
}

func (x *Keyboard) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (m *Keyboard) GetType() isKeyboard_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Keyboard) GetSuggestedResponseKeyboard() *SuggestedResponseKeyboard {
	if x, ok := x.GetType().(*Keyboard_SuggestedResponseKeyboard); ok {
		return x.SuggestedResponseKeyboard
	}
	return nil
}

type isKeyboard_Type interface {
	isKeyboard_Type()
}

type Keyboard_SuggestedResponseKeyboard struct {
	SuggestedResponseKeyboard *SuggestedResponseKeyboard `protobuf:"bytes,32,opt,name=suggested_response_keyboard,json=suggestedResponseKeyboard,proto3,oneof"`
}

func (*Keyboard_SuggestedResponseKeyboard) isKeyboard_Type() {}

// SuggestedResponseKeyboards allow bots to provide an ordered list of options that a user can
// select from in order to respond to the conversation.
//
// See: https://dev.kik.com/#/docs/messaging#suggested-response-keyboard
type SuggestedResponseKeyboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Bots Platform may apply additional validation against ordering of values provided in this
	// list.
	Responses []*SuggestedResponseItem `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *SuggestedResponseKeyboard) Reset() {
	*x = SuggestedResponseKeyboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedResponseKeyboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedResponseKeyboard) ProtoMessage() {}

func (x *SuggestedResponseKeyboard) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedResponseKeyboard.ProtoReflect.Descriptor instead.
func (*SuggestedResponseKeyboard) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{2}
}

func (x *SuggestedResponseKeyboard) GetResponses() []*SuggestedResponseItem {
	if x != nil {
		return x.Responses
	}
	return nil
}

// A suggested response item represents a single item within a possible list of options for a
// SuggestedResponseKeyboard.
type SuggestedResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata is provided by bots, and must be returned back to the Bot Platform upon users
	// selecting this instance of response. This metadata should be attached to a SuggestedReplyItem
	// when being passed back to the bots platform.
	//
	// Metadata should not be inspected or interpreted by clients.
	Metadata string `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// In the event the client encounters a suggested response type that they have never seen before
	// (i.e. their protobuf definitions predate the development of a suggested response type),
	// no `type` will be parseable from the SuggestedResponseItem that arrives.
	// In this scenario, clients are expected to show the user a suggested response element
	// indicating that this type is not known by the client.
	//
	// Types that are assignable to Type:
	//	*SuggestedResponseItem_TextResponse
	//	*SuggestedResponseItem_PaymentResponse
	//	*SuggestedResponseItem_FriendPickerResponse
	//	*SuggestedResponseItem_PictureResponse
	Type isSuggestedResponseItem_Type `protobuf_oneof:"type"`
}

func (x *SuggestedResponseItem) Reset() {
	*x = SuggestedResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedResponseItem) ProtoMessage() {}

func (x *SuggestedResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedResponseItem.ProtoReflect.Descriptor instead.
func (*SuggestedResponseItem) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{3}
}

func (x *SuggestedResponseItem) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (m *SuggestedResponseItem) GetType() isSuggestedResponseItem_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SuggestedResponseItem) GetTextResponse() *TextSuggestedResponse {
	if x, ok := x.GetType().(*SuggestedResponseItem_TextResponse); ok {
		return x.TextResponse
	}
	return nil
}

func (x *SuggestedResponseItem) GetPaymentResponse() *PaymentSuggestedResponse {
	if x, ok := x.GetType().(*SuggestedResponseItem_PaymentResponse); ok {
		return x.PaymentResponse
	}
	return nil
}

func (x *SuggestedResponseItem) GetFriendPickerResponse() *FriendPickerSuggestedResponse {
	if x, ok := x.GetType().(*SuggestedResponseItem_FriendPickerResponse); ok {
		return x.FriendPickerResponse
	}
	return nil
}

func (x *SuggestedResponseItem) GetPictureResponse() *PictureSuggestedResponse {
	if x, ok := x.GetType().(*SuggestedResponseItem_PictureResponse); ok {
		return x.PictureResponse
	}
	return nil
}

type isSuggestedResponseItem_Type interface {
	isSuggestedResponseItem_Type()
}

type SuggestedResponseItem_TextResponse struct {
	TextResponse *TextSuggestedResponse `protobuf:"bytes,32,opt,name=text_response,json=textResponse,proto3,oneof"`
}

type SuggestedResponseItem_PaymentResponse struct {
	PaymentResponse *PaymentSuggestedResponse `protobuf:"bytes,33,opt,name=payment_response,json=paymentResponse,proto3,oneof"`
}

type SuggestedResponseItem_FriendPickerResponse struct {
	FriendPickerResponse *FriendPickerSuggestedResponse `protobuf:"bytes,34,opt,name=friend_picker_response,json=friendPickerResponse,proto3,oneof"`
}

type SuggestedResponseItem_PictureResponse struct {
	PictureResponse *PictureSuggestedResponse `protobuf:"bytes,35,opt,name=picture_response,json=pictureResponse,proto3,oneof"`
}

func (*SuggestedResponseItem_TextResponse) isSuggestedResponseItem_Type() {}

func (*SuggestedResponseItem_PaymentResponse) isSuggestedResponseItem_Type() {}

func (*SuggestedResponseItem_FriendPickerResponse) isSuggestedResponseItem_Type() {}

func (*SuggestedResponseItem_PictureResponse) isSuggestedResponseItem_Type() {}

// Container for a text message suggested response.
//
// See: https://dev.kik.com/#/docs/messaging#text-response-object
type TextSuggestedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *TextSuggestedResponse) Reset() {
	*x = TextSuggestedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextSuggestedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextSuggestedResponse) ProtoMessage() {}

func (x *TextSuggestedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextSuggestedResponse.ProtoReflect.Descriptor instead.
func (*TextSuggestedResponse) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{4}
}

func (x *TextSuggestedResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// Container for a payment suggested response.
// Private, and undocumented suggested response type.
// Only used internally for demoing purposes (as of Sept 2016).
//
// The Bots Platform uses the Stripe API for payment functionality.
// See: https://github.com/sokkit-io/kik-product/wiki/Payments-API-Docs
// And: https://stripe.com/docs/api
type PaymentSuggestedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Amount      int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// ISO 4217 currency code, must be three characters.
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// Random UUID4 assigned to each payment suggested response by the Bots Platform in order to identify individual
	// transactions.
	TransactionId *_go.XiUuid `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// This message will not be present if the user who is receiving this suggested response does not have a saved
	// payment method.
	SavedCard *PaymentSuggestedResponse_SavedCard `protobuf:"bytes,5,opt,name=saved_card,json=savedCard,proto3" json:"saved_card,omitempty"`
}

func (x *PaymentSuggestedResponse) Reset() {
	*x = PaymentSuggestedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentSuggestedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentSuggestedResponse) ProtoMessage() {}

func (x *PaymentSuggestedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentSuggestedResponse.ProtoReflect.Descriptor instead.
func (*PaymentSuggestedResponse) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{5}
}

func (x *PaymentSuggestedResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PaymentSuggestedResponse) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentSuggestedResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentSuggestedResponse) GetTransactionId() *_go.XiUuid {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *PaymentSuggestedResponse) GetSavedCard() *PaymentSuggestedResponse_SavedCard {
	if x != nil {
		return x.SavedCard
	}
	return nil
}

// Container for a friend picker suggested response
// All fields optional. Fields that are not given values have defaults defined by the API and/or
// clients, depending on where these defaults are expected to live.
// Clients will implement sensible default values, and the Bots API will be able to override them as
// necessary.
//
// See: https://docs.google.com/document/d/1v4JtP1fdah5cvgXW2apScf_bemMkrvh_J370X5jJD48/edit
// And: https://dev.kik.com/#/docs/messaging#friend-picker-response-object
type FriendPickerSuggestedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// Minimum number of users that can be selected in the friend picker shown on clients.
	// Must be less than or equal to the max.
	Min int32 `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum number of users that can be selected in the friend picker shown on clients.
	// Must be greater than or equal to the min.
	Max int32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	// List of jids of users that have been chosen to be selected before the user provides any
	// input.
	//
	// If a user that is selected is not on the receiving user's roster, that user will not be
	// selected.
	// If a user that is selected does not have the sending user in their roster, the resulting
	// message will be dropped, as described by the `VisiblityRulesAttachment` that must come with
	// messages that are sent as a result of `FriendPickedResponse`.
	Preselected []*_go.XiBareUserJid `protobuf:"bytes,4,rep,name=preselected,proto3" json:"preselected,omitempty"`
}

func (x *FriendPickerSuggestedResponse) Reset() {
	*x = FriendPickerSuggestedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendPickerSuggestedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendPickerSuggestedResponse) ProtoMessage() {}

func (x *FriendPickerSuggestedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendPickerSuggestedResponse.ProtoReflect.Descriptor instead.
func (*FriendPickerSuggestedResponse) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{6}
}

func (x *FriendPickerSuggestedResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *FriendPickerSuggestedResponse) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *FriendPickerSuggestedResponse) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *FriendPickerSuggestedResponse) GetPreselected() []*_go.XiBareUserJid {
	if x != nil {
		return x.Preselected
	}
	return nil
}

// Container for a picture suggested response.
//
// See: https://docs.google.com/document/d/1dzZHfT99cD0356C7i7VR6WDyTH6DlSF98eu_pgqEHGo/edit
type PictureSuggestedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of this URL will be what appear in the client's picture suggested response
	// rendering.
	// This thumbnail will have been generated and hosted by the Bots Platform from the content
	// provided by the bot.
	ThumbnailUrl string `protobuf:"bytes,1,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// The URL of the full size image that will be made available to clients after sending the image
	// as a response to the bot.
	PicUrl string `protobuf:"bytes,3,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"`
	// Created by the Bots Platform, and may be used to uniquely identify images.
	PicId *_go.XiUuid `protobuf:"bytes,5,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
}

func (x *PictureSuggestedResponse) Reset() {
	*x = PictureSuggestedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureSuggestedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureSuggestedResponse) ProtoMessage() {}

func (x *PictureSuggestedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureSuggestedResponse.ProtoReflect.Descriptor instead.
func (*PictureSuggestedResponse) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{7}
}

func (x *PictureSuggestedResponse) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *PictureSuggestedResponse) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *PictureSuggestedResponse) GetPicId() *_go.XiUuid {
	if x != nil {
		return x.PicId
	}
	return nil
}

// Generic container for any kind of reply that's made using a custom keyboard.
// Each keyboard should define its own reply message type that is sent in the event of a reply
// directly from interacting with that keyboard.
type KeyboardReplyAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*KeyboardReplyAttachment_SuggestedReply
	Type isKeyboardReplyAttachment_Type `protobuf_oneof:"type"`
}

func (x *KeyboardReplyAttachment) Reset() {
	*x = KeyboardReplyAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyboardReplyAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyboardReplyAttachment) ProtoMessage() {}

func (x *KeyboardReplyAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyboardReplyAttachment.ProtoReflect.Descriptor instead.
func (*KeyboardReplyAttachment) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{8}
}

func (m *KeyboardReplyAttachment) GetType() isKeyboardReplyAttachment_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *KeyboardReplyAttachment) GetSuggestedReply() *SuggestedReply {
	if x, ok := x.GetType().(*KeyboardReplyAttachment_SuggestedReply); ok {
		return x.SuggestedReply
	}
	return nil
}

type isKeyboardReplyAttachment_Type interface {
	isKeyboardReplyAttachment_Type()
}

type KeyboardReplyAttachment_SuggestedReply struct {
	SuggestedReply *SuggestedReply `protobuf:"bytes,1,opt,name=suggested_reply,json=suggestedReply,proto3,oneof"`
}

func (*KeyboardReplyAttachment_SuggestedReply) isKeyboardReplyAttachment_Type() {}

// The entity that is returned to the Bot Platform when a user has selected a response that was
// provided in a bot-supplied suggested response keyboard.
type SuggestedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata field as provided, verbatim, from the the suggested response item that was provided
	// to the client.
	Metadata string `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to Type:
	//	*SuggestedReply_TextReply
	//	*SuggestedReply_PaymentReply
	//	*SuggestedReply_FriendPickerReply
	//	*SuggestedReply_PictureReply
	Type isSuggestedReply_Type `protobuf_oneof:"type"`
}

func (x *SuggestedReply) Reset() {
	*x = SuggestedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedReply) ProtoMessage() {}

func (x *SuggestedReply) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedReply.ProtoReflect.Descriptor instead.
func (*SuggestedReply) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{9}
}

func (x *SuggestedReply) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (m *SuggestedReply) GetType() isSuggestedReply_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SuggestedReply) GetTextReply() *TextSuggestedReply {
	if x, ok := x.GetType().(*SuggestedReply_TextReply); ok {
		return x.TextReply
	}
	return nil
}

func (x *SuggestedReply) GetPaymentReply() *PaymentSuggestedReply {
	if x, ok := x.GetType().(*SuggestedReply_PaymentReply); ok {
		return x.PaymentReply
	}
	return nil
}

func (x *SuggestedReply) GetFriendPickerReply() *FriendPickerSuggestedReply {
	if x, ok := x.GetType().(*SuggestedReply_FriendPickerReply); ok {
		return x.FriendPickerReply
	}
	return nil
}

func (x *SuggestedReply) GetPictureReply() *PictureSuggestedReply {
	if x, ok := x.GetType().(*SuggestedReply_PictureReply); ok {
		return x.PictureReply
	}
	return nil
}

type isSuggestedReply_Type interface {
	isSuggestedReply_Type()
}

type SuggestedReply_TextReply struct {
	TextReply *TextSuggestedReply `protobuf:"bytes,32,opt,name=text_reply,json=textReply,proto3,oneof"`
}

type SuggestedReply_PaymentReply struct {
	PaymentReply *PaymentSuggestedReply `protobuf:"bytes,33,opt,name=payment_reply,json=paymentReply,proto3,oneof"`
}

type SuggestedReply_FriendPickerReply struct {
	FriendPickerReply *FriendPickerSuggestedReply `protobuf:"bytes,34,opt,name=friend_picker_reply,json=friendPickerReply,proto3,oneof"`
}

type SuggestedReply_PictureReply struct {
	PictureReply *PictureSuggestedReply `protobuf:"bytes,35,opt,name=picture_reply,json=pictureReply,proto3,oneof"`
}

func (*SuggestedReply_TextReply) isSuggestedReply_Type() {}

func (*SuggestedReply_PaymentReply) isSuggestedReply_Type() {}

func (*SuggestedReply_FriendPickerReply) isSuggestedReply_Type() {}

func (*SuggestedReply_PictureReply) isSuggestedReply_Type() {}

// Empty object that exists solely for the purpose of parity with the SuggestedResponseItem
// definition.
//
// Fields may be added in the future, but as of Sept 2016, there is nothing that needs to be
// specifically forwarded on for text suggested replies.
//
// The presence of this field is not required if replying using a text suggested response.
type TextSuggestedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TextSuggestedReply) Reset() {
	*x = TextSuggestedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextSuggestedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextSuggestedReply) ProtoMessage() {}

func (x *TextSuggestedReply) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextSuggestedReply.ProtoReflect.Descriptor instead.
func (*TextSuggestedReply) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{10}
}

// The reply process of Payments uses a mechanism that exists off the standard message path.
//
// This message type is provided for the event that this process is consolidated into the standard
// message path.
// Fields may be added in the future, but as of Sept 2016, there is nothing that needs to be
// specifically forwarded on for payment suggested replies.
//
// The presence of this field is not required if replying using a payment suggested response.
type PaymentSuggestedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PaymentSuggestedReply) Reset() {
	*x = PaymentSuggestedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentSuggestedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentSuggestedReply) ProtoMessage() {}

func (x *PaymentSuggestedReply) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentSuggestedReply.ProtoReflect.Descriptor instead.
func (*PaymentSuggestedReply) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{11}
}

// Reply specific for responses created from friend picker suggested responses.
type FriendPickerSuggestedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Picked []*_go.XiBareUserJid `protobuf:"bytes,1,rep,name=picked,proto3" json:"picked,omitempty"`
}

func (x *FriendPickerSuggestedReply) Reset() {
	*x = FriendPickerSuggestedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendPickerSuggestedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendPickerSuggestedReply) ProtoMessage() {}

func (x *FriendPickerSuggestedReply) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendPickerSuggestedReply.ProtoReflect.Descriptor instead.
func (*FriendPickerSuggestedReply) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{12}
}

func (x *FriendPickerSuggestedReply) GetPicked() []*_go.XiBareUserJid {
	if x != nil {
		return x.Picked
	}
	return nil
}

// Reply specific for picture suggested responses.
type PictureSuggestedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The original pic ID as was sent in the picture suggested response that the user actioned
	// upon.
	PicId *_go.XiUuid `protobuf:"bytes,5,opt,name=pic_id,json=picId,proto3" json:"pic_id,omitempty"`
}

func (x *PictureSuggestedReply) Reset() {
	*x = PictureSuggestedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PictureSuggestedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureSuggestedReply) ProtoMessage() {}

func (x *PictureSuggestedReply) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureSuggestedReply.ProtoReflect.Descriptor instead.
func (*PictureSuggestedReply) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{13}
}

func (x *PictureSuggestedReply) GetPicId() *_go.XiUuid {
	if x != nil {
		return x.PicId
	}
	return nil
}

// Container for a saved payment method.
type PaymentSuggestedResponse_SavedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The last 4 digits of a user's saved card, must be 4 digits.
	Last_4Digits string `protobuf:"bytes,1,opt,name=last_4_digits,json=last4Digits,proto3" json:"last_4_digits,omitempty"`
	// The brand of the user's saved card.
	// In order to validate credit card numbers, the client needs the brand as well in addition to the last 4 digits.
	// See http://www.freeformatter.com/credit-card-number-generator-validator.html for more information.
	// See for https://stripe.com/docs/api#card_object-brand Stripe's supported brands
	Brand string `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *PaymentSuggestedResponse_SavedCard) Reset() {
	*x = PaymentSuggestedResponse_SavedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_keyboards_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentSuggestedResponse_SavedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentSuggestedResponse_SavedCard) ProtoMessage() {}

func (x *PaymentSuggestedResponse_SavedCard) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_keyboards_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentSuggestedResponse_SavedCard.ProtoReflect.Descriptor instead.
func (*PaymentSuggestedResponse_SavedCard) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_keyboards_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PaymentSuggestedResponse_SavedCard) GetLast_4Digits() string {
	if x != nil {
		return x.Last_4Digits
	}
	return ""
}

func (x *PaymentSuggestedResponse_SavedCard) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

var File_messagepath_v1_keyboards_proto protoreflect.FileDescriptor

var file_messagepath_v1_keyboards_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a,
	0x12, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x0a, 0xca, 0x9d, 0x25, 0x06, 0x08, 0x01, 0x80,
	0x01, 0xe8, 0x07, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x22, 0x88,
	0x02, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x08,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x18, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x05,
	0x74, 0x6f, 0x5f, 0x76, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x52,
	0x04, 0x74, 0x6f, 0x56, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x72, 0x0a,
	0x1b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x74, 0x0a, 0x19, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x78,
	0x01, 0x80, 0x01, 0x64, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0xc7, 0x03, 0x0a, 0x15, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0x9d, 0x25,
	0x07, 0x08, 0x00, 0x28, 0x01, 0x30, 0xe8, 0x07, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x53, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x16, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x54, 0x65, 0x78,
	0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x28, 0x01, 0x30, 0xe8, 0x07, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0x96, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0xe8, 0x07,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xca,
	0x9d, 0x25, 0x09, 0x39, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x9d, 0x25, 0x06, 0x08, 0x01, 0x28, 0x03,
	0x30, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69,
	0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0a, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x00, 0x52, 0x09, 0x73, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x5d, 0x0a,
	0x09, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x34, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xca, 0x9d, 0x25, 0x06, 0x08, 0x01, 0x28, 0x04, 0x30, 0x04, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x34, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0x9d, 0x25, 0x06, 0x08,
	0x01, 0x28, 0x01, 0x30, 0x20, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x22, 0xd9, 0x01, 0x0a,
	0x1d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d,
	0x25, 0x05, 0x08, 0x00, 0x30, 0xe8, 0x07, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xca, 0x9d, 0x25, 0x12,
	0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xca, 0x9d, 0x25, 0x12, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x41, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x0c, 0xca,
	0x9d, 0x25, 0x08, 0x08, 0x00, 0x78, 0x00, 0x80, 0x01, 0xe8, 0x07, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x18, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0x9d,
	0x25, 0x07, 0x08, 0x01, 0x28, 0x01, 0x30, 0xe8, 0x07, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01,
	0x28, 0x01, 0x30, 0xe8, 0x07, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a,
	0x06, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x05, 0x70, 0x69, 0x63, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x17,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x9c, 0x03, 0x0a, 0x0e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x00, 0x28, 0x01,
	0x30, 0xe8, 0x07, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x63,
	0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x11, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x59, 0x0a, 0x1a, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a,
	0x06, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4a, 0x69, 0x64, 0x42, 0x0c, 0xca, 0x9d, 0x25, 0x08, 0x08, 0x01, 0x78, 0x01, 0x80, 0x01,
	0xe8, 0x07, 0x52, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x15, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x55,
	0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x05, 0x70, 0x69, 0x63,
	0x49, 0x64, 0x42, 0x75, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a,
	0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b,
	0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61,
	0x74, 0x68, 0xa2, 0x02, 0x04, 0x4d, 0x50, 0x54, 0x48, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_messagepath_v1_keyboards_proto_rawDescOnce sync.Once
	file_messagepath_v1_keyboards_proto_rawDescData = file_messagepath_v1_keyboards_proto_rawDesc
)

func file_messagepath_v1_keyboards_proto_rawDescGZIP() []byte {
	file_messagepath_v1_keyboards_proto_rawDescOnce.Do(func() {
		file_messagepath_v1_keyboards_proto_rawDescData = protoimpl.X.CompressGZIP(file_messagepath_v1_keyboards_proto_rawDescData)
	})
	return file_messagepath_v1_keyboards_proto_rawDescData
}

var file_messagepath_v1_keyboards_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_messagepath_v1_keyboards_proto_goTypes = []interface{}{
	(*KeyboardAttachment)(nil),                 // 0: common.messagepath.v1.KeyboardAttachment
	(*Keyboard)(nil),                           // 1: common.messagepath.v1.Keyboard
	(*SuggestedResponseKeyboard)(nil),          // 2: common.messagepath.v1.SuggestedResponseKeyboard
	(*SuggestedResponseItem)(nil),              // 3: common.messagepath.v1.SuggestedResponseItem
	(*TextSuggestedResponse)(nil),              // 4: common.messagepath.v1.TextSuggestedResponse
	(*PaymentSuggestedResponse)(nil),           // 5: common.messagepath.v1.PaymentSuggestedResponse
	(*FriendPickerSuggestedResponse)(nil),      // 6: common.messagepath.v1.FriendPickerSuggestedResponse
	(*PictureSuggestedResponse)(nil),           // 7: common.messagepath.v1.PictureSuggestedResponse
	(*KeyboardReplyAttachment)(nil),            // 8: common.messagepath.v1.KeyboardReplyAttachment
	(*SuggestedReply)(nil),                     // 9: common.messagepath.v1.SuggestedReply
	(*TextSuggestedReply)(nil),                 // 10: common.messagepath.v1.TextSuggestedReply
	(*PaymentSuggestedReply)(nil),              // 11: common.messagepath.v1.PaymentSuggestedReply
	(*FriendPickerSuggestedReply)(nil),         // 12: common.messagepath.v1.FriendPickerSuggestedReply
	(*PictureSuggestedReply)(nil),              // 13: common.messagepath.v1.PictureSuggestedReply
	(*PaymentSuggestedResponse_SavedCard)(nil), // 14: common.messagepath.v1.PaymentSuggestedResponse.SavedCard
	(*_go.XiBareUserJid)(nil),                  // 15: common.XiBareUserJid
	(*v1.XiBareUserJidOrAliasJid)(nil),         // 16: common.v1.XiBareUserJidOrAliasJid
	(*_go.XiUuid)(nil),                         // 17: common.XiUuid
}
var file_messagepath_v1_keyboards_proto_depIdxs = []int32{
	1,  // 0: common.messagepath.v1.KeyboardAttachment.keyboards:type_name -> common.messagepath.v1.Keyboard
	15, // 1: common.messagepath.v1.Keyboard.to:type_name -> common.XiBareUserJid
	16, // 2: common.messagepath.v1.Keyboard.to_v2:type_name -> common.v1.XiBareUserJidOrAliasJid
	2,  // 3: common.messagepath.v1.Keyboard.suggested_response_keyboard:type_name -> common.messagepath.v1.SuggestedResponseKeyboard
	3,  // 4: common.messagepath.v1.SuggestedResponseKeyboard.responses:type_name -> common.messagepath.v1.SuggestedResponseItem
	4,  // 5: common.messagepath.v1.SuggestedResponseItem.text_response:type_name -> common.messagepath.v1.TextSuggestedResponse
	5,  // 6: common.messagepath.v1.SuggestedResponseItem.payment_response:type_name -> common.messagepath.v1.PaymentSuggestedResponse
	6,  // 7: common.messagepath.v1.SuggestedResponseItem.friend_picker_response:type_name -> common.messagepath.v1.FriendPickerSuggestedResponse
	7,  // 8: common.messagepath.v1.SuggestedResponseItem.picture_response:type_name -> common.messagepath.v1.PictureSuggestedResponse
	17, // 9: common.messagepath.v1.PaymentSuggestedResponse.transaction_id:type_name -> common.XiUuid
	14, // 10: common.messagepath.v1.PaymentSuggestedResponse.saved_card:type_name -> common.messagepath.v1.PaymentSuggestedResponse.SavedCard
	15, // 11: common.messagepath.v1.FriendPickerSuggestedResponse.preselected:type_name -> common.XiBareUserJid
	17, // 12: common.messagepath.v1.PictureSuggestedResponse.pic_id:type_name -> common.XiUuid
	9,  // 13: common.messagepath.v1.KeyboardReplyAttachment.suggested_reply:type_name -> common.messagepath.v1.SuggestedReply
	10, // 14: common.messagepath.v1.SuggestedReply.text_reply:type_name -> common.messagepath.v1.TextSuggestedReply
	11, // 15: common.messagepath.v1.SuggestedReply.payment_reply:type_name -> common.messagepath.v1.PaymentSuggestedReply
	12, // 16: common.messagepath.v1.SuggestedReply.friend_picker_reply:type_name -> common.messagepath.v1.FriendPickerSuggestedReply
	13, // 17: common.messagepath.v1.SuggestedReply.picture_reply:type_name -> common.messagepath.v1.PictureSuggestedReply
	15, // 18: common.messagepath.v1.FriendPickerSuggestedReply.picked:type_name -> common.XiBareUserJid
	17, // 19: common.messagepath.v1.PictureSuggestedReply.pic_id:type_name -> common.XiUuid
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_messagepath_v1_keyboards_proto_init() }
func file_messagepath_v1_keyboards_proto_init() {
	if File_messagepath_v1_keyboards_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messagepath_v1_keyboards_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyboardAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedResponseKeyboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextSuggestedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentSuggestedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendPickerSuggestedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureSuggestedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyboardReplyAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextSuggestedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentSuggestedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendPickerSuggestedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PictureSuggestedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_keyboards_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentSuggestedResponse_SavedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messagepath_v1_keyboards_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Keyboard_SuggestedResponseKeyboard)(nil),
	}
	file_messagepath_v1_keyboards_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SuggestedResponseItem_TextResponse)(nil),
		(*SuggestedResponseItem_PaymentResponse)(nil),
		(*SuggestedResponseItem_FriendPickerResponse)(nil),
		(*SuggestedResponseItem_PictureResponse)(nil),
	}
	file_messagepath_v1_keyboards_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*KeyboardReplyAttachment_SuggestedReply)(nil),
	}
	file_messagepath_v1_keyboards_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SuggestedReply_TextReply)(nil),
		(*SuggestedReply_PaymentReply)(nil),
		(*SuggestedReply_FriendPickerReply)(nil),
		(*SuggestedReply_PictureReply)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messagepath_v1_keyboards_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messagepath_v1_keyboards_proto_goTypes,
		DependencyIndexes: file_messagepath_v1_keyboards_proto_depIdxs,
		MessageInfos:      file_messagepath_v1_keyboards_proto_msgTypes,
	}.Build()
	File_messagepath_v1_keyboards_proto = out.File
	file_messagepath_v1_keyboards_proto_rawDesc = nil
	file_messagepath_v1_keyboards_proto_goTypes = nil
	file_messagepath_v1_keyboards_proto_depIdxs = nil
}
