// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: messagepath/v1/visibility_rules.proto

package messagepath

import (
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v1"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VisibilityRulesAttachment_Rule int32

const (
	// Use this rule if the current value is UNKNOWN (for forwards compatibility).
	// Similar to the default client behaviour, use the sender for determining push and convo location.
	// Respect the blocked status of the sender AND initiator: if either is blocked, DO NOT send push.
	// Initial usecase for this is viral invites  for bots (https://docs.google.com/document/d/1v4JtP1fdah5cvgXW2apScf_bemMkrvh_J370X5jJD48).
	// Note that for the viral invites case, the sender should always be a bot.
	VisibilityRulesAttachment_USE_SENDER_FOR_VISIBILITY VisibilityRulesAttachment_Rule = 0
	// Convo location (new pople/main list) and push behavior should be based on the initiator (if present).
	// Respect the blocked status of the sender AND initiator: if either is blocked, DO NOT send push.
	// The initiator field SHOULD be set but if the initiator field is not set, use the sender for all visibility rules.
	// Initial usecase for this is mention replies from bots to users (https://kikinteractive.atlassian.net/browse/SERVER-257)
	VisibilityRulesAttachment_USE_INITIATOR_FOR_VISIBILITY VisibilityRulesAttachment_Rule = 1
)

// Enum value maps for VisibilityRulesAttachment_Rule.
var (
	VisibilityRulesAttachment_Rule_name = map[int32]string{
		0: "USE_SENDER_FOR_VISIBILITY",
		1: "USE_INITIATOR_FOR_VISIBILITY",
	}
	VisibilityRulesAttachment_Rule_value = map[string]int32{
		"USE_SENDER_FOR_VISIBILITY":    0,
		"USE_INITIATOR_FOR_VISIBILITY": 1,
	}
)

func (x VisibilityRulesAttachment_Rule) Enum() *VisibilityRulesAttachment_Rule {
	p := new(VisibilityRulesAttachment_Rule)
	*p = x
	return p
}

func (x VisibilityRulesAttachment_Rule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisibilityRulesAttachment_Rule) Descriptor() protoreflect.EnumDescriptor {
	return file_messagepath_v1_visibility_rules_proto_enumTypes[0].Descriptor()
}

func (VisibilityRulesAttachment_Rule) Type() protoreflect.EnumType {
	return &file_messagepath_v1_visibility_rules_proto_enumTypes[0]
}

func (x VisibilityRulesAttachment_Rule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisibilityRulesAttachment_Rule.Descriptor instead.
func (VisibilityRulesAttachment_Rule) EnumDescriptor() ([]byte, []int) {
	return file_messagepath_v1_visibility_rules_proto_rawDescGZIP(), []int{0, 0}
}

// 'Visibility' relates to:
//   - Where the convo appears (new people/main chat)
//   - How push is sent
//   - What content is blurred
//   - What profile pics are blurred
//   - If bottom bar shows up
//
// This attachment represents a minimal set of overrides to the default rules the client applies.
type VisibilityRulesAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The initiator is distinctly different from the sender of the message.
	// It SHOULD NOT be set to the same value as the sender.
	// The initiator can be a user or a bot.
	// This field is OPTIONAL.
	// TODO: To be removed after switching all consumers to initiator_v2
	//
	// Deprecated: Marked as deprecated in messagepath/v1/visibility_rules.proto.
	Initiator *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// Version 2 will replace non-versioned.
	// The initiator can be userJid or an aliased jid
	InitiatorV2 *v1.XiBareUserJidOrAliasJid `protobuf:"bytes,4,opt,name=initiator_v2,json=initiatorV2,proto3" json:"initiator_v2,omitempty"`
	// 'Friend' is defined as:   (in roster AND not blocked) OR yourself
	// Push should NEVER be sent if the initiator is not a friend.
	// The server WILL NOT filter these messages, it is up to the receiving client to drop, but still ack (if necessary), the message.
	// If the initiator is a friend, continue processing the other rules defined in this attachment.
	// The initiator field SHOULD be set, if this field is true. If initiator is not set, this option is ignored.
	// Initial usecase for this is viral invites for bots (https://docs.google.com/document/d/1v4JtP1fdah5cvgXW2apScf_bemMkrvh_J370X5jJD48).
	// Message should be dropped by the client, not simply hidden (although acked through QoS as necessary).
	DropIfInitiatorNotFriend bool `protobuf:"varint,2,opt,name=drop_if_initiator_not_friend,json=dropIfInitiatorNotFriend,proto3" json:"drop_if_initiator_not_friend,omitempty"`
	// If UKNOWN, use the default rule: USE_SENDER_FOR_VISIBILITY (ie: for forwards compatibility).
	Rule VisibilityRulesAttachment_Rule `protobuf:"varint,3,opt,name=rule,proto3,enum=common.messagepath.v1.VisibilityRulesAttachment_Rule" json:"rule,omitempty"`
}

func (x *VisibilityRulesAttachment) Reset() {
	*x = VisibilityRulesAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_visibility_rules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisibilityRulesAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisibilityRulesAttachment) ProtoMessage() {}

func (x *VisibilityRulesAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_visibility_rules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisibilityRulesAttachment.ProtoReflect.Descriptor instead.
func (*VisibilityRulesAttachment) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_visibility_rules_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in messagepath/v1/visibility_rules.proto.
func (x *VisibilityRulesAttachment) GetInitiator() *_go.XiBareUserJid {
	if x != nil {
		return x.Initiator
	}
	return nil
}

func (x *VisibilityRulesAttachment) GetInitiatorV2() *v1.XiBareUserJidOrAliasJid {
	if x != nil {
		return x.InitiatorV2
	}
	return nil
}

func (x *VisibilityRulesAttachment) GetDropIfInitiatorNotFriend() bool {
	if x != nil {
		return x.DropIfInitiatorNotFriend
	}
	return false
}

func (x *VisibilityRulesAttachment) GetRule() VisibilityRulesAttachment_Rule {
	if x != nil {
		return x.Rule
	}
	return VisibilityRulesAttachment_USE_SENDER_FOR_VISIBILITY
}

var File_messagepath_v1_visibility_rules_proto protoreflect.FileDescriptor

var file_messagepath_v1_visibility_rules_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x02, 0x0a, 0x19, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58,
	0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x08, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x00, 0x18, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69,
	0x64, 0x4f, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x12, 0x3e, 0x0a, 0x1c, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x64, 0x72, 0x6f, 0x70, 0x49, 0x66, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x6f, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x53, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x56, 0x49,
	0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53,
	0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x01, 0x42, 0x75, 0x0a, 0x19,
	0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f,
	0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67,
	0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0xa2, 0x02, 0x04, 0x4d,
	0x50, 0x54, 0x48, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messagepath_v1_visibility_rules_proto_rawDescOnce sync.Once
	file_messagepath_v1_visibility_rules_proto_rawDescData = file_messagepath_v1_visibility_rules_proto_rawDesc
)

func file_messagepath_v1_visibility_rules_proto_rawDescGZIP() []byte {
	file_messagepath_v1_visibility_rules_proto_rawDescOnce.Do(func() {
		file_messagepath_v1_visibility_rules_proto_rawDescData = protoimpl.X.CompressGZIP(file_messagepath_v1_visibility_rules_proto_rawDescData)
	})
	return file_messagepath_v1_visibility_rules_proto_rawDescData
}

var file_messagepath_v1_visibility_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messagepath_v1_visibility_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_messagepath_v1_visibility_rules_proto_goTypes = []interface{}{
	(VisibilityRulesAttachment_Rule)(0), // 0: common.messagepath.v1.VisibilityRulesAttachment.Rule
	(*VisibilityRulesAttachment)(nil),   // 1: common.messagepath.v1.VisibilityRulesAttachment
	(*_go.XiBareUserJid)(nil),           // 2: common.XiBareUserJid
	(*v1.XiBareUserJidOrAliasJid)(nil),  // 3: common.v1.XiBareUserJidOrAliasJid
}
var file_messagepath_v1_visibility_rules_proto_depIdxs = []int32{
	2, // 0: common.messagepath.v1.VisibilityRulesAttachment.initiator:type_name -> common.XiBareUserJid
	3, // 1: common.messagepath.v1.VisibilityRulesAttachment.initiator_v2:type_name -> common.v1.XiBareUserJidOrAliasJid
	0, // 2: common.messagepath.v1.VisibilityRulesAttachment.rule:type_name -> common.messagepath.v1.VisibilityRulesAttachment.Rule
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_messagepath_v1_visibility_rules_proto_init() }
func file_messagepath_v1_visibility_rules_proto_init() {
	if File_messagepath_v1_visibility_rules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messagepath_v1_visibility_rules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisibilityRulesAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messagepath_v1_visibility_rules_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messagepath_v1_visibility_rules_proto_goTypes,
		DependencyIndexes: file_messagepath_v1_visibility_rules_proto_depIdxs,
		EnumInfos:         file_messagepath_v1_visibility_rules_proto_enumTypes,
		MessageInfos:      file_messagepath_v1_visibility_rules_proto_msgTypes,
	}.Build()
	File_messagepath_v1_visibility_rules_proto = out.File
	file_messagepath_v1_visibility_rules_proto_rawDesc = nil
	file_messagepath_v1_visibility_rules_proto_goTypes = nil
	file_messagepath_v1_visibility_rules_proto_depIdxs = nil
}
