// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: asset/v2/chat_asset_common.proto

package asset

import (
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/blob/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AndroidPixelDensity int32

const (
	AndroidPixelDensity_NODPI   AndroidPixelDensity = 0
	AndroidPixelDensity_LDPI    AndroidPixelDensity = 1
	AndroidPixelDensity_MDPI    AndroidPixelDensity = 2
	AndroidPixelDensity_HDPI    AndroidPixelDensity = 3
	AndroidPixelDensity_XHDPI   AndroidPixelDensity = 4
	AndroidPixelDensity_XXHDPI  AndroidPixelDensity = 5
	AndroidPixelDensity_XXXHDPI AndroidPixelDensity = 6
)

// Enum value maps for AndroidPixelDensity.
var (
	AndroidPixelDensity_name = map[int32]string{
		0: "NODPI",
		1: "LDPI",
		2: "MDPI",
		3: "HDPI",
		4: "XHDPI",
		5: "XXHDPI",
		6: "XXXHDPI",
	}
	AndroidPixelDensity_value = map[string]int32{
		"NODPI":   0,
		"LDPI":    1,
		"MDPI":    2,
		"HDPI":    3,
		"XHDPI":   4,
		"XXHDPI":  5,
		"XXXHDPI": 6,
	}
)

func (x AndroidPixelDensity) Enum() *AndroidPixelDensity {
	p := new(AndroidPixelDensity)
	*p = x
	return p
}

func (x AndroidPixelDensity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AndroidPixelDensity) Descriptor() protoreflect.EnumDescriptor {
	return file_asset_v2_chat_asset_common_proto_enumTypes[0].Descriptor()
}

func (AndroidPixelDensity) Type() protoreflect.EnumType {
	return &file_asset_v2_chat_asset_common_proto_enumTypes[0]
}

func (x AndroidPixelDensity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AndroidPixelDensity.Descriptor instead.
func (AndroidPixelDensity) EnumDescriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{0}
}

type IOSPixelDensity int32

const (
	IOSPixelDensity_NONE IOSPixelDensity = 0
	IOSPixelDensity_X1   IOSPixelDensity = 1
	IOSPixelDensity_X2   IOSPixelDensity = 2
	IOSPixelDensity_X3   IOSPixelDensity = 3
)

// Enum value maps for IOSPixelDensity.
var (
	IOSPixelDensity_name = map[int32]string{
		0: "NONE",
		1: "X1",
		2: "X2",
		3: "X3",
	}
	IOSPixelDensity_value = map[string]int32{
		"NONE": 0,
		"X1":   1,
		"X2":   2,
		"X3":   3,
	}
)

func (x IOSPixelDensity) Enum() *IOSPixelDensity {
	p := new(IOSPixelDensity)
	*p = x
	return p
}

func (x IOSPixelDensity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IOSPixelDensity) Descriptor() protoreflect.EnumDescriptor {
	return file_asset_v2_chat_asset_common_proto_enumTypes[1].Descriptor()
}

func (IOSPixelDensity) Type() protoreflect.EnumType {
	return &file_asset_v2_chat_asset_common_proto_enumTypes[1]
}

func (x IOSPixelDensity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IOSPixelDensity.Descriptor instead.
func (IOSPixelDensity) EnumDescriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{1}
}

// Chat theme defines a set of attribute for a custom look-and-feel chat screen.
type ChatTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId                           *AssetId          `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	BarBackgroundColor                *Color            `protobuf:"bytes,2,opt,name=bar_background_color,json=barBackgroundColor,proto3" json:"bar_background_color,omitempty"`
	BarPrimaryColor                   *Color            `protobuf:"bytes,3,opt,name=bar_primary_color,json=barPrimaryColor,proto3" json:"bar_primary_color,omitempty"`
	BarSecondaryColor                 *Color            `protobuf:"bytes,4,opt,name=bar_secondary_color,json=barSecondaryColor,proto3" json:"bar_secondary_color,omitempty"`
	StatusBarBackgroundColor          *Color            `protobuf:"bytes,5,opt,name=status_bar_background_color,json=statusBarBackgroundColor,proto3" json:"status_bar_background_color,omitempty"`
	ExpressionBarActiveIconColor      *Color            `protobuf:"bytes,6,opt,name=expression_bar_active_icon_color,json=expressionBarActiveIconColor,proto3" json:"expression_bar_active_icon_color,omitempty"`
	BackgroundContentColor            *Color            `protobuf:"bytes,7,opt,name=background_content_color,json=backgroundContentColor,proto3" json:"background_content_color,omitempty"`
	BackgroundContentDropShadow       bool              `protobuf:"varint,8,opt,name=background_content_drop_shadow,json=backgroundContentDropShadow,proto3" json:"background_content_drop_shadow,omitempty"`
	StatusMessageLinkColor            *Color            `protobuf:"bytes,9,opt,name=status_message_link_color,json=statusMessageLinkColor,proto3" json:"status_message_link_color,omitempty"`
	IncomingMessageBubbleColor        *Color            `protobuf:"bytes,10,opt,name=incoming_message_bubble_color,json=incomingMessageBubbleColor,proto3" json:"incoming_message_bubble_color,omitempty"`
	OutgoingMessageBubbleColor        *Color            `protobuf:"bytes,11,opt,name=outgoing_message_bubble_color,json=outgoingMessageBubbleColor,proto3" json:"outgoing_message_bubble_color,omitempty"`
	IncomingMessageBubbleOutlineColor *Color            `protobuf:"bytes,12,opt,name=incoming_message_bubble_outline_color,json=incomingMessageBubbleOutlineColor,proto3" json:"incoming_message_bubble_outline_color,omitempty"`
	OutgoingMessageBubbleOutlineColor *Color            `protobuf:"bytes,13,opt,name=outgoing_message_bubble_outline_color,json=outgoingMessageBubbleOutlineColor,proto3" json:"outgoing_message_bubble_outline_color,omitempty"`
	IncomingMessageTextColor          *Color            `protobuf:"bytes,14,opt,name=incoming_message_text_color,json=incomingMessageTextColor,proto3" json:"incoming_message_text_color,omitempty"`
	OutgoingMessageTextColor          *Color            `protobuf:"bytes,15,opt,name=outgoing_message_text_color,json=outgoingMessageTextColor,proto3" json:"outgoing_message_text_color,omitempty"`
	IncomingMessageLinkColor          *Color            `protobuf:"bytes,16,opt,name=incoming_message_link_color,json=incomingMessageLinkColor,proto3" json:"incoming_message_link_color,omitempty"`
	BackgroundLandscapeImage          *v2.BlobReference `protobuf:"bytes,17,opt,name=background_landscape_image,json=backgroundLandscapeImage,proto3" json:"background_landscape_image,omitempty"`
	BackgroundPortraitImage           *v2.BlobReference `protobuf:"bytes,18,opt,name=background_portrait_image,json=backgroundPortraitImage,proto3" json:"background_portrait_image,omitempty"`
	PreviewImage                      *v2.BlobReference `protobuf:"bytes,19,opt,name=preview_image,json=previewImage,proto3" json:"preview_image,omitempty"`
	DisplayName                       string            `protobuf:"bytes,20,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreatorName                       string            `protobuf:"bytes,21,opt,name=creator_name,json=creatorName,proto3" json:"creator_name,omitempty"`
}

func (x *ChatTheme) Reset() {
	*x = ChatTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatTheme) ProtoMessage() {}

func (x *ChatTheme) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatTheme.ProtoReflect.Descriptor instead.
func (*ChatTheme) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{0}
}

func (x *ChatTheme) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *ChatTheme) GetBarBackgroundColor() *Color {
	if x != nil {
		return x.BarBackgroundColor
	}
	return nil
}

func (x *ChatTheme) GetBarPrimaryColor() *Color {
	if x != nil {
		return x.BarPrimaryColor
	}
	return nil
}

func (x *ChatTheme) GetBarSecondaryColor() *Color {
	if x != nil {
		return x.BarSecondaryColor
	}
	return nil
}

func (x *ChatTheme) GetStatusBarBackgroundColor() *Color {
	if x != nil {
		return x.StatusBarBackgroundColor
	}
	return nil
}

func (x *ChatTheme) GetExpressionBarActiveIconColor() *Color {
	if x != nil {
		return x.ExpressionBarActiveIconColor
	}
	return nil
}

func (x *ChatTheme) GetBackgroundContentColor() *Color {
	if x != nil {
		return x.BackgroundContentColor
	}
	return nil
}

func (x *ChatTheme) GetBackgroundContentDropShadow() bool {
	if x != nil {
		return x.BackgroundContentDropShadow
	}
	return false
}

func (x *ChatTheme) GetStatusMessageLinkColor() *Color {
	if x != nil {
		return x.StatusMessageLinkColor
	}
	return nil
}

func (x *ChatTheme) GetIncomingMessageBubbleColor() *Color {
	if x != nil {
		return x.IncomingMessageBubbleColor
	}
	return nil
}

func (x *ChatTheme) GetOutgoingMessageBubbleColor() *Color {
	if x != nil {
		return x.OutgoingMessageBubbleColor
	}
	return nil
}

func (x *ChatTheme) GetIncomingMessageBubbleOutlineColor() *Color {
	if x != nil {
		return x.IncomingMessageBubbleOutlineColor
	}
	return nil
}

func (x *ChatTheme) GetOutgoingMessageBubbleOutlineColor() *Color {
	if x != nil {
		return x.OutgoingMessageBubbleOutlineColor
	}
	return nil
}

func (x *ChatTheme) GetIncomingMessageTextColor() *Color {
	if x != nil {
		return x.IncomingMessageTextColor
	}
	return nil
}

func (x *ChatTheme) GetOutgoingMessageTextColor() *Color {
	if x != nil {
		return x.OutgoingMessageTextColor
	}
	return nil
}

func (x *ChatTheme) GetIncomingMessageLinkColor() *Color {
	if x != nil {
		return x.IncomingMessageLinkColor
	}
	return nil
}

func (x *ChatTheme) GetBackgroundLandscapeImage() *v2.BlobReference {
	if x != nil {
		return x.BackgroundLandscapeImage
	}
	return nil
}

func (x *ChatTheme) GetBackgroundPortraitImage() *v2.BlobReference {
	if x != nil {
		return x.BackgroundPortraitImage
	}
	return nil
}

func (x *ChatTheme) GetPreviewImage() *v2.BlobReference {
	if x != nil {
		return x.PreviewImage
	}
	return nil
}

func (x *ChatTheme) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ChatTheme) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

// Avatar defines an avatar that can be used as profile image for users in anonymous chats.
type Avatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId     *AssetId          `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Image       *v2.BlobReference `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	DisplayName string            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	CreatorName string            `protobuf:"bytes,4,opt,name=creator_name,json=creatorName,proto3" json:"creator_name,omitempty"`
}

func (x *Avatar) Reset() {
	*x = Avatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Avatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Avatar) ProtoMessage() {}

func (x *Avatar) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Avatar.ProtoReflect.Descriptor instead.
func (*Avatar) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{1}
}

func (x *Avatar) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *Avatar) GetImage() *v2.BlobReference {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Avatar) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Avatar) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

// Tutorial defines a series of actions/viewable items the user can view in order.
type Tutorial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetId *AssetId `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// List of pages of the tutorial. The order of pages on the list determines the flow of the tutorial, mobile client
	// is expected to transition through tutorial pages in the same order.
	Pages []*TutorialPage `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Tutorial) Reset() {
	*x = Tutorial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tutorial) ProtoMessage() {}

func (x *Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tutorial.ProtoReflect.Descriptor instead.
func (*Tutorial) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{2}
}

func (x *Tutorial) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *Tutorial) GetPages() []*TutorialPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

// TutorialPage define content for a single page/screen in the tutorial
type TutorialPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page caption (descriptive text showing at the bottom).
	Caption string `protobuf:"bytes,1,opt,name=caption,proto3" json:"caption,omitempty"`
	// Url to page content (Image, video, doc...etc.)/
	// Not every page in a tutorial will necessarily have content.
	MediaContent *v2.BlobReference `protobuf:"bytes,2,opt,name=media_content,json=mediaContent,proto3" json:"media_content,omitempty"`
}

func (x *TutorialPage) Reset() {
	*x = TutorialPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TutorialPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TutorialPage) ProtoMessage() {}

func (x *TutorialPage) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TutorialPage.ProtoReflect.Descriptor instead.
func (*TutorialPage) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{3}
}

func (x *TutorialPage) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *TutorialPage) GetMediaContent() *v2.BlobReference {
	if x != nil {
		return x.MediaContent
	}
	return nil
}

type AssetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue []byte `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *AssetId) Reset() {
	*x = AssetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetId) ProtoMessage() {}

func (x *AssetId) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetId.ProtoReflect.Descriptor instead.
func (*AssetId) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{4}
}

func (x *AssetId) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

type CollectionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue []byte `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *CollectionId) Reset() {
	*x = CollectionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionId) ProtoMessage() {}

func (x *CollectionId) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionId.ProtoReflect.Descriptor instead.
func (*CollectionId) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{5}
}

func (x *CollectionId) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

// Color in ARGB 8-digit hex format
type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HexValue string `protobuf:"bytes,1,opt,name=hex_value,json=hexValue,proto3" json:"hex_value,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{6}
}

func (x *Color) GetHexValue() string {
	if x != nil {
		return x.HexValue
	}
	return ""
}

type PixelDensity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*PixelDensity_AndroidPixelDensity
	//	*PixelDensity_IosPixelDensity
	Kind isPixelDensity_Kind `protobuf_oneof:"kind"`
}

func (x *PixelDensity) Reset() {
	*x = PixelDensity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_asset_v2_chat_asset_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PixelDensity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PixelDensity) ProtoMessage() {}

func (x *PixelDensity) ProtoReflect() protoreflect.Message {
	mi := &file_asset_v2_chat_asset_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PixelDensity.ProtoReflect.Descriptor instead.
func (*PixelDensity) Descriptor() ([]byte, []int) {
	return file_asset_v2_chat_asset_common_proto_rawDescGZIP(), []int{7}
}

func (m *PixelDensity) GetKind() isPixelDensity_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *PixelDensity) GetAndroidPixelDensity() AndroidPixelDensity {
	if x, ok := x.GetKind().(*PixelDensity_AndroidPixelDensity); ok {
		return x.AndroidPixelDensity
	}
	return AndroidPixelDensity_NODPI
}

func (x *PixelDensity) GetIosPixelDensity() IOSPixelDensity {
	if x, ok := x.GetKind().(*PixelDensity_IosPixelDensity); ok {
		return x.IosPixelDensity
	}
	return IOSPixelDensity_NONE
}

type isPixelDensity_Kind interface {
	isPixelDensity_Kind()
}

type PixelDensity_AndroidPixelDensity struct {
	AndroidPixelDensity AndroidPixelDensity `protobuf:"varint,1,opt,name=android_pixel_density,json=androidPixelDensity,proto3,enum=common.asset.v2.AndroidPixelDensity,oneof"`
}

type PixelDensity_IosPixelDensity struct {
	IosPixelDensity IOSPixelDensity `protobuf:"varint,2,opt,name=ios_pixel_density,json=iosPixelDensity,proto3,enum=common.asset.v2.IOSPixelDensity,oneof"`
}

func (*PixelDensity_AndroidPixelDensity) isPixelDensity_Kind() {}

func (*PixelDensity_IosPixelDensity) isPixelDensity_Kind() {}

var File_asset_v2_chat_asset_common_proto protoreflect.FileDescriptor

var file_asset_v2_chat_asset_common_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x0d, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48,
	0x0a, 0x14, 0x62, 0x61, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x12, 0x62, 0x61, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x11, 0x62, 0x61, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x61, 0x72,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x13,
	0x62, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x11, 0x62, 0x61, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x62,
	0x61, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x61, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5e, 0x0a, 0x20, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x1c, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x18, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x43, 0x0a,
	0x1e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x12, 0x51, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x16, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x1d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x1a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x59, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x1a, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x25, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x21, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x25, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x21, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x62,
	0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x55, 0x0a, 0x1b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x18, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x18, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x55, 0x0a,
	0x1b, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x18, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x59, 0x0a, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c,
	0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x2a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x20, 0x80, 0x01, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x20, 0x80, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x06, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x20, 0x80, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xca, 0x9d, 0x25, 0x03, 0x20, 0x80, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x3e, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x42, 0x09, 0xca,
	0x9d, 0x25, 0x05, 0x78, 0x01, 0x80, 0x01, 0x32, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x75, 0x0a, 0x0c, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x20, 0x80, 0x01, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x02, 0x52,
	0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x0c, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x61, 0x77,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xca, 0x9d,
	0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x02, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xca,
	0x9d, 0x25, 0x12, 0x08, 0x01, 0x12, 0x0e, 0x5e, 0x23, 0x5b, 0x41, 0x2d, 0x46, 0x30, 0x2d, 0x39,
	0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x08, 0x68, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc2, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x12, 0x5a, 0x0a, 0x15, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x69, 0x78, 0x65,
	0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x44, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x50, 0x69, 0x78, 0x65, 0x6c, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x11,
	0x69, 0x6f, 0x73, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x4f, 0x53, 0x50, 0x69, 0x78,
	0x65, 0x6c, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6f, 0x73,
	0x50, 0x69, 0x78, 0x65, 0x6c, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x42, 0x06, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x2a, 0x62, 0x0a, 0x13, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x4e,
	0x4f, 0x44, 0x50, 0x49, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x44, 0x50, 0x49, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x44, 0x50, 0x49, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x44,
	0x50, 0x49, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48, 0x44, 0x50, 0x49, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x58, 0x58, 0x48, 0x44, 0x50, 0x49, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x58,
	0x58, 0x58, 0x48, 0x44, 0x50, 0x49, 0x10, 0x06, 0x2a, 0x33, 0x0a, 0x0f, 0x49, 0x4f, 0x53, 0x50,
	0x69, 0x78, 0x65, 0x6c, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x58, 0x31, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x58, 0x32, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x58, 0x33, 0x10, 0x03, 0x42, 0x5f, 0x0a,
	0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69,
	0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x2f, 0x76, 0x32, 0x3b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_asset_v2_chat_asset_common_proto_rawDescOnce sync.Once
	file_asset_v2_chat_asset_common_proto_rawDescData = file_asset_v2_chat_asset_common_proto_rawDesc
)

func file_asset_v2_chat_asset_common_proto_rawDescGZIP() []byte {
	file_asset_v2_chat_asset_common_proto_rawDescOnce.Do(func() {
		file_asset_v2_chat_asset_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_asset_v2_chat_asset_common_proto_rawDescData)
	})
	return file_asset_v2_chat_asset_common_proto_rawDescData
}

var file_asset_v2_chat_asset_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_asset_v2_chat_asset_common_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_asset_v2_chat_asset_common_proto_goTypes = []interface{}{
	(AndroidPixelDensity)(0), // 0: common.asset.v2.AndroidPixelDensity
	(IOSPixelDensity)(0),     // 1: common.asset.v2.IOSPixelDensity
	(*ChatTheme)(nil),        // 2: common.asset.v2.ChatTheme
	(*Avatar)(nil),           // 3: common.asset.v2.Avatar
	(*Tutorial)(nil),         // 4: common.asset.v2.Tutorial
	(*TutorialPage)(nil),     // 5: common.asset.v2.TutorialPage
	(*AssetId)(nil),          // 6: common.asset.v2.AssetId
	(*CollectionId)(nil),     // 7: common.asset.v2.CollectionId
	(*Color)(nil),            // 8: common.asset.v2.Color
	(*PixelDensity)(nil),     // 9: common.asset.v2.PixelDensity
	(*v2.BlobReference)(nil), // 10: common.blob.v2.BlobReference
}
var file_asset_v2_chat_asset_common_proto_depIdxs = []int32{
	6,  // 0: common.asset.v2.ChatTheme.asset_id:type_name -> common.asset.v2.AssetId
	8,  // 1: common.asset.v2.ChatTheme.bar_background_color:type_name -> common.asset.v2.Color
	8,  // 2: common.asset.v2.ChatTheme.bar_primary_color:type_name -> common.asset.v2.Color
	8,  // 3: common.asset.v2.ChatTheme.bar_secondary_color:type_name -> common.asset.v2.Color
	8,  // 4: common.asset.v2.ChatTheme.status_bar_background_color:type_name -> common.asset.v2.Color
	8,  // 5: common.asset.v2.ChatTheme.expression_bar_active_icon_color:type_name -> common.asset.v2.Color
	8,  // 6: common.asset.v2.ChatTheme.background_content_color:type_name -> common.asset.v2.Color
	8,  // 7: common.asset.v2.ChatTheme.status_message_link_color:type_name -> common.asset.v2.Color
	8,  // 8: common.asset.v2.ChatTheme.incoming_message_bubble_color:type_name -> common.asset.v2.Color
	8,  // 9: common.asset.v2.ChatTheme.outgoing_message_bubble_color:type_name -> common.asset.v2.Color
	8,  // 10: common.asset.v2.ChatTheme.incoming_message_bubble_outline_color:type_name -> common.asset.v2.Color
	8,  // 11: common.asset.v2.ChatTheme.outgoing_message_bubble_outline_color:type_name -> common.asset.v2.Color
	8,  // 12: common.asset.v2.ChatTheme.incoming_message_text_color:type_name -> common.asset.v2.Color
	8,  // 13: common.asset.v2.ChatTheme.outgoing_message_text_color:type_name -> common.asset.v2.Color
	8,  // 14: common.asset.v2.ChatTheme.incoming_message_link_color:type_name -> common.asset.v2.Color
	10, // 15: common.asset.v2.ChatTheme.background_landscape_image:type_name -> common.blob.v2.BlobReference
	10, // 16: common.asset.v2.ChatTheme.background_portrait_image:type_name -> common.blob.v2.BlobReference
	10, // 17: common.asset.v2.ChatTheme.preview_image:type_name -> common.blob.v2.BlobReference
	6,  // 18: common.asset.v2.Avatar.asset_id:type_name -> common.asset.v2.AssetId
	10, // 19: common.asset.v2.Avatar.image:type_name -> common.blob.v2.BlobReference
	6,  // 20: common.asset.v2.Tutorial.asset_id:type_name -> common.asset.v2.AssetId
	5,  // 21: common.asset.v2.Tutorial.pages:type_name -> common.asset.v2.TutorialPage
	10, // 22: common.asset.v2.TutorialPage.media_content:type_name -> common.blob.v2.BlobReference
	0,  // 23: common.asset.v2.PixelDensity.android_pixel_density:type_name -> common.asset.v2.AndroidPixelDensity
	1,  // 24: common.asset.v2.PixelDensity.ios_pixel_density:type_name -> common.asset.v2.IOSPixelDensity
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_asset_v2_chat_asset_common_proto_init() }
func file_asset_v2_chat_asset_common_proto_init() {
	if File_asset_v2_chat_asset_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_asset_v2_chat_asset_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asset_v2_chat_asset_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Avatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asset_v2_chat_asset_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tutorial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asset_v2_chat_asset_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TutorialPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asset_v2_chat_asset_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asset_v2_chat_asset_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asset_v2_chat_asset_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_asset_v2_chat_asset_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PixelDensity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_asset_v2_chat_asset_common_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*PixelDensity_AndroidPixelDensity)(nil),
		(*PixelDensity_IosPixelDensity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_asset_v2_chat_asset_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_asset_v2_chat_asset_common_proto_goTypes,
		DependencyIndexes: file_asset_v2_chat_asset_common_proto_depIdxs,
		EnumInfos:         file_asset_v2_chat_asset_common_proto_enumTypes,
		MessageInfos:      file_asset_v2_chat_asset_common_proto_msgTypes,
	}.Build()
	File_asset_v2_chat_asset_common_proto = out.File
	file_asset_v2_chat_asset_common_proto_rawDesc = nil
	file_asset_v2_chat_asset_common_proto_goTypes = nil
	file_asset_v2_chat_asset_common_proto_depIdxs = nil
}
