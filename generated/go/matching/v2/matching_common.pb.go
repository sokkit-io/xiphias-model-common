// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: matching/v2/matching_common.proto

package matching

import (
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatSessionState int32

const (
	// Participants can chat, end chat, make friends
	ChatSessionState_ACTIVE ChatSessionState = 0
	// Chatting and voting is closed, session is considered marked for cleanup at this state
	// If users end the chat early, chat sessions are transitioned to EXPIRY with no voting period
	ChatSessionState_EXPIRED ChatSessionState = 1
	// Session is considered ended, but users have opted to upgrade the conversation to a one-to-one conversation
	// No more messages should be allowed through to the chat participants, though the AnonymousChatEnded chat eventgs
	// May need to be allowed through an upgraded session, and messages to an upgraded chat session may need forwarding
	// to the real participants to resolve some race conditions surrounding upgrades.
	ChatSessionState_UPGRADED ChatSessionState = 2
)

// Enum value maps for ChatSessionState.
var (
	ChatSessionState_name = map[int32]string{
		0: "ACTIVE",
		1: "EXPIRED",
		2: "UPGRADED",
	}
	ChatSessionState_value = map[string]int32{
		"ACTIVE":   0,
		"EXPIRED":  1,
		"UPGRADED": 2,
	}
)

func (x ChatSessionState) Enum() *ChatSessionState {
	p := new(ChatSessionState)
	*p = x
	return p
}

func (x ChatSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v2_matching_common_proto_enumTypes[0].Descriptor()
}

func (ChatSessionState) Type() protoreflect.EnumType {
	return &file_matching_v2_matching_common_proto_enumTypes[0]
}

func (x ChatSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatSessionState.Descriptor instead.
func (ChatSessionState) EnumDescriptor() ([]byte, []int) {
	return file_matching_v2_matching_common_proto_rawDescGZIP(), []int{0}
}

// This corresponds to the smilies that users click to rate chats
type ChatRating_SmileyChatRating int32

const (
	ChatRating_MAD_FACE              ChatRating_SmileyChatRating = 0
	ChatRating_SAD_FACE              ChatRating_SmileyChatRating = 1
	ChatRating_NEUTRAL_FACE          ChatRating_SmileyChatRating = 2
	ChatRating_HAPPY_FACE            ChatRating_SmileyChatRating = 3
	ChatRating_OPEN_MOUTH_HAPPY_FACE ChatRating_SmileyChatRating = 4
)

// Enum value maps for ChatRating_SmileyChatRating.
var (
	ChatRating_SmileyChatRating_name = map[int32]string{
		0: "MAD_FACE",
		1: "SAD_FACE",
		2: "NEUTRAL_FACE",
		3: "HAPPY_FACE",
		4: "OPEN_MOUTH_HAPPY_FACE",
	}
	ChatRating_SmileyChatRating_value = map[string]int32{
		"MAD_FACE":              0,
		"SAD_FACE":              1,
		"NEUTRAL_FACE":          2,
		"HAPPY_FACE":            3,
		"OPEN_MOUTH_HAPPY_FACE": 4,
	}
)

func (x ChatRating_SmileyChatRating) Enum() *ChatRating_SmileyChatRating {
	p := new(ChatRating_SmileyChatRating)
	*p = x
	return p
}

func (x ChatRating_SmileyChatRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatRating_SmileyChatRating) Descriptor() protoreflect.EnumDescriptor {
	return file_matching_v2_matching_common_proto_enumTypes[1].Descriptor()
}

func (ChatRating_SmileyChatRating) Type() protoreflect.EnumType {
	return &file_matching_v2_matching_common_proto_enumTypes[1]
}

func (x ChatRating_SmileyChatRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatRating_SmileyChatRating.Descriptor instead.
func (ChatRating_SmileyChatRating) EnumDescriptor() ([]byte, []int) {
	return file_matching_v2_matching_common_proto_rawDescGZIP(), []int{3, 0}
}

// Anon Match Interest Id is a unique identifier that maps to an interest from a list
// of interest for anonymous matching.
type AnonMatchInterestId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue []byte `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *AnonMatchInterestId) Reset() {
	*x = AnonMatchInterestId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v2_matching_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonMatchInterestId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonMatchInterestId) ProtoMessage() {}

func (x *AnonMatchInterestId) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v2_matching_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonMatchInterestId.ProtoReflect.Descriptor instead.
func (*AnonMatchInterestId) Descriptor() ([]byte, []int) {
	return file_matching_v2_matching_common_proto_rawDescGZIP(), []int{0}
}

func (x *AnonMatchInterestId) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

// Anon Match interest name contains the text for the anonymous chat interest
type AnonMatchInterestName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AnonMatchInterestName) Reset() {
	*x = AnonMatchInterestName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v2_matching_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonMatchInterestName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonMatchInterestName) ProtoMessage() {}

func (x *AnonMatchInterestName) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v2_matching_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonMatchInterestName.ProtoReflect.Descriptor instead.
func (*AnonMatchInterestName) Descriptor() ([]byte, []int) {
	return file_matching_v2_matching_common_proto_rawDescGZIP(), []int{1}
}

func (x *AnonMatchInterestName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Anon Match interest for anonymous chat interest-based matching
type AnonMatchInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *AnonMatchInterestId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name *AnonMatchInterestName `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AnonMatchInterest) Reset() {
	*x = AnonMatchInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v2_matching_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonMatchInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonMatchInterest) ProtoMessage() {}

func (x *AnonMatchInterest) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v2_matching_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonMatchInterest.ProtoReflect.Descriptor instead.
func (*AnonMatchInterest) Descriptor() ([]byte, []int) {
	return file_matching_v2_matching_common_proto_rawDescGZIP(), []int{2}
}

func (x *AnonMatchInterest) GetId() *AnonMatchInterestId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AnonMatchInterest) GetName() *AnonMatchInterestName {
	if x != nil {
		return x.Name
	}
	return nil
}

// ChatRating for the anonymous match sessions
type ChatRating struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rating provided by the user.
	Rating ChatRating_SmileyChatRating `protobuf:"varint,1,opt,name=rating,proto3,enum=common.matching.v2.ChatRating_SmileyChatRating" json:"rating,omitempty"`
}

func (x *ChatRating) Reset() {
	*x = ChatRating{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matching_v2_matching_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRating) ProtoMessage() {}

func (x *ChatRating) ProtoReflect() protoreflect.Message {
	mi := &file_matching_v2_matching_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRating.ProtoReflect.Descriptor instead.
func (*ChatRating) Descriptor() ([]byte, []int) {
	return file_matching_v2_matching_common_proto_rawDescGZIP(), []int{3}
}

func (x *ChatRating) GetRating() ChatRating_SmileyChatRating {
	if x != nil {
		return x.Rating
	}
	return ChatRating_MAD_FACE
}

var File_matching_v2_matching_common_proto protoreflect.FileDescriptor

var file_matching_v2_matching_common_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x1a, 0x11, 0x6b, 0x69, 0x6b, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3f, 0x0a, 0x13, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09,
	0x72, 0x61, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x28, 0x01, 0x30, 0x80, 0x08, 0x52, 0x08, 0x72, 0x61,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xca,
	0x9d, 0x25, 0x07, 0x08, 0x01, 0x18, 0x01, 0x20, 0xff, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x11, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc2,
	0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6d,
	0x69, 0x6c, 0x65, 0x79, 0x43, 0x68, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x6b, 0x0a, 0x10, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41,
	0x44, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41, 0x44, 0x5f,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41,
	0x4c, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x50, 0x50,
	0x59, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x4e,
	0x5f, 0x4d, 0x4f, 0x55, 0x54, 0x48, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x5f, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x42, 0x7f,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f,
	0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x3b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0xa0, 0x01, 0x01, 0xa2, 0x02, 0x13, 0x4b, 0x50, 0x42, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_matching_v2_matching_common_proto_rawDescOnce sync.Once
	file_matching_v2_matching_common_proto_rawDescData = file_matching_v2_matching_common_proto_rawDesc
)

func file_matching_v2_matching_common_proto_rawDescGZIP() []byte {
	file_matching_v2_matching_common_proto_rawDescOnce.Do(func() {
		file_matching_v2_matching_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_matching_v2_matching_common_proto_rawDescData)
	})
	return file_matching_v2_matching_common_proto_rawDescData
}

var file_matching_v2_matching_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_matching_v2_matching_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_matching_v2_matching_common_proto_goTypes = []interface{}{
	(ChatSessionState)(0),            // 0: common.matching.v2.ChatSessionState
	(ChatRating_SmileyChatRating)(0), // 1: common.matching.v2.ChatRating.SmileyChatRating
	(*AnonMatchInterestId)(nil),      // 2: common.matching.v2.AnonMatchInterestId
	(*AnonMatchInterestName)(nil),    // 3: common.matching.v2.AnonMatchInterestName
	(*AnonMatchInterest)(nil),        // 4: common.matching.v2.AnonMatchInterest
	(*ChatRating)(nil),               // 5: common.matching.v2.ChatRating
}
var file_matching_v2_matching_common_proto_depIdxs = []int32{
	2, // 0: common.matching.v2.AnonMatchInterest.id:type_name -> common.matching.v2.AnonMatchInterestId
	3, // 1: common.matching.v2.AnonMatchInterest.name:type_name -> common.matching.v2.AnonMatchInterestName
	1, // 2: common.matching.v2.ChatRating.rating:type_name -> common.matching.v2.ChatRating.SmileyChatRating
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_matching_v2_matching_common_proto_init() }
func file_matching_v2_matching_common_proto_init() {
	if File_matching_v2_matching_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_matching_v2_matching_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonMatchInterestId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v2_matching_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonMatchInterestName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v2_matching_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonMatchInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matching_v2_matching_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRating); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matching_v2_matching_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_matching_v2_matching_common_proto_goTypes,
		DependencyIndexes: file_matching_v2_matching_common_proto_depIdxs,
		EnumInfos:         file_matching_v2_matching_common_proto_enumTypes,
		MessageInfos:      file_matching_v2_matching_common_proto_msgTypes,
	}.Build()
	File_matching_v2_matching_common_proto = out.File
	file_matching_v2_matching_common_proto_rawDesc = nil
	file_matching_v2_matching_common_proto_goTypes = nil
	file_matching_v2_matching_common_proto_depIdxs = nil
}
