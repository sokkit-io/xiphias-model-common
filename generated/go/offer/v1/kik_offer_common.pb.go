// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: offer/v1/kik_offer_common.proto

package offer

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/payment/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeatureGroup defines a logical grouping of offers into a group based on context and functionality
// For example: all offers related to anonymous matching are defined under ANON_MATCHING
// FeatureGroup definition is arbitrary. However, a good practice is to take into account context and/or transaction
// type
type FeatureGroup int32

const (
	FeatureGroup_UNKNOWN FeatureGroup = 0
	// All kik offers that are related to user tipping (pay-to-user) other users in a group
	FeatureGroup_GROUP_TIPPING FeatureGroup = 1
	// All kik offers that are related to the anonymous matching feature
	FeatureGroup_ANON_MATCHING FeatureGroup = 2
	// All kik offers that are related to user watching a video
	FeatureGroup_REWARDED_VIDEO FeatureGroup = 3
	// All kik offers that are related to client only features
	FeatureGroup_CLIENT_EARN FeatureGroup = 4
)

// Enum value maps for FeatureGroup.
var (
	FeatureGroup_name = map[int32]string{
		0: "UNKNOWN",
		1: "GROUP_TIPPING",
		2: "ANON_MATCHING",
		3: "REWARDED_VIDEO",
		4: "CLIENT_EARN",
	}
	FeatureGroup_value = map[string]int32{
		"UNKNOWN":        0,
		"GROUP_TIPPING":  1,
		"ANON_MATCHING":  2,
		"REWARDED_VIDEO": 3,
		"CLIENT_EARN":    4,
	}
)

func (x FeatureGroup) Enum() *FeatureGroup {
	p := new(FeatureGroup)
	*p = x
	return p
}

func (x FeatureGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_offer_v1_kik_offer_common_proto_enumTypes[0].Descriptor()
}

func (FeatureGroup) Type() protoreflect.EnumType {
	return &file_offer_v1_kik_offer_common_proto_enumTypes[0]
}

func (x FeatureGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureGroup.Descriptor instead.
func (FeatureGroup) EnumDescriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{0}
}

type MessageData_Type int32

const (
	MessageData_UNKNOWN       MessageData_Type = 0
	MessageData_TEXT          MessageData_Type = 1
	MessageData_WEB_PAGE      MessageData_Type = 2
	MessageData_IMAGE_GALLERY MessageData_Type = 3
	MessageData_IMAGE_CAMERA  MessageData_Type = 4
	MessageData_GIF           MessageData_Type = 5
	MessageData_VIDEO_GALLERY MessageData_Type = 6
	MessageData_VIDEO_CAMERA  MessageData_Type = 7
)

// Enum value maps for MessageData_Type.
var (
	MessageData_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "TEXT",
		2: "WEB_PAGE",
		3: "IMAGE_GALLERY",
		4: "IMAGE_CAMERA",
		5: "GIF",
		6: "VIDEO_GALLERY",
		7: "VIDEO_CAMERA",
	}
	MessageData_Type_value = map[string]int32{
		"UNKNOWN":       0,
		"TEXT":          1,
		"WEB_PAGE":      2,
		"IMAGE_GALLERY": 3,
		"IMAGE_CAMERA":  4,
		"GIF":           5,
		"VIDEO_GALLERY": 6,
		"VIDEO_CAMERA":  7,
	}
)

func (x MessageData_Type) Enum() *MessageData_Type {
	p := new(MessageData_Type)
	*p = x
	return p
}

func (x MessageData_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageData_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_offer_v1_kik_offer_common_proto_enumTypes[1].Descriptor()
}

func (MessageData_Type) Type() protoreflect.EnumType {
	return &file_offer_v1_kik_offer_common_proto_enumTypes[1]
}

func (x MessageData_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageData_Type.Descriptor instead.
func (MessageData_Type) EnumDescriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{6, 0}
}

// KikOfferId uniquely defines an offer. This id will always be present for all offers
// Here are some example of an offer id (actual ids might be different):
// - `theme_id`: when an offer is an opporunity to buy a theme
// - `anon_completed_ten_chats`: an offer which is available after completing ten chats
// - `anon_received_five_thumbs_up`: an offer which is available after receiving five thumbs up
// - `anon_five_chats`: an offer to spend Kin to receive five anonymous chats
//
// There is also a KikUserOfferId, which is present when the offer has an associated user. If the offer is not
// yet associated to a user, client can use KikOfferId to generate KikUserOfferId.
type KikOfferId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KikOfferId) Reset() {
	*x = KikOfferId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KikOfferId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KikOfferId) ProtoMessage() {}

func (x *KikOfferId) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KikOfferId.ProtoReflect.Descriptor instead.
func (*KikOfferId) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{0}
}

func (x *KikOfferId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// When an offer has an associated user, KikUserOfferId will contain a unique id that represents the user offer.
// Typically, "Spend" offers will not have KikUserOfferId present. When a user agrees to claim the offer
// (i.e buy a theme, or spend Kin to earn chats), a KikUserOfferId is generated for that offer.
type KikUserOfferId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KikUserOfferId) Reset() {
	*x = KikUserOfferId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KikUserOfferId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KikUserOfferId) ProtoMessage() {}

func (x *KikUserOfferId) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KikUserOfferId.ProtoReflect.Descriptor instead.
func (*KikUserOfferId) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{1}
}

func (x *KikUserOfferId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// An id that uniquely identifies the offer
// The presence of KikOfferId indicates that this offer is public (available to all users)
// The presence of KikUserOfferIdd indicates that this offer is available to the user only and is ready to be claimed
type KikOfferIdOrUserOfferId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*KikOfferIdOrUserOfferId_KikOfferId
	//	*KikOfferIdOrUserOfferId_KikUserOfferId
	Id isKikOfferIdOrUserOfferId_Id `protobuf_oneof:"id"`
}

func (x *KikOfferIdOrUserOfferId) Reset() {
	*x = KikOfferIdOrUserOfferId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KikOfferIdOrUserOfferId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KikOfferIdOrUserOfferId) ProtoMessage() {}

func (x *KikOfferIdOrUserOfferId) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KikOfferIdOrUserOfferId.ProtoReflect.Descriptor instead.
func (*KikOfferIdOrUserOfferId) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{2}
}

func (m *KikOfferIdOrUserOfferId) GetId() isKikOfferIdOrUserOfferId_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *KikOfferIdOrUserOfferId) GetKikOfferId() *KikOfferId {
	if x, ok := x.GetId().(*KikOfferIdOrUserOfferId_KikOfferId); ok {
		return x.KikOfferId
	}
	return nil
}

func (x *KikOfferIdOrUserOfferId) GetKikUserOfferId() *KikUserOfferId {
	if x, ok := x.GetId().(*KikOfferIdOrUserOfferId_KikUserOfferId); ok {
		return x.KikUserOfferId
	}
	return nil
}

type isKikOfferIdOrUserOfferId_Id interface {
	isKikOfferIdOrUserOfferId_Id()
}

type KikOfferIdOrUserOfferId_KikOfferId struct {
	KikOfferId *KikOfferId `protobuf:"bytes,1,opt,name=kik_offer_id,json=kikOfferId,proto3,oneof"`
}

type KikOfferIdOrUserOfferId_KikUserOfferId struct {
	KikUserOfferId *KikUserOfferId `protobuf:"bytes,2,opt,name=kik_user_offer_id,json=kikUserOfferId,proto3,oneof"`
}

func (*KikOfferIdOrUserOfferId_KikOfferId) isKikOfferIdOrUserOfferId_Id() {}

func (*KikOfferIdOrUserOfferId_KikUserOfferId) isKikOfferIdOrUserOfferId_Id() {}

// KikOffer is sent to the mobile clients. It encapsulates all the information
// that client needs to process an offer
type KikOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KikOfferId uniquely identifies the base kik offer
	KikOfferId *KikOfferId `protobuf:"bytes,1,opt,name=kik_offer_id,json=kikOfferId,proto3" json:"kik_offer_id,omitempty"`
	// KikUserOfferId will be present when the offer has been associated with a user and is ready to claim
	KikUserOfferId *KikUserOfferId `protobuf:"bytes,2,opt,name=kik_user_offer_id,json=kikUserOfferId,proto3" json:"kik_user_offer_id,omitempty"`
	// Feature group that offer belongs to. This is used to group the offers
	FeatureGroup FeatureGroup `protobuf:"varint,3,opt,name=feature_group,json=featureGroup,proto3,enum=common.offer.v1.FeatureGroup" json:"feature_group,omitempty"`
	// Amount of Kin for the transaction. For certain offers, this field will a default amount that users can override.
	// For example: an group admin tipping offer (PAY_TO_USER) will have a default `amount` set.
	//              The user will decide the amount and can override the default amount
	//
	// An offer where KikUserOfferId is present must have a value for this field.
	Amount *v1.KinAmount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// Transaction type e.g. earn, spend, pay_2_user
	TransactionType v1.TransactionType `protobuf:"varint,5,opt,name=transaction_type,json=transactionType,proto3,enum=common.kin.payment.v1.TransactionType" json:"transaction_type,omitempty"`
	// Title for the offer. This could be displayed by the clients to the end users
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// Description for the offer. This could be displayed by the clients to the end users
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Optional end date for the offer
	EndDate *timestamp.Timestamp `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// If this is set to true, clients should claim the offer without user explicit input
	ClaimSilently bool `protobuf:"varint,9,opt,name=claim_silently,json=claimSilently,proto3" json:"claim_silently,omitempty"`
	// Any extra data associated with the offer
	KikOfferData *KikOfferData `protobuf:"bytes,10,opt,name=kik_offer_data,json=kikOfferData,proto3" json:"kik_offer_data,omitempty"`
}

func (x *KikOffer) Reset() {
	*x = KikOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KikOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KikOffer) ProtoMessage() {}

func (x *KikOffer) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KikOffer.ProtoReflect.Descriptor instead.
func (*KikOffer) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{3}
}

func (x *KikOffer) GetKikOfferId() *KikOfferId {
	if x != nil {
		return x.KikOfferId
	}
	return nil
}

func (x *KikOffer) GetKikUserOfferId() *KikUserOfferId {
	if x != nil {
		return x.KikUserOfferId
	}
	return nil
}

func (x *KikOffer) GetFeatureGroup() FeatureGroup {
	if x != nil {
		return x.FeatureGroup
	}
	return FeatureGroup_UNKNOWN
}

func (x *KikOffer) GetAmount() *v1.KinAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *KikOffer) GetTransactionType() v1.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return v1.TransactionType(0)
}

func (x *KikOffer) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *KikOffer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KikOffer) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *KikOffer) GetClaimSilently() bool {
	if x != nil {
		return x.ClaimSilently
	}
	return false
}

func (x *KikOffer) GetKikOfferData() *KikOfferData {
	if x != nil {
		return x.KikOfferData
	}
	return nil
}

// User offer data define any extra pieces of information that should be included in offer requests by clients
// User offer data are used to validate client request and are included in transaction records
type UserOfferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*UserOfferData_GroupTippingData
	Kind isUserOfferData_Kind `protobuf_oneof:"kind"`
}

func (x *UserOfferData) Reset() {
	*x = UserOfferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOfferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOfferData) ProtoMessage() {}

func (x *UserOfferData) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOfferData.ProtoReflect.Descriptor instead.
func (*UserOfferData) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{4}
}

func (m *UserOfferData) GetKind() isUserOfferData_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *UserOfferData) GetGroupTippingData() *GroupTipping {
	if x, ok := x.GetKind().(*UserOfferData_GroupTippingData); ok {
		return x.GroupTippingData
	}
	return nil
}

type isUserOfferData_Kind interface {
	isUserOfferData_Kind()
}

type UserOfferData_GroupTippingData struct {
	GroupTippingData *GroupTipping `protobuf:"bytes,1,opt,name=group_tipping_data,json=groupTippingData,proto3,oneof"`
}

func (*UserOfferData_GroupTippingData) isUserOfferData_Kind() {}

type GroupTipping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupJid    *_go.XiGroupJid `protobuf:"bytes,1,opt,name=group_jid,json=groupJid,proto3" json:"group_jid,omitempty"`
	MessageData *MessageData    `protobuf:"bytes,2,opt,name=message_data,json=messageData,proto3" json:"message_data,omitempty"`
}

func (x *GroupTipping) Reset() {
	*x = GroupTipping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTipping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTipping) ProtoMessage() {}

func (x *GroupTipping) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTipping.ProtoReflect.Descriptor instead.
func (*GroupTipping) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{5}
}

func (x *GroupTipping) GetGroupJid() *_go.XiGroupJid {
	if x != nil {
		return x.GroupJid
	}
	return nil
}

func (x *GroupTipping) GetMessageData() *MessageData {
	if x != nil {
		return x.MessageData
	}
	return nil
}

type MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *_go.XiUuid      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type MessageData_Type `protobuf:"varint,2,opt,name=type,proto3,enum=common.offer.v1.MessageData_Type" json:"type,omitempty"`
}

func (x *MessageData) Reset() {
	*x = MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageData) ProtoMessage() {}

func (x *MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageData.ProtoReflect.Descriptor instead.
func (*MessageData) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{6}
}

func (x *MessageData) GetId() *_go.XiUuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageData) GetType() MessageData_Type {
	if x != nil {
		return x.Type
	}
	return MessageData_UNKNOWN
}

// Kik offer data defines any extra data that is related to the kik offer
// This data can be used by clients to display certain details about the offer
// that is specific to that offer
type KikOfferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*KikOfferData_AnonMatchingBuyChatData
	Kind isKikOfferData_Kind `protobuf_oneof:"kind"`
}

func (x *KikOfferData) Reset() {
	*x = KikOfferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KikOfferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KikOfferData) ProtoMessage() {}

func (x *KikOfferData) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KikOfferData.ProtoReflect.Descriptor instead.
func (*KikOfferData) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{7}
}

func (m *KikOfferData) GetKind() isKikOfferData_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *KikOfferData) GetAnonMatchingBuyChatData() *AnonMatchingBuyChatData {
	if x, ok := x.GetKind().(*KikOfferData_AnonMatchingBuyChatData); ok {
		return x.AnonMatchingBuyChatData
	}
	return nil
}

type isKikOfferData_Kind interface {
	isKikOfferData_Kind()
}

type KikOfferData_AnonMatchingBuyChatData struct {
	AnonMatchingBuyChatData *AnonMatchingBuyChatData `protobuf:"bytes,1,opt,name=anon_matching_buy_chat_data,json=anonMatchingBuyChatData,proto3,oneof"`
}

func (*KikOfferData_AnonMatchingBuyChatData) isKikOfferData_Kind() {}

// Extra kik offer data for anonymous matching buy chat offers
type AnonMatchingBuyChatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfChats uint32 `protobuf:"varint,1,opt,name=number_of_chats,json=numberOfChats,proto3" json:"number_of_chats,omitempty"`
}

func (x *AnonMatchingBuyChatData) Reset() {
	*x = AnonMatchingBuyChatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_offer_v1_kik_offer_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonMatchingBuyChatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonMatchingBuyChatData) ProtoMessage() {}

func (x *AnonMatchingBuyChatData) ProtoReflect() protoreflect.Message {
	mi := &file_offer_v1_kik_offer_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonMatchingBuyChatData.ProtoReflect.Descriptor instead.
func (*AnonMatchingBuyChatData) Descriptor() ([]byte, []int) {
	return file_offer_v1_kik_offer_common_proto_rawDescGZIP(), []int{8}
}

func (x *AnonMatchingBuyChatData) GetNumberOfChats() uint32 {
	if x != nil {
		return x.NumberOfChats
	}
	return 0
}

var File_offer_v1_kik_offer_common_proto protoreflect.FileDescriptor

var file_offer_v1_kik_offer_common_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x69, 0x6b, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x6b, 0x69, 0x6e, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0a, 0x4b, 0x69, 0x6b, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2b, 0x0a, 0x0e, 0x4b, 0x69, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x02, 0x52, 0x02, 0x69, 0x64, 0x22, 0xae, 0x01,
	0x0a, 0x17, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x4f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x6b, 0x69, 0x6b,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x6b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x11, 0x6b, 0x69,
	0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x69, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xe7,
	0x04, 0x0a, 0x08, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0c, 0x6b,
	0x69, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x6b, 0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x6b, 0x69, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x69, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x52, 0x0e,
	0x6b, 0x69, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80,
	0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca,
	0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x53, 0x69, 0x6c, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x6b, 0x69, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69,
	0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6b, 0x69, 0x6b, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x12, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x74, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x88, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xec, 0x01, 0x0a, 0x0b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x58, 0x69, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x45, 0x42,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x47, 0x49, 0x46, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x47,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x07, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x4b,
	0x69, 0x6b, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x68, 0x0a, 0x1b, 0x61,
	0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42,
	0x75, 0x79, 0x43, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x61, 0x6e,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x79, 0x43, 0x68, 0x61,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x41, 0x0a,
	0x17, 0x41, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x79,
	0x43, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x61, 0x74, 0x73,
	0x2a, 0x66, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x45, 0x44, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x10, 0x04, 0x42, 0x5c, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x69, 0x6b, 0x2e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b,
	0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x3b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_offer_v1_kik_offer_common_proto_rawDescOnce sync.Once
	file_offer_v1_kik_offer_common_proto_rawDescData = file_offer_v1_kik_offer_common_proto_rawDesc
)

func file_offer_v1_kik_offer_common_proto_rawDescGZIP() []byte {
	file_offer_v1_kik_offer_common_proto_rawDescOnce.Do(func() {
		file_offer_v1_kik_offer_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_offer_v1_kik_offer_common_proto_rawDescData)
	})
	return file_offer_v1_kik_offer_common_proto_rawDescData
}

var file_offer_v1_kik_offer_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_offer_v1_kik_offer_common_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_offer_v1_kik_offer_common_proto_goTypes = []interface{}{
	(FeatureGroup)(0),               // 0: common.offer.v1.FeatureGroup
	(MessageData_Type)(0),           // 1: common.offer.v1.MessageData.Type
	(*KikOfferId)(nil),              // 2: common.offer.v1.KikOfferId
	(*KikUserOfferId)(nil),          // 3: common.offer.v1.KikUserOfferId
	(*KikOfferIdOrUserOfferId)(nil), // 4: common.offer.v1.KikOfferIdOrUserOfferId
	(*KikOffer)(nil),                // 5: common.offer.v1.KikOffer
	(*UserOfferData)(nil),           // 6: common.offer.v1.UserOfferData
	(*GroupTipping)(nil),            // 7: common.offer.v1.GroupTipping
	(*MessageData)(nil),             // 8: common.offer.v1.MessageData
	(*KikOfferData)(nil),            // 9: common.offer.v1.KikOfferData
	(*AnonMatchingBuyChatData)(nil), // 10: common.offer.v1.AnonMatchingBuyChatData
	(*v1.KinAmount)(nil),            // 11: common.kin.payment.v1.KinAmount
	(v1.TransactionType)(0),         // 12: common.kin.payment.v1.TransactionType
	(*timestamp.Timestamp)(nil),     // 13: google.protobuf.Timestamp
	(*_go.XiGroupJid)(nil),          // 14: common.XiGroupJid
	(*_go.XiUuid)(nil),              // 15: common.XiUuid
}
var file_offer_v1_kik_offer_common_proto_depIdxs = []int32{
	2,  // 0: common.offer.v1.KikOfferIdOrUserOfferId.kik_offer_id:type_name -> common.offer.v1.KikOfferId
	3,  // 1: common.offer.v1.KikOfferIdOrUserOfferId.kik_user_offer_id:type_name -> common.offer.v1.KikUserOfferId
	2,  // 2: common.offer.v1.KikOffer.kik_offer_id:type_name -> common.offer.v1.KikOfferId
	3,  // 3: common.offer.v1.KikOffer.kik_user_offer_id:type_name -> common.offer.v1.KikUserOfferId
	0,  // 4: common.offer.v1.KikOffer.feature_group:type_name -> common.offer.v1.FeatureGroup
	11, // 5: common.offer.v1.KikOffer.amount:type_name -> common.kin.payment.v1.KinAmount
	12, // 6: common.offer.v1.KikOffer.transaction_type:type_name -> common.kin.payment.v1.TransactionType
	13, // 7: common.offer.v1.KikOffer.end_date:type_name -> google.protobuf.Timestamp
	9,  // 8: common.offer.v1.KikOffer.kik_offer_data:type_name -> common.offer.v1.KikOfferData
	7,  // 9: common.offer.v1.UserOfferData.group_tipping_data:type_name -> common.offer.v1.GroupTipping
	14, // 10: common.offer.v1.GroupTipping.group_jid:type_name -> common.XiGroupJid
	8,  // 11: common.offer.v1.GroupTipping.message_data:type_name -> common.offer.v1.MessageData
	15, // 12: common.offer.v1.MessageData.id:type_name -> common.XiUuid
	1,  // 13: common.offer.v1.MessageData.type:type_name -> common.offer.v1.MessageData.Type
	10, // 14: common.offer.v1.KikOfferData.anon_matching_buy_chat_data:type_name -> common.offer.v1.AnonMatchingBuyChatData
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_offer_v1_kik_offer_common_proto_init() }
func file_offer_v1_kik_offer_common_proto_init() {
	if File_offer_v1_kik_offer_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_offer_v1_kik_offer_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KikOfferId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KikUserOfferId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KikOfferIdOrUserOfferId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KikOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOfferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTipping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KikOfferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_offer_v1_kik_offer_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonMatchingBuyChatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_offer_v1_kik_offer_common_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*KikOfferIdOrUserOfferId_KikOfferId)(nil),
		(*KikOfferIdOrUserOfferId_KikUserOfferId)(nil),
	}
	file_offer_v1_kik_offer_common_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UserOfferData_GroupTippingData)(nil),
	}
	file_offer_v1_kik_offer_common_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*KikOfferData_AnonMatchingBuyChatData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_offer_v1_kik_offer_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_offer_v1_kik_offer_common_proto_goTypes,
		DependencyIndexes: file_offer_v1_kik_offer_common_proto_depIdxs,
		EnumInfos:         file_offer_v1_kik_offer_common_proto_enumTypes,
		MessageInfos:      file_offer_v1_kik_offer_common_proto_msgTypes,
	}.Build()
	File_offer_v1_kik_offer_common_proto = out.File
	file_offer_v1_kik_offer_common_proto_rawDesc = nil
	file_offer_v1_kik_offer_common_proto_goTypes = nil
	file_offer_v1_kik_offer_common_proto_depIdxs = nil
}
