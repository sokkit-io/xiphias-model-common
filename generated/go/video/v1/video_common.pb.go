// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: video/v1/video_common.proto

package video

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConvoVideoState_UserState_State int32

const (
	// This should never be used and exists to detect cases where the producer of this message
	// has not set the state.
	ConvoVideoState_UserState_NOT_SET ConvoVideoState_UserState_State = 0
	// A user is in CONNECTING state when he/she has requested to join the conference (and
	// the server has accepted the request) however, the client is not yet connected to the
	// media server
	//
	// There is a bounded amount of time clients should be in this CONNECTING state.
	//
	// Note that the _typical_ flow is that users will first be in this connecting state then move to
	// the connected state, but no component of the system should rely on receiving each of these
	// incremental updates.
	ConvoVideoState_UserState_CONNECTING ConvoVideoState_UserState_State = 5
	// This indicate that the client has an active connection to the media server.
	ConvoVideoState_UserState_CONNECTED ConvoVideoState_UserState_State = 10
)

// Enum value maps for ConvoVideoState_UserState_State.
var (
	ConvoVideoState_UserState_State_name = map[int32]string{
		0:  "NOT_SET",
		5:  "CONNECTING",
		10: "CONNECTED",
	}
	ConvoVideoState_UserState_State_value = map[string]int32{
		"NOT_SET":    0,
		"CONNECTING": 5,
		"CONNECTED":  10,
	}
)

func (x ConvoVideoState_UserState_State) Enum() *ConvoVideoState_UserState_State {
	p := new(ConvoVideoState_UserState_State)
	*p = x
	return p
}

func (x ConvoVideoState_UserState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConvoVideoState_UserState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_video_v1_video_common_proto_enumTypes[0].Descriptor()
}

func (ConvoVideoState_UserState_State) Type() protoreflect.EnumType {
	return &file_video_v1_video_common_proto_enumTypes[0]
}

func (x ConvoVideoState_UserState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConvoVideoState_UserState_State.Descriptor instead.
func (ConvoVideoState_UserState_State) EnumDescriptor() ([]byte, []int) {
	return file_video_v1_video_common_proto_rawDescGZIP(), []int{2, 0, 0}
}

// TODO: Generalize this beyond just video
type ConvoId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*ConvoId_OneToOne
	//	*ConvoId_Group
	Kind isConvoId_Kind `protobuf_oneof:"kind"`
}

func (x *ConvoId) Reset() {
	*x = ConvoId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_video_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvoId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvoId) ProtoMessage() {}

func (x *ConvoId) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_video_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvoId.ProtoReflect.Descriptor instead.
func (*ConvoId) Descriptor() ([]byte, []int) {
	return file_video_v1_video_common_proto_rawDescGZIP(), []int{0}
}

func (m *ConvoId) GetKind() isConvoId_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ConvoId) GetOneToOne() *OneToOneConvoId {
	if x, ok := x.GetKind().(*ConvoId_OneToOne); ok {
		return x.OneToOne
	}
	return nil
}

func (x *ConvoId) GetGroup() *_go.XiGroupJid {
	if x, ok := x.GetKind().(*ConvoId_Group); ok {
		return x.Group
	}
	return nil
}

type isConvoId_Kind interface {
	isConvoId_Kind()
}

type ConvoId_OneToOne struct {
	OneToOne *OneToOneConvoId `protobuf:"bytes,1,opt,name=one_to_one,json=oneToOne,proto3,oneof"`
}

type ConvoId_Group struct {
	Group *_go.XiGroupJid `protobuf:"bytes,2,opt,name=group,proto3,oneof"`
}

func (*ConvoId_OneToOne) isConvoId_Kind() {}

func (*ConvoId_Group) isConvoId_Kind() {}

// TODO: Generalize this beyond just video
type OneToOneConvoId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MUST be ordered
	Users []*_go.XiBareUserJid `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *OneToOneConvoId) Reset() {
	*x = OneToOneConvoId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_video_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneToOneConvoId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneToOneConvoId) ProtoMessage() {}

func (x *OneToOneConvoId) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_video_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneToOneConvoId.ProtoReflect.Descriptor instead.
func (*OneToOneConvoId) Descriptor() ([]byte, []int) {
	return file_video_v1_video_common_proto_rawDescGZIP(), []int{1}
}

func (x *OneToOneConvoId) GetUsers() []*_go.XiBareUserJid {
	if x != nil {
		return x.Users
	}
	return nil
}

// Note that the ConvoVideoState does NOT include any information about the conference for a particular
// conversation.
//
// ConvoVideoState represents a snapshot of active users who are connected to the media server and
// users who are in the process of connecting to the media server.
//
// TODO: Ensure design covers the bounded time an user can be in CONNECTING state.
type ConvoVideoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Convo video state is specific to a convo (ie: this is the primary key)
	ConvoId *ConvoId `protobuf:"bytes,1,opt,name=convo_id,json=convoId,proto3" json:"convo_id,omitempty"`
	// Note:
	//  -   There MAY NOT be an entry for every person in the convo, this should just contain
	//      those users involved in the video part of the convo (ex: there WILL NOT be an entry here
	//      for every member of a group).
	//  -   This is NOT guaranteed to reflect the latest group membership state (ex: there may be
	//      users who are no longer in a group chat which still appear in this list). TODO: document expected handling
	//  -   Each user will appear only once in this list.
	UserStates []*ConvoVideoState_UserState `protobuf:"bytes,2,rep,name=user_states,json=userStates,proto3" json:"user_states,omitempty"`
	// This is crucial information needed to handle the ordering of state change events on the
	// receiving end.
	//
	// Please note, due to Rounds internal implementation needs, this timestamp is not always the clock
	// time of the event, it is however sequential in the order of actual events. Controlling this
	// timestamp should only be done at source (Rounds state tracking). DO NOT compare this timestamp
	// to any other system time to determine sequential ordering of events.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ConvoVideoState) Reset() {
	*x = ConvoVideoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_video_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvoVideoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvoVideoState) ProtoMessage() {}

func (x *ConvoVideoState) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_video_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvoVideoState.ProtoReflect.Descriptor instead.
func (*ConvoVideoState) Descriptor() ([]byte, []int) {
	return file_video_v1_video_common_proto_rawDescGZIP(), []int{2}
}

func (x *ConvoVideoState) GetConvoId() *ConvoId {
	if x != nil {
		return x.ConvoId
	}
	return nil
}

func (x *ConvoVideoState) GetUserStates() []*ConvoVideoState_UserState {
	if x != nil {
		return x.UserStates
	}
	return nil
}

func (x *ConvoVideoState) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// TERMINOLOGY: Conference: is an active video chat session on a media server.
//
// Notes:
//   - This message contains the necessary information to connect to a media server
//   - Its expected that there SHOULD only be a single conference for a particular conversation
//     at any given time.
type ConferenceConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// This is assigned by the Round's VideoConferenceService
	//
	// It's comprised of 3 parts and is in the format of
	//     "A.B.C"
	// Where
	//     A - app name (i.e. kik)
	//     B - 16 characters (base 64 encoded) acts as the underline ID
	//     C - 4 characters (base 64 encoded) acts as a checksum
	ConferenceId string `protobuf:"bytes,3,opt,name=conference_id,json=conferenceId,proto3" json:"conference_id,omitempty"`
}

func (x *ConferenceConnectionInfo) Reset() {
	*x = ConferenceConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_video_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConferenceConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConferenceConnectionInfo) ProtoMessage() {}

func (x *ConferenceConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_video_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConferenceConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConferenceConnectionInfo) Descriptor() ([]byte, []int) {
	return file_video_v1_video_common_proto_rawDescGZIP(), []int{3}
}

func (x *ConferenceConnectionInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ConferenceConnectionInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ConferenceConnectionInfo) GetConferenceId() string {
	if x != nil {
		return x.ConferenceId
	}
	return ""
}

// This token should be passed to the media server when the client connects to it.
// It MAY be used to identify the connecting client but MUST NOT be interpreted by the client.
type MediaServerConnectionToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clients MUST NOT interpret this message.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MediaServerConnectionToken) Reset() {
	*x = MediaServerConnectionToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_video_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaServerConnectionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaServerConnectionToken) ProtoMessage() {}

func (x *MediaServerConnectionToken) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_video_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaServerConnectionToken.ProtoReflect.Descriptor instead.
func (*MediaServerConnectionToken) Descriptor() ([]byte, []int) {
	return file_video_v1_video_common_proto_rawDescGZIP(), []int{4}
}

func (x *MediaServerConnectionToken) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ConvoVideoState_UserState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *_go.XiBareUserJid              `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	State ConvoVideoState_UserState_State `protobuf:"varint,2,opt,name=state,proto3,enum=common.video.v1.ConvoVideoState_UserState_State" json:"state,omitempty"`
}

func (x *ConvoVideoState_UserState) Reset() {
	*x = ConvoVideoState_UserState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_v1_video_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvoVideoState_UserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvoVideoState_UserState) ProtoMessage() {}

func (x *ConvoVideoState_UserState) ProtoReflect() protoreflect.Message {
	mi := &file_video_v1_video_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvoVideoState_UserState.ProtoReflect.Descriptor instead.
func (*ConvoVideoState_UserState) Descriptor() ([]byte, []int) {
	return file_video_v1_video_common_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ConvoVideoState_UserState) GetUser() *_go.XiBareUserJid {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ConvoVideoState_UserState) GetState() ConvoVideoState_UserState_State {
	if x != nil {
		return x.State
	}
	return ConvoVideoState_UserState_NOT_SET
}

var File_video_v1_video_common_proto protoreflect.FileDescriptor

var file_video_v1_video_common_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x49, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0x4e, 0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x54, 0x6f, 0x4f, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x6f,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x0e, 0xca, 0x9d, 0x25, 0x0a, 0x08, 0x01,
	0x78, 0x02, 0x80, 0x01, 0x02, 0x88, 0x01, 0x00, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22,
	0xa8, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x76, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x6f, 0x49, 0x64,
	0x12, 0x58, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x00, 0x78, 0x00, 0x80, 0x01, 0x64, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0xbb, 0x01, 0x0a,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x22, 0x7c, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x08, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x08, 0x01, 0x30, 0x20, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x1a, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x28,
	0x01, 0x30, 0x80, 0x28, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x56, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69,
	0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_v1_video_common_proto_rawDescOnce sync.Once
	file_video_v1_video_common_proto_rawDescData = file_video_v1_video_common_proto_rawDesc
)

func file_video_v1_video_common_proto_rawDescGZIP() []byte {
	file_video_v1_video_common_proto_rawDescOnce.Do(func() {
		file_video_v1_video_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_v1_video_common_proto_rawDescData)
	})
	return file_video_v1_video_common_proto_rawDescData
}

var file_video_v1_video_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_video_v1_video_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_video_v1_video_common_proto_goTypes = []interface{}{
	(ConvoVideoState_UserState_State)(0), // 0: common.video.v1.ConvoVideoState.UserState.State
	(*ConvoId)(nil),                      // 1: common.video.v1.ConvoId
	(*OneToOneConvoId)(nil),              // 2: common.video.v1.OneToOneConvoId
	(*ConvoVideoState)(nil),              // 3: common.video.v1.ConvoVideoState
	(*ConferenceConnectionInfo)(nil),     // 4: common.video.v1.ConferenceConnectionInfo
	(*MediaServerConnectionToken)(nil),   // 5: common.video.v1.MediaServerConnectionToken
	(*ConvoVideoState_UserState)(nil),    // 6: common.video.v1.ConvoVideoState.UserState
	(*_go.XiGroupJid)(nil),               // 7: common.XiGroupJid
	(*_go.XiBareUserJid)(nil),            // 8: common.XiBareUserJid
	(*timestamp.Timestamp)(nil),          // 9: google.protobuf.Timestamp
}
var file_video_v1_video_common_proto_depIdxs = []int32{
	2, // 0: common.video.v1.ConvoId.one_to_one:type_name -> common.video.v1.OneToOneConvoId
	7, // 1: common.video.v1.ConvoId.group:type_name -> common.XiGroupJid
	8, // 2: common.video.v1.OneToOneConvoId.users:type_name -> common.XiBareUserJid
	1, // 3: common.video.v1.ConvoVideoState.convo_id:type_name -> common.video.v1.ConvoId
	6, // 4: common.video.v1.ConvoVideoState.user_states:type_name -> common.video.v1.ConvoVideoState.UserState
	9, // 5: common.video.v1.ConvoVideoState.timestamp:type_name -> google.protobuf.Timestamp
	8, // 6: common.video.v1.ConvoVideoState.UserState.user:type_name -> common.XiBareUserJid
	0, // 7: common.video.v1.ConvoVideoState.UserState.state:type_name -> common.video.v1.ConvoVideoState.UserState.State
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_video_v1_video_common_proto_init() }
func file_video_v1_video_common_proto_init() {
	if File_video_v1_video_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_v1_video_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvoId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_video_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneToOneConvoId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_video_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvoVideoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_video_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConferenceConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_video_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaServerConnectionToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_v1_video_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvoVideoState_UserState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_v1_video_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConvoId_OneToOne)(nil),
		(*ConvoId_Group)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_v1_video_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_v1_video_common_proto_goTypes,
		DependencyIndexes: file_video_v1_video_common_proto_depIdxs,
		EnumInfos:         file_video_v1_video_common_proto_enumTypes,
		MessageInfos:      file_video_v1_video_common_proto_msgTypes,
	}.Build()
	File_video_v1_video_common_proto = out.File
	file_video_v1_video_common_proto_rawDesc = nil
	file_video_v1_video_common_proto_goTypes = nil
	file_video_v1_video_common_proto_depIdxs = nil
}
