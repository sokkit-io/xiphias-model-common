// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: entity/v1/entity_common.proto

package entity

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_go "github.com/sokkit-io/xiphias-model-common/generated/go"
	v1 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v1"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityKey_EntityType int32

const (
	// USER - expects id to contain 'user_jid'
	EntityKey_USER EntityKey_EntityType = 0
	// GROUP - expects id to contain 'group_jid'
	EntityKey_GROUP EntityKey_EntityType = 1
	// USER_ROSTER_ENTRY - expects id to contain 'user_jid'
	EntityKey_USER_ROSTER_ENTRY EntityKey_EntityType = 2
	// GROUP_ROSTER_ENTRY - expects id to contain 'group_jid'
	EntityKey_GROUP_ROSTER_ENTRY EntityKey_EntityType = 3
	// CONVO - expects id to contain 'convo_id'
	EntityKey_CONVO EntityKey_EntityType = 4
	// Note: ALIAS_BLOCK_ENTRY is not an entity type actually stored within EntityWarehouse.
	//       Used to identify a pseudo-entity for use within Internal Subscription Service.
	// ALIAS_BLOCK_ENTRY - expects id to contain 'alias_jid'
	EntityKey_ALIAS_BLOCK_ENTRY EntityKey_EntityType = 5
)

// Enum value maps for EntityKey_EntityType.
var (
	EntityKey_EntityType_name = map[int32]string{
		0: "USER",
		1: "GROUP",
		2: "USER_ROSTER_ENTRY",
		3: "GROUP_ROSTER_ENTRY",
		4: "CONVO",
		5: "ALIAS_BLOCK_ENTRY",
	}
	EntityKey_EntityType_value = map[string]int32{
		"USER":               0,
		"GROUP":              1,
		"USER_ROSTER_ENTRY":  2,
		"GROUP_ROSTER_ENTRY": 3,
		"CONVO":              4,
		"ALIAS_BLOCK_ENTRY":  5,
	}
)

func (x EntityKey_EntityType) Enum() *EntityKey_EntityType {
	p := new(EntityKey_EntityType)
	*p = x
	return p
}

func (x EntityKey_EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityKey_EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_v1_entity_common_proto_enumTypes[0].Descriptor()
}

func (EntityKey_EntityType) Type() protoreflect.EnumType {
	return &file_entity_v1_entity_common_proto_enumTypes[0]
}

func (x EntityKey_EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityKey_EntityType.Descriptor instead.
func (EntityKey_EntityType) EnumDescriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{0, 0}
}

// **************************************************
// Key used by Entity Warehouse, Subscription Service, etc
// to explicitly identify entities
// **************************************************
//
// NOTE: EntityKey has specific IDs that are expected to go with specific EntityTypes.
//
//	Please check the comments for EntityType to understand what id values are valid
//	(Ideally we would restructure the EntityKey message, but it's already too embedded to change now)
type EntityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type EntityKey_EntityType `protobuf:"varint,1,opt,name=type,proto3,enum=common.entity.v1.EntityKey_EntityType" json:"type,omitempty"`
	// Types that are assignable to Id:
	//	*EntityKey_UserJid
	//	*EntityKey_GroupJid
	//	*EntityKey_ConvoId
	//	*EntityKey_AliasJid
	Id isEntityKey_Id `protobuf_oneof:"id"`
}

func (x *EntityKey) Reset() {
	*x = EntityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v1_entity_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityKey) ProtoMessage() {}

func (x *EntityKey) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v1_entity_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityKey.ProtoReflect.Descriptor instead.
func (*EntityKey) Descriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{0}
}

func (x *EntityKey) GetType() EntityKey_EntityType {
	if x != nil {
		return x.Type
	}
	return EntityKey_USER
}

func (m *EntityKey) GetId() isEntityKey_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *EntityKey) GetUserJid() *_go.XiBareUserJid {
	if x, ok := x.GetId().(*EntityKey_UserJid); ok {
		return x.UserJid
	}
	return nil
}

func (x *EntityKey) GetGroupJid() *_go.XiGroupJid {
	if x, ok := x.GetId().(*EntityKey_GroupJid); ok {
		return x.GroupJid
	}
	return nil
}

func (x *EntityKey) GetConvoId() *v1.XiConvoId {
	if x, ok := x.GetId().(*EntityKey_ConvoId); ok {
		return x.ConvoId
	}
	return nil
}

func (x *EntityKey) GetAliasJid() *v1.XiAliasJid {
	if x, ok := x.GetId().(*EntityKey_AliasJid); ok {
		return x.AliasJid
	}
	return nil
}

type isEntityKey_Id interface {
	isEntityKey_Id()
}

type EntityKey_UserJid struct {
	// user_jid requires type to be USER or USER_ROSTER_ENTRY
	UserJid *_go.XiBareUserJid `protobuf:"bytes,2,opt,name=user_jid,json=userJid,proto3,oneof"`
}

type EntityKey_GroupJid struct {
	// group_jid requires type to be GROUP or GROUP_ROSTER_ENTRY
	GroupJid *_go.XiGroupJid `protobuf:"bytes,3,opt,name=group_jid,json=groupJid,proto3,oneof"`
}

type EntityKey_ConvoId struct {
	// convo_id requires type to be CONVO
	ConvoId *v1.XiConvoId `protobuf:"bytes,4,opt,name=convo_id,json=convoId,proto3,oneof"`
}

type EntityKey_AliasJid struct {
	// alias_jid requires type to be ALIAS_BLOCK_ENTRY
	AliasJid *v1.XiAliasJid `protobuf:"bytes,5,opt,name=alias_jid,json=aliasJid,proto3,oneof"`
}

func (*EntityKey_UserJid) isEntityKey_Id() {}

func (*EntityKey_GroupJid) isEntityKey_Id() {}

func (*EntityKey_ConvoId) isEntityKey_Id() {}

func (*EntityKey_AliasJid) isEntityKey_Id() {}

type EntityGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *_go.XiGroupJid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Use tag number range of [100-199] for elements sourced from profile service
	BioElement *BioElement `protobuf:"bytes,100,opt,name=bio_element,json=bioElement,proto3" json:"bio_element,omitempty"`
	// Original Profile Pic Extension
	OriginalProfilePicExtension *OriginalProfilePicExtensionElement `protobuf:"bytes,101,opt,name=original_profile_pic_extension,json=originalProfilePicExtension,proto3" json:"original_profile_pic_extension,omitempty"`
	// Background Pic Extension
	BackgroundProfilePicExtension *BackgroundProfilePicExtensionElement `protobuf:"bytes,102,opt,name=background_profile_pic_extension,json=backgroundProfilePicExtension,proto3" json:"background_profile_pic_extension,omitempty"`
	// Maximum Group Size
	MaxGroupSizeElement *MaxGroupSizeElement `protobuf:"bytes,103,opt,name=max_group_size_element,json=maxGroupSizeElement,proto3" json:"max_group_size_element,omitempty"`
	// Is public group admin tipping enabled for a group
	// DEPRECATED TODO Will be made redundant/removed after all clients switch to kin_group_feature_enabled_element
	//
	// Deprecated: Marked as deprecated in entity/v1/entity_common.proto.
	KinEnabledElement *KinEnabledElement `protobuf:"bytes,104,opt,name=kin_enabled_element,json=kinEnabledElement,proto3" json:"kin_enabled_element,omitempty"`
	// Are one or more Kin group features enabled for a group
	KinGroupFeatureEnabledElement *KinGroupFeatureEnabledElement `protobuf:"bytes,105,opt,name=kin_group_feature_enabled_element,json=kinGroupFeatureEnabledElement,proto3" json:"kin_group_feature_enabled_element,omitempty"`
}

func (x *EntityGroup) Reset() {
	*x = EntityGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v1_entity_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityGroup) ProtoMessage() {}

func (x *EntityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v1_entity_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityGroup.ProtoReflect.Descriptor instead.
func (*EntityGroup) Descriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{1}
}

func (x *EntityGroup) GetId() *_go.XiGroupJid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityGroup) GetBioElement() *BioElement {
	if x != nil {
		return x.BioElement
	}
	return nil
}

func (x *EntityGroup) GetOriginalProfilePicExtension() *OriginalProfilePicExtensionElement {
	if x != nil {
		return x.OriginalProfilePicExtension
	}
	return nil
}

func (x *EntityGroup) GetBackgroundProfilePicExtension() *BackgroundProfilePicExtensionElement {
	if x != nil {
		return x.BackgroundProfilePicExtension
	}
	return nil
}

func (x *EntityGroup) GetMaxGroupSizeElement() *MaxGroupSizeElement {
	if x != nil {
		return x.MaxGroupSizeElement
	}
	return nil
}

// Deprecated: Marked as deprecated in entity/v1/entity_common.proto.
func (x *EntityGroup) GetKinEnabledElement() *KinEnabledElement {
	if x != nil {
		return x.KinEnabledElement
	}
	return nil
}

func (x *EntityGroup) GetKinGroupFeatureEnabledElement() *KinGroupFeatureEnabledElement {
	if x != nil {
		return x.KinGroupFeatureEnabledElement
	}
	return nil
}

type EntityUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Use tag number range of [100-199] for elements sourced from profile service
	BioElement *BioElement `protobuf:"bytes,100,opt,name=bio_element,json=bioElement,proto3" json:"bio_element,omitempty"`
	// Original Profile Pic Extension
	OriginalProfilePicExtension *OriginalProfilePicExtensionElement `protobuf:"bytes,101,opt,name=original_profile_pic_extension,json=originalProfilePicExtension,proto3" json:"original_profile_pic_extension,omitempty"`
	// Background Pic Extension
	BackgroundProfilePicExtension *BackgroundProfilePicExtensionElement `protobuf:"bytes,102,opt,name=background_profile_pic_extension,json=backgroundProfilePicExtension,proto3" json:"background_profile_pic_extension,omitempty"`
	// Registration Element for user
	RegistrationElement *RegistrationElement `protobuf:"bytes,103,opt,name=registration_element,json=registrationElement,proto3" json:"registration_element,omitempty"`
	// User Interests Element
	InterestsElement *InterestsElement `protobuf:"bytes,104,opt,name=interests_element,json=interestsElement,proto3" json:"interests_element,omitempty"`
	// Anon Match Avatar Element
	AnonMatchAvatarElement *AnonMatchAvatarElement `protobuf:"bytes,105,opt,name=anon_match_avatar_element,json=anonMatchAvatarElement,proto3" json:"anon_match_avatar_element,omitempty"`
	// Kin User ID Element
	KinUserIdElement *KinUserIdElement `protobuf:"bytes,107,opt,name=kin_user_id_element,json=kinUserIdElement,proto3" json:"kin_user_id_element,omitempty"`
}

func (x *EntityUser) Reset() {
	*x = EntityUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v1_entity_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityUser) ProtoMessage() {}

func (x *EntityUser) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v1_entity_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityUser.ProtoReflect.Descriptor instead.
func (*EntityUser) Descriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{2}
}

func (x *EntityUser) GetId() *_go.XiBareUserJid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityUser) GetBioElement() *BioElement {
	if x != nil {
		return x.BioElement
	}
	return nil
}

func (x *EntityUser) GetOriginalProfilePicExtension() *OriginalProfilePicExtensionElement {
	if x != nil {
		return x.OriginalProfilePicExtension
	}
	return nil
}

func (x *EntityUser) GetBackgroundProfilePicExtension() *BackgroundProfilePicExtensionElement {
	if x != nil {
		return x.BackgroundProfilePicExtension
	}
	return nil
}

func (x *EntityUser) GetRegistrationElement() *RegistrationElement {
	if x != nil {
		return x.RegistrationElement
	}
	return nil
}

func (x *EntityUser) GetInterestsElement() *InterestsElement {
	if x != nil {
		return x.InterestsElement
	}
	return nil
}

func (x *EntityUser) GetAnonMatchAvatarElement() *AnonMatchAvatarElement {
	if x != nil {
		return x.AnonMatchAvatarElement
	}
	return nil
}

func (x *EntityUser) GetKinUserIdElement() *KinUserIdElement {
	if x != nil {
		return x.KinUserIdElement
	}
	return nil
}

// Entity containing information of a single user that is broadcasted to his/her rosters.
type EntityUserRosterEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *_go.XiBareUserJid  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EmojiStatusElement *EmojiStatusElement `protobuf:"bytes,2,opt,name=emoji_status_element,json=emojiStatusElement,proto3" json:"emoji_status_element,omitempty"`
	Username           *UsernameElement    `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	DisplayName        *DisplayNameElement `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ProfilePic         *ProfilePicElement  `protobuf:"bytes,5,opt,name=profile_pic,json=profilePic,proto3" json:"profile_pic,omitempty"`
	// The presence of this element indicates that this User is a bot, regardless of the element's content; Regular Users will never have this element.
	BotExtension *BotExtensionElement `protobuf:"bytes,6,opt,name=bot_extension,json=botExtension,proto3" json:"bot_extension,omitempty"`
}

func (x *EntityUserRosterEntry) Reset() {
	*x = EntityUserRosterEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v1_entity_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityUserRosterEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityUserRosterEntry) ProtoMessage() {}

func (x *EntityUserRosterEntry) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v1_entity_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityUserRosterEntry.ProtoReflect.Descriptor instead.
func (*EntityUserRosterEntry) Descriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{3}
}

func (x *EntityUserRosterEntry) GetId() *_go.XiBareUserJid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityUserRosterEntry) GetEmojiStatusElement() *EmojiStatusElement {
	if x != nil {
		return x.EmojiStatusElement
	}
	return nil
}

func (x *EntityUserRosterEntry) GetUsername() *UsernameElement {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *EntityUserRosterEntry) GetDisplayName() *DisplayNameElement {
	if x != nil {
		return x.DisplayName
	}
	return nil
}

func (x *EntityUserRosterEntry) GetProfilePic() *ProfilePicElement {
	if x != nil {
		return x.ProfilePic
	}
	return nil
}

func (x *EntityUserRosterEntry) GetBotExtension() *BotExtensionElement {
	if x != nil {
		return x.BotExtension
	}
	return nil
}

// Entity containing information of group that is broadcast to its members' rosters.
type EntityGroupRosterEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *_go.XiGroupJid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Public *PublicElement  `protobuf:"bytes,2,opt,name=public,proto3" json:"public,omitempty"`
	// Hashtag for the group
	GroupCode     *GroupCodeElement       `protobuf:"bytes,3,opt,name=group_code,json=groupCode,proto3" json:"group_code,omitempty"`
	GroupName     *GroupNameElement       `protobuf:"bytes,4,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	ProfilePic    *ProfilePicElement      `protobuf:"bytes,5,opt,name=profile_pic,json=profilePic,proto3" json:"profile_pic,omitempty"`
	Members       *GroupMemberListElement `protobuf:"bytes,6,opt,name=members,proto3" json:"members,omitempty"`
	LastUpdatedTs *timestamp.Timestamp    `protobuf:"bytes,7,opt,name=last_updated_ts,json=lastUpdatedTs,proto3" json:"last_updated_ts,omitempty"`
}

func (x *EntityGroupRosterEntry) Reset() {
	*x = EntityGroupRosterEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v1_entity_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityGroupRosterEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityGroupRosterEntry) ProtoMessage() {}

func (x *EntityGroupRosterEntry) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v1_entity_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityGroupRosterEntry.ProtoReflect.Descriptor instead.
func (*EntityGroupRosterEntry) Descriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{4}
}

func (x *EntityGroupRosterEntry) GetId() *_go.XiGroupJid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityGroupRosterEntry) GetPublic() *PublicElement {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *EntityGroupRosterEntry) GetGroupCode() *GroupCodeElement {
	if x != nil {
		return x.GroupCode
	}
	return nil
}

func (x *EntityGroupRosterEntry) GetGroupName() *GroupNameElement {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *EntityGroupRosterEntry) GetProfilePic() *ProfilePicElement {
	if x != nil {
		return x.ProfilePic
	}
	return nil
}

func (x *EntityGroupRosterEntry) GetMembers() *GroupMemberListElement {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *EntityGroupRosterEntry) GetLastUpdatedTs() *timestamp.Timestamp {
	if x != nil {
		return x.LastUpdatedTs
	}
	return nil
}

type EntityBot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *_go.XiBareUserJid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Use tag number range of [100-199] for elements sourced from profile service
	BioElement *BioElement `protobuf:"bytes,100,opt,name=bio_element,json=bioElement,proto3" json:"bio_element,omitempty"`
	// Original Profile Pic Extension
	OriginalProfilePicExtension *OriginalProfilePicExtensionElement `protobuf:"bytes,101,opt,name=original_profile_pic_extension,json=originalProfilePicExtension,proto3" json:"original_profile_pic_extension,omitempty"`
	// Background Pic Extension
	BackgroundProfilePicExtension *BackgroundProfilePicExtensionElement `protobuf:"bytes,102,opt,name=background_profile_pic_extension,json=backgroundProfilePicExtension,proto3" json:"background_profile_pic_extension,omitempty"`
	// Registration Element for bot
	RegistrationElement *RegistrationElement `protobuf:"bytes,103,opt,name=registration_element,json=registrationElement,proto3" json:"registration_element,omitempty"`
	// Byline for a bot
	BylineElement *BylineElement `protobuf:"bytes,200,opt,name=byline_element,json=bylineElement,proto3" json:"byline_element,omitempty"`
	// Rating information for the bot
	RatingSummary *RatingSummary `protobuf:"bytes,201,opt,name=rating_summary,json=ratingSummary,proto3" json:"rating_summary,omitempty"`
	// Is the bot trusted
	Trusted *TrustedElement `protobuf:"bytes,202,opt,name=trusted,proto3" json:"trusted,omitempty"`
}

func (x *EntityBot) Reset() {
	*x = EntityBot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v1_entity_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityBot) ProtoMessage() {}

func (x *EntityBot) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v1_entity_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityBot.ProtoReflect.Descriptor instead.
func (*EntityBot) Descriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{5}
}

func (x *EntityBot) GetId() *_go.XiBareUserJid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityBot) GetBioElement() *BioElement {
	if x != nil {
		return x.BioElement
	}
	return nil
}

func (x *EntityBot) GetOriginalProfilePicExtension() *OriginalProfilePicExtensionElement {
	if x != nil {
		return x.OriginalProfilePicExtension
	}
	return nil
}

func (x *EntityBot) GetBackgroundProfilePicExtension() *BackgroundProfilePicExtensionElement {
	if x != nil {
		return x.BackgroundProfilePicExtension
	}
	return nil
}

func (x *EntityBot) GetRegistrationElement() *RegistrationElement {
	if x != nil {
		return x.RegistrationElement
	}
	return nil
}

func (x *EntityBot) GetBylineElement() *BylineElement {
	if x != nil {
		return x.BylineElement
	}
	return nil
}

func (x *EntityBot) GetRatingSummary() *RatingSummary {
	if x != nil {
		return x.RatingSummary
	}
	return nil
}

func (x *EntityBot) GetTrusted() *TrustedElement {
	if x != nil {
		return x.Trusted
	}
	return nil
}

type EntityConvo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *v1.XiConvoId         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChatThemeElement     *ChatThemeElement     `protobuf:"bytes,100,opt,name=chat_theme_element,json=chatThemeElement,proto3" json:"chat_theme_element,omitempty"`
	ChatThemeLockElement *ChatThemeLockElement `protobuf:"bytes,101,opt,name=chat_theme_lock_element,json=chatThemeLockElement,proto3" json:"chat_theme_lock_element,omitempty"`
}

func (x *EntityConvo) Reset() {
	*x = EntityConvo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v1_entity_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityConvo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityConvo) ProtoMessage() {}

func (x *EntityConvo) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v1_entity_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityConvo.ProtoReflect.Descriptor instead.
func (*EntityConvo) Descriptor() ([]byte, []int) {
	return file_entity_v1_entity_common_proto_rawDescGZIP(), []int{6}
}

func (x *EntityConvo) GetId() *v1.XiConvoId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EntityConvo) GetChatThemeElement() *ChatThemeElement {
	if x != nil {
		return x.ChatThemeElement
	}
	return nil
}

func (x *EntityConvo) GetChatThemeLockElement() *ChatThemeLockElement {
	if x != nil {
		return x.ChatThemeLockElement
	}
	return nil
}

var File_entity_v1_entity_common_proto protoreflect.FileDescriptor

var file_entity_v1_entity_common_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65,
	0x79, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69,
	0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6a, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x76, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x76, 0x6f, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x6a, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x4a, 0x69, 0x64, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4a,
	0x69, 0x64, 0x22, 0x72, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x4e, 0x56, 0x4f, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x10, 0x05, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xa4, 0x05, 0x0a,
	0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x58, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x6f,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1e, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x7a, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x57, 0x0a, 0x13, 0x6b, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x6b, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x21, 0x6b, 0x69, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1d, 0x6b, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xd9, 0x05, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6f, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x79, 0x0a, 0x1e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1b,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x20, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1d, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x14,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x19, 0x61, 0x6e, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x61, 0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x13,
	0x6b, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6b,
	0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xb8, 0x03, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58,
	0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x14, 0x65, 0x6d, 0x6f, 0x6a,
	0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x12, 0x4a,
	0x0a, 0x0d, 0x62, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x62, 0x6f,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x03, 0x0a, 0x16, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x58, 0x69, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4a, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x69, 0x63, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x22, 0x9e,
	0x05, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x74, 0x12, 0x2d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x58, 0x69, 0x42, 0x61, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x69, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x62,
	0x69, 0x6f, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x62, 0x69, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1e, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x69, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x69, 0x63, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x47, 0x0a, 0x0e, 0x62, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x62, 0x79, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0xca, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x22,
	0xe4, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x12,
	0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x69, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x14, 0x63, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x68, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69,
	0x6b, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x47,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69,
	0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31,
	0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xa0, 0x01, 0x01, 0xa2, 0x02, 0x03, 0x45, 0x4e, 0x54,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_entity_v1_entity_common_proto_rawDescOnce sync.Once
	file_entity_v1_entity_common_proto_rawDescData = file_entity_v1_entity_common_proto_rawDesc
)

func file_entity_v1_entity_common_proto_rawDescGZIP() []byte {
	file_entity_v1_entity_common_proto_rawDescOnce.Do(func() {
		file_entity_v1_entity_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_entity_v1_entity_common_proto_rawDescData)
	})
	return file_entity_v1_entity_common_proto_rawDescData
}

var file_entity_v1_entity_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_entity_v1_entity_common_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_entity_v1_entity_common_proto_goTypes = []interface{}{
	(EntityKey_EntityType)(0),                    // 0: common.entity.v1.EntityKey.EntityType
	(*EntityKey)(nil),                            // 1: common.entity.v1.EntityKey
	(*EntityGroup)(nil),                          // 2: common.entity.v1.EntityGroup
	(*EntityUser)(nil),                           // 3: common.entity.v1.EntityUser
	(*EntityUserRosterEntry)(nil),                // 4: common.entity.v1.EntityUserRosterEntry
	(*EntityGroupRosterEntry)(nil),               // 5: common.entity.v1.EntityGroupRosterEntry
	(*EntityBot)(nil),                            // 6: common.entity.v1.EntityBot
	(*EntityConvo)(nil),                          // 7: common.entity.v1.EntityConvo
	(*_go.XiBareUserJid)(nil),                    // 8: common.XiBareUserJid
	(*_go.XiGroupJid)(nil),                       // 9: common.XiGroupJid
	(*v1.XiConvoId)(nil),                         // 10: common.v1.XiConvoId
	(*v1.XiAliasJid)(nil),                        // 11: common.v1.XiAliasJid
	(*BioElement)(nil),                           // 12: common.entity.v1.BioElement
	(*OriginalProfilePicExtensionElement)(nil),   // 13: common.entity.v1.OriginalProfilePicExtensionElement
	(*BackgroundProfilePicExtensionElement)(nil), // 14: common.entity.v1.BackgroundProfilePicExtensionElement
	(*MaxGroupSizeElement)(nil),                  // 15: common.entity.v1.MaxGroupSizeElement
	(*KinEnabledElement)(nil),                    // 16: common.entity.v1.KinEnabledElement
	(*KinGroupFeatureEnabledElement)(nil),        // 17: common.entity.v1.KinGroupFeatureEnabledElement
	(*RegistrationElement)(nil),                  // 18: common.entity.v1.RegistrationElement
	(*InterestsElement)(nil),                     // 19: common.entity.v1.InterestsElement
	(*AnonMatchAvatarElement)(nil),               // 20: common.entity.v1.AnonMatchAvatarElement
	(*KinUserIdElement)(nil),                     // 21: common.entity.v1.KinUserIdElement
	(*EmojiStatusElement)(nil),                   // 22: common.entity.v1.EmojiStatusElement
	(*UsernameElement)(nil),                      // 23: common.entity.v1.UsernameElement
	(*DisplayNameElement)(nil),                   // 24: common.entity.v1.DisplayNameElement
	(*ProfilePicElement)(nil),                    // 25: common.entity.v1.ProfilePicElement
	(*BotExtensionElement)(nil),                  // 26: common.entity.v1.BotExtensionElement
	(*PublicElement)(nil),                        // 27: common.entity.v1.PublicElement
	(*GroupCodeElement)(nil),                     // 28: common.entity.v1.GroupCodeElement
	(*GroupNameElement)(nil),                     // 29: common.entity.v1.GroupNameElement
	(*GroupMemberListElement)(nil),               // 30: common.entity.v1.GroupMemberListElement
	(*timestamp.Timestamp)(nil),                  // 31: google.protobuf.Timestamp
	(*BylineElement)(nil),                        // 32: common.entity.v1.BylineElement
	(*RatingSummary)(nil),                        // 33: common.entity.v1.RatingSummary
	(*TrustedElement)(nil),                       // 34: common.entity.v1.TrustedElement
	(*ChatThemeElement)(nil),                     // 35: common.entity.v1.ChatThemeElement
	(*ChatThemeLockElement)(nil),                 // 36: common.entity.v1.ChatThemeLockElement
}
var file_entity_v1_entity_common_proto_depIdxs = []int32{
	0,  // 0: common.entity.v1.EntityKey.type:type_name -> common.entity.v1.EntityKey.EntityType
	8,  // 1: common.entity.v1.EntityKey.user_jid:type_name -> common.XiBareUserJid
	9,  // 2: common.entity.v1.EntityKey.group_jid:type_name -> common.XiGroupJid
	10, // 3: common.entity.v1.EntityKey.convo_id:type_name -> common.v1.XiConvoId
	11, // 4: common.entity.v1.EntityKey.alias_jid:type_name -> common.v1.XiAliasJid
	9,  // 5: common.entity.v1.EntityGroup.id:type_name -> common.XiGroupJid
	12, // 6: common.entity.v1.EntityGroup.bio_element:type_name -> common.entity.v1.BioElement
	13, // 7: common.entity.v1.EntityGroup.original_profile_pic_extension:type_name -> common.entity.v1.OriginalProfilePicExtensionElement
	14, // 8: common.entity.v1.EntityGroup.background_profile_pic_extension:type_name -> common.entity.v1.BackgroundProfilePicExtensionElement
	15, // 9: common.entity.v1.EntityGroup.max_group_size_element:type_name -> common.entity.v1.MaxGroupSizeElement
	16, // 10: common.entity.v1.EntityGroup.kin_enabled_element:type_name -> common.entity.v1.KinEnabledElement
	17, // 11: common.entity.v1.EntityGroup.kin_group_feature_enabled_element:type_name -> common.entity.v1.KinGroupFeatureEnabledElement
	8,  // 12: common.entity.v1.EntityUser.id:type_name -> common.XiBareUserJid
	12, // 13: common.entity.v1.EntityUser.bio_element:type_name -> common.entity.v1.BioElement
	13, // 14: common.entity.v1.EntityUser.original_profile_pic_extension:type_name -> common.entity.v1.OriginalProfilePicExtensionElement
	14, // 15: common.entity.v1.EntityUser.background_profile_pic_extension:type_name -> common.entity.v1.BackgroundProfilePicExtensionElement
	18, // 16: common.entity.v1.EntityUser.registration_element:type_name -> common.entity.v1.RegistrationElement
	19, // 17: common.entity.v1.EntityUser.interests_element:type_name -> common.entity.v1.InterestsElement
	20, // 18: common.entity.v1.EntityUser.anon_match_avatar_element:type_name -> common.entity.v1.AnonMatchAvatarElement
	21, // 19: common.entity.v1.EntityUser.kin_user_id_element:type_name -> common.entity.v1.KinUserIdElement
	8,  // 20: common.entity.v1.EntityUserRosterEntry.id:type_name -> common.XiBareUserJid
	22, // 21: common.entity.v1.EntityUserRosterEntry.emoji_status_element:type_name -> common.entity.v1.EmojiStatusElement
	23, // 22: common.entity.v1.EntityUserRosterEntry.username:type_name -> common.entity.v1.UsernameElement
	24, // 23: common.entity.v1.EntityUserRosterEntry.display_name:type_name -> common.entity.v1.DisplayNameElement
	25, // 24: common.entity.v1.EntityUserRosterEntry.profile_pic:type_name -> common.entity.v1.ProfilePicElement
	26, // 25: common.entity.v1.EntityUserRosterEntry.bot_extension:type_name -> common.entity.v1.BotExtensionElement
	9,  // 26: common.entity.v1.EntityGroupRosterEntry.id:type_name -> common.XiGroupJid
	27, // 27: common.entity.v1.EntityGroupRosterEntry.public:type_name -> common.entity.v1.PublicElement
	28, // 28: common.entity.v1.EntityGroupRosterEntry.group_code:type_name -> common.entity.v1.GroupCodeElement
	29, // 29: common.entity.v1.EntityGroupRosterEntry.group_name:type_name -> common.entity.v1.GroupNameElement
	25, // 30: common.entity.v1.EntityGroupRosterEntry.profile_pic:type_name -> common.entity.v1.ProfilePicElement
	30, // 31: common.entity.v1.EntityGroupRosterEntry.members:type_name -> common.entity.v1.GroupMemberListElement
	31, // 32: common.entity.v1.EntityGroupRosterEntry.last_updated_ts:type_name -> google.protobuf.Timestamp
	8,  // 33: common.entity.v1.EntityBot.id:type_name -> common.XiBareUserJid
	12, // 34: common.entity.v1.EntityBot.bio_element:type_name -> common.entity.v1.BioElement
	13, // 35: common.entity.v1.EntityBot.original_profile_pic_extension:type_name -> common.entity.v1.OriginalProfilePicExtensionElement
	14, // 36: common.entity.v1.EntityBot.background_profile_pic_extension:type_name -> common.entity.v1.BackgroundProfilePicExtensionElement
	18, // 37: common.entity.v1.EntityBot.registration_element:type_name -> common.entity.v1.RegistrationElement
	32, // 38: common.entity.v1.EntityBot.byline_element:type_name -> common.entity.v1.BylineElement
	33, // 39: common.entity.v1.EntityBot.rating_summary:type_name -> common.entity.v1.RatingSummary
	34, // 40: common.entity.v1.EntityBot.trusted:type_name -> common.entity.v1.TrustedElement
	10, // 41: common.entity.v1.EntityConvo.id:type_name -> common.v1.XiConvoId
	35, // 42: common.entity.v1.EntityConvo.chat_theme_element:type_name -> common.entity.v1.ChatThemeElement
	36, // 43: common.entity.v1.EntityConvo.chat_theme_lock_element:type_name -> common.entity.v1.ChatThemeLockElement
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_entity_v1_entity_common_proto_init() }
func file_entity_v1_entity_common_proto_init() {
	if File_entity_v1_entity_common_proto != nil {
		return
	}
	file_entity_v1_element_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_entity_v1_entity_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entity_v1_entity_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entity_v1_entity_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entity_v1_entity_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityUserRosterEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entity_v1_entity_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityGroupRosterEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entity_v1_entity_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityBot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entity_v1_entity_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityConvo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_entity_v1_entity_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EntityKey_UserJid)(nil),
		(*EntityKey_GroupJid)(nil),
		(*EntityKey_ConvoId)(nil),
		(*EntityKey_AliasJid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entity_v1_entity_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_entity_v1_entity_common_proto_goTypes,
		DependencyIndexes: file_entity_v1_entity_common_proto_depIdxs,
		EnumInfos:         file_entity_v1_entity_common_proto_enumTypes,
		MessageInfos:      file_entity_v1_entity_common_proto_msgTypes,
	}.Build()
	File_entity_v1_entity_common_proto = out.File
	file_entity_v1_entity_common_proto_rawDesc = nil
	file_entity_v1_entity_common_proto_goTypes = nil
	file_entity_v1_entity_common_proto_depIdxs = nil
}
