// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: messagepath/v1/webrtc_video.proto

package messagepath

import (
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/video/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Attachment indicating that there has been an update to a certain video conference
// This is used so that classic clients can parse the status message when a conference is initiated and proceed
// to fetch the contents to update their session locally.
// The attachments are completely unrelated with the Vidyo implementation of video chat.
type VideoConferenceUpdateAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*VideoConferenceUpdateAttachment_VideoConferenceStarted_
	//	*VideoConferenceUpdateAttachment_VideoConferenceTerminated_
	//	*VideoConferenceUpdateAttachment_VideoConferenceMissed_
	Kind isVideoConferenceUpdateAttachment_Kind `protobuf_oneof:"kind"`
}

func (x *VideoConferenceUpdateAttachment) Reset() {
	*x = VideoConferenceUpdateAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConferenceUpdateAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConferenceUpdateAttachment) ProtoMessage() {}

func (x *VideoConferenceUpdateAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConferenceUpdateAttachment.ProtoReflect.Descriptor instead.
func (*VideoConferenceUpdateAttachment) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_webrtc_video_proto_rawDescGZIP(), []int{0}
}

func (m *VideoConferenceUpdateAttachment) GetKind() isVideoConferenceUpdateAttachment_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *VideoConferenceUpdateAttachment) GetVideoConferenceStarted() *VideoConferenceUpdateAttachment_VideoConferenceStarted {
	if x, ok := x.GetKind().(*VideoConferenceUpdateAttachment_VideoConferenceStarted_); ok {
		return x.VideoConferenceStarted
	}
	return nil
}

func (x *VideoConferenceUpdateAttachment) GetVideoConferenceTerminated() *VideoConferenceUpdateAttachment_VideoConferenceTerminated {
	if x, ok := x.GetKind().(*VideoConferenceUpdateAttachment_VideoConferenceTerminated_); ok {
		return x.VideoConferenceTerminated
	}
	return nil
}

func (x *VideoConferenceUpdateAttachment) GetVideoConferenceMissed() *VideoConferenceUpdateAttachment_VideoConferenceMissed {
	if x, ok := x.GetKind().(*VideoConferenceUpdateAttachment_VideoConferenceMissed_); ok {
		return x.VideoConferenceMissed
	}
	return nil
}

type isVideoConferenceUpdateAttachment_Kind interface {
	isVideoConferenceUpdateAttachment_Kind()
}

type VideoConferenceUpdateAttachment_VideoConferenceStarted_ struct {
	VideoConferenceStarted *VideoConferenceUpdateAttachment_VideoConferenceStarted `protobuf:"bytes,1,opt,name=video_conference_started,json=videoConferenceStarted,proto3,oneof"`
}

type VideoConferenceUpdateAttachment_VideoConferenceTerminated_ struct {
	VideoConferenceTerminated *VideoConferenceUpdateAttachment_VideoConferenceTerminated `protobuf:"bytes,2,opt,name=video_conference_terminated,json=videoConferenceTerminated,proto3,oneof"`
}

type VideoConferenceUpdateAttachment_VideoConferenceMissed_ struct {
	VideoConferenceMissed *VideoConferenceUpdateAttachment_VideoConferenceMissed `protobuf:"bytes,3,opt,name=video_conference_missed,json=videoConferenceMissed,proto3,oneof"`
}

func (*VideoConferenceUpdateAttachment_VideoConferenceStarted_) isVideoConferenceUpdateAttachment_Kind() {
}

func (*VideoConferenceUpdateAttachment_VideoConferenceTerminated_) isVideoConferenceUpdateAttachment_Kind() {
}

func (*VideoConferenceUpdateAttachment_VideoConferenceMissed_) isVideoConferenceUpdateAttachment_Kind() {
}

// Indicates that the specified session has been updated and the receiving client can fetch it.
// When starting a conference, this attachment will only be included in the message for the receiver.
type VideoConferenceUpdateAttachment_VideoConferenceStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat ID that the receiving clients can use to determine the chat ID without calling GetChatId on the
	// video conference service.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// ID of the conference that has been started
	VideoConferenceId *v21.VideoConferenceId `protobuf:"bytes,2,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceStarted) Reset() {
	*x = VideoConferenceUpdateAttachment_VideoConferenceStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConferenceUpdateAttachment_VideoConferenceStarted) ProtoMessage() {}

func (x *VideoConferenceUpdateAttachment_VideoConferenceStarted) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConferenceUpdateAttachment_VideoConferenceStarted.ProtoReflect.Descriptor instead.
func (*VideoConferenceUpdateAttachment_VideoConferenceStarted) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_webrtc_video_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceStarted) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceStarted) GetVideoConferenceId() *v21.VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

// Indicates that the specified session has been closed by either client.
type VideoConferenceUpdateAttachment_VideoConferenceTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat ID that the receiving client can use to determine the chat ID without calling GetChatId on the
	// video conference service.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// ID of the conference that has been terminated
	VideoConferenceId *v21.VideoConferenceId `protobuf:"bytes,2,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceTerminated) Reset() {
	*x = VideoConferenceUpdateAttachment_VideoConferenceTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConferenceUpdateAttachment_VideoConferenceTerminated) ProtoMessage() {}

func (x *VideoConferenceUpdateAttachment_VideoConferenceTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConferenceUpdateAttachment_VideoConferenceTerminated.ProtoReflect.Descriptor instead.
func (*VideoConferenceUpdateAttachment_VideoConferenceTerminated) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_webrtc_video_proto_rawDescGZIP(), []int{0, 1}
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceTerminated) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceTerminated) GetVideoConferenceId() *v21.VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

// Indicates that the specified session was terminated and the receiving user never joined.
// This message should only be sent to the receiving user, while the initiating user should get a
// VideoConferenceTerminated attachment instead.
type VideoConferenceUpdateAttachment_VideoConferenceMissed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chat ID that the receiving client can use to determine the chat ID without calling GetChatId on the
	// video conference service.
	ChatId *v2.ChatId `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	// ID of the conference that has been missed
	VideoConferenceId *v21.VideoConferenceId `protobuf:"bytes,2,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceMissed) Reset() {
	*x = VideoConferenceUpdateAttachment_VideoConferenceMissed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceMissed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoConferenceUpdateAttachment_VideoConferenceMissed) ProtoMessage() {}

func (x *VideoConferenceUpdateAttachment_VideoConferenceMissed) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_webrtc_video_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoConferenceUpdateAttachment_VideoConferenceMissed.ProtoReflect.Descriptor instead.
func (*VideoConferenceUpdateAttachment_VideoConferenceMissed) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_webrtc_video_proto_rawDescGZIP(), []int{0, 2}
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceMissed) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *VideoConferenceUpdateAttachment_VideoConferenceMissed) GetVideoConferenceId() *v21.VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

var File_messagepath_v1_webrtc_video_proto protoreflect.FileDescriptor

var file_messagepath_v1_webrtc_video_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x32, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd6, 0x07, 0x0a, 0x1f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x1b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x19, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x1a, 0xa8, 0x01, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x5a, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xab, 0x01, 0x0a, 0x19,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a,
	0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xa7, 0x01, 0x0a, 0x15, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x75, 0x0a, 0x19, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78,
	0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x3b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0xa2, 0x02, 0x04, 0x4d, 0x50,
	0x54, 0x48, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messagepath_v1_webrtc_video_proto_rawDescOnce sync.Once
	file_messagepath_v1_webrtc_video_proto_rawDescData = file_messagepath_v1_webrtc_video_proto_rawDesc
)

func file_messagepath_v1_webrtc_video_proto_rawDescGZIP() []byte {
	file_messagepath_v1_webrtc_video_proto_rawDescOnce.Do(func() {
		file_messagepath_v1_webrtc_video_proto_rawDescData = protoimpl.X.CompressGZIP(file_messagepath_v1_webrtc_video_proto_rawDescData)
	})
	return file_messagepath_v1_webrtc_video_proto_rawDescData
}

var file_messagepath_v1_webrtc_video_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_messagepath_v1_webrtc_video_proto_goTypes = []interface{}{
	(*VideoConferenceUpdateAttachment)(nil),                           // 0: common.messagepath.v1.VideoConferenceUpdateAttachment
	(*VideoConferenceUpdateAttachment_VideoConferenceStarted)(nil),    // 1: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceStarted
	(*VideoConferenceUpdateAttachment_VideoConferenceTerminated)(nil), // 2: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceTerminated
	(*VideoConferenceUpdateAttachment_VideoConferenceMissed)(nil),     // 3: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceMissed
	(*v2.ChatId)(nil),             // 4: common.v2.ChatId
	(*v21.VideoConferenceId)(nil), // 5: common.video.v2.VideoConferenceId
}
var file_messagepath_v1_webrtc_video_proto_depIdxs = []int32{
	1, // 0: common.messagepath.v1.VideoConferenceUpdateAttachment.video_conference_started:type_name -> common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceStarted
	2, // 1: common.messagepath.v1.VideoConferenceUpdateAttachment.video_conference_terminated:type_name -> common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceTerminated
	3, // 2: common.messagepath.v1.VideoConferenceUpdateAttachment.video_conference_missed:type_name -> common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceMissed
	4, // 3: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceStarted.chat_id:type_name -> common.v2.ChatId
	5, // 4: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceStarted.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	4, // 5: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceTerminated.chat_id:type_name -> common.v2.ChatId
	5, // 6: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceTerminated.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	4, // 7: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceMissed.chat_id:type_name -> common.v2.ChatId
	5, // 8: common.messagepath.v1.VideoConferenceUpdateAttachment.VideoConferenceMissed.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_messagepath_v1_webrtc_video_proto_init() }
func file_messagepath_v1_webrtc_video_proto_init() {
	if File_messagepath_v1_webrtc_video_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messagepath_v1_webrtc_video_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConferenceUpdateAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_webrtc_video_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConferenceUpdateAttachment_VideoConferenceStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_webrtc_video_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConferenceUpdateAttachment_VideoConferenceTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messagepath_v1_webrtc_video_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoConferenceUpdateAttachment_VideoConferenceMissed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messagepath_v1_webrtc_video_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*VideoConferenceUpdateAttachment_VideoConferenceStarted_)(nil),
		(*VideoConferenceUpdateAttachment_VideoConferenceTerminated_)(nil),
		(*VideoConferenceUpdateAttachment_VideoConferenceMissed_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messagepath_v1_webrtc_video_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messagepath_v1_webrtc_video_proto_goTypes,
		DependencyIndexes: file_messagepath_v1_webrtc_video_proto_depIdxs,
		MessageInfos:      file_messagepath_v1_webrtc_video_proto_msgTypes,
	}.Build()
	File_messagepath_v1_webrtc_video_proto = out.File
	file_messagepath_v1_webrtc_video_proto_rawDesc = nil
	file_messagepath_v1_webrtc_video_proto_goTypes = nil
	file_messagepath_v1_webrtc_video_proto_depIdxs = nil
}
