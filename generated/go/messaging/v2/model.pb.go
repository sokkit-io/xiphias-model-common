// EXPERIMENTAL: The definitions here are experimental and subject to change at
// any moment. They are pulled in from the kikx branch, which should be used as
// the source of truth for any Kikx work. These appear in master to unblock work
// on legacy systems.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: messaging/v2/model.proto

package messaging

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v21 "github.com/sokkit-io/xiphias-model-common/generated/go/blob/v2"
	v2 "github.com/sokkit-io/xiphias-model-common/generated/go/common/v2"
	v24 "github.com/sokkit-io/xiphias-model-common/generated/go/contactlist/v2"
	v25 "github.com/sokkit-io/xiphias-model-common/generated/go/groups/v2"
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	v23 "github.com/sokkit-io/xiphias-model-common/generated/go/kin/payment/v2"
	v27 "github.com/sokkit-io/xiphias-model-common/generated/go/matching/v2"
	v22 "github.com/sokkit-io/xiphias-model-common/generated/go/persona/v2"
	v26 "github.com/sokkit-io/xiphias-model-common/generated/go/video/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message_Origin int32

const (
	// Standard user-generated message
	Message_USER Message_Origin = 0
	// Server-generated message (i.e. "system-message")
	// NOTE: Clients are not permitted to send messages specifying this origin
	Message_SERVER Message_Origin = 1
	// Bot-generated message
	// NOTE: Clients are not permitted to send messages specifying this origin
	Message_BOT Message_Origin = 2
)

// Enum value maps for Message_Origin.
var (
	Message_Origin_name = map[int32]string{
		0: "USER",
		1: "SERVER",
		2: "BOT",
	}
	Message_Origin_value = map[string]int32{
		"USER":   0,
		"SERVER": 1,
		"BOT":    2,
	}
)

func (x Message_Origin) Enum() *Message_Origin {
	p := new(Message_Origin)
	*p = x
	return p
}

func (x Message_Origin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Message_Origin) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[0].Descriptor()
}

func (Message_Origin) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[0]
}

func (x Message_Origin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Message_Origin.Descriptor instead.
func (Message_Origin) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 0}
}

type Pointer_Type int32

const (
	Pointer_PUSHED    Pointer_Type = 0
	Pointer_DELIVERED Pointer_Type = 1
	Pointer_READ      Pointer_Type = 2
)

// Enum value maps for Pointer_Type.
var (
	Pointer_Type_name = map[int32]string{
		0: "PUSHED",
		1: "DELIVERED",
		2: "READ",
	}
	Pointer_Type_value = map[string]int32{
		"PUSHED":    0,
		"DELIVERED": 1,
		"READ":      2,
	}
)

func (x Pointer_Type) Enum() *Pointer_Type {
	p := new(Pointer_Type)
	*p = x
	return p
}

func (x Pointer_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pointer_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[1].Descriptor()
}

func (Pointer_Type) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[1]
}

func (x Pointer_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pointer_Type.Descriptor instead.
func (Pointer_Type) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{1, 0}
}

type ImagePreview_ImageType int32

const (
	ImagePreview_JPEG ImagePreview_ImageType = 0
	ImagePreview_PNG  ImagePreview_ImageType = 1
)

// Enum value maps for ImagePreview_ImageType.
var (
	ImagePreview_ImageType_name = map[int32]string{
		0: "JPEG",
		1: "PNG",
	}
	ImagePreview_ImageType_value = map[string]int32{
		"JPEG": 0,
		"PNG":  1,
	}
)

func (x ImagePreview_ImageType) Enum() *ImagePreview_ImageType {
	p := new(ImagePreview_ImageType)
	*p = x
	return p
}

func (x ImagePreview_ImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImagePreview_ImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[2].Descriptor()
}

func (ImagePreview_ImageType) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[2]
}

func (x ImagePreview_ImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImagePreview_ImageType.Descriptor instead.
func (ImagePreview_ImageType) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{4, 0}
}

type Link_Target_Type int32

const (
	Link_Target_DEFAULT Link_Target_Type = 0
	Link_Target_IOS     Link_Target_Type = 1
	Link_Target_ANDROID Link_Target_Type = 2
	Link_Target_WEB     Link_Target_Type = 3 // legacy cards platform
)

// Enum value maps for Link_Target_Type.
var (
	Link_Target_Type_name = map[int32]string{
		0: "DEFAULT",
		1: "IOS",
		2: "ANDROID",
		3: "WEB",
	}
	Link_Target_Type_value = map[string]int32{
		"DEFAULT": 0,
		"IOS":     1,
		"ANDROID": 2,
		"WEB":     3,
	}
)

func (x Link_Target_Type) Enum() *Link_Target_Type {
	p := new(Link_Target_Type)
	*p = x
	return p
}

func (x Link_Target_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Link_Target_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[3].Descriptor()
}

func (Link_Target_Type) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[3]
}

func (x Link_Target_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Link_Target_Type.Descriptor instead.
func (Link_Target_Type) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{5, 0, 0}
}

type ChatEvent_GroupMemberAdd_InviteVia int32

const (
	// User joined by finding the group and self-inviting (i.e. no inviter)
	ChatEvent_GroupMemberAdd_NOT_SPECIFIED ChatEvent_GroupMemberAdd_InviteVia = 0
	// User(s) were directly added to the group by inviter.
	ChatEvent_GroupMemberAdd_DIRECT_ADD ChatEvent_GroupMemberAdd_InviteVia = 1
	// User joined via an invite link generated by the inviter.
	ChatEvent_GroupMemberAdd_INVITE_CODE ChatEvent_GroupMemberAdd_InviteVia = 2
	// User joined via a scan code for the group, generated by the inviter.
	ChatEvent_GroupMemberAdd_SCAN_CODE ChatEvent_GroupMemberAdd_InviteVia = 3
)

// Enum value maps for ChatEvent_GroupMemberAdd_InviteVia.
var (
	ChatEvent_GroupMemberAdd_InviteVia_name = map[int32]string{
		0: "NOT_SPECIFIED",
		1: "DIRECT_ADD",
		2: "INVITE_CODE",
		3: "SCAN_CODE",
	}
	ChatEvent_GroupMemberAdd_InviteVia_value = map[string]int32{
		"NOT_SPECIFIED": 0,
		"DIRECT_ADD":    1,
		"INVITE_CODE":   2,
		"SCAN_CODE":     3,
	}
)

func (x ChatEvent_GroupMemberAdd_InviteVia) Enum() *ChatEvent_GroupMemberAdd_InviteVia {
	p := new(ChatEvent_GroupMemberAdd_InviteVia)
	*p = x
	return p
}

func (x ChatEvent_GroupMemberAdd_InviteVia) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatEvent_GroupMemberAdd_InviteVia) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[4].Descriptor()
}

func (ChatEvent_GroupMemberAdd_InviteVia) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[4]
}

func (x ChatEvent_GroupMemberAdd_InviteVia) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatEvent_GroupMemberAdd_InviteVia.Descriptor instead.
func (ChatEvent_GroupMemberAdd_InviteVia) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 1, 0}
}

type ChatEvent_GroupMemberPromote_PromotionStatus int32

const (
	ChatEvent_GroupMemberPromote_ADMIN ChatEvent_GroupMemberPromote_PromotionStatus = 0
	ChatEvent_GroupMemberPromote_OWNER ChatEvent_GroupMemberPromote_PromotionStatus = 1
)

// Enum value maps for ChatEvent_GroupMemberPromote_PromotionStatus.
var (
	ChatEvent_GroupMemberPromote_PromotionStatus_name = map[int32]string{
		0: "ADMIN",
		1: "OWNER",
	}
	ChatEvent_GroupMemberPromote_PromotionStatus_value = map[string]int32{
		"ADMIN": 0,
		"OWNER": 1,
	}
)

func (x ChatEvent_GroupMemberPromote_PromotionStatus) Enum() *ChatEvent_GroupMemberPromote_PromotionStatus {
	p := new(ChatEvent_GroupMemberPromote_PromotionStatus)
	*p = x
	return p
}

func (x ChatEvent_GroupMemberPromote_PromotionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatEvent_GroupMemberPromote_PromotionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[5].Descriptor()
}

func (ChatEvent_GroupMemberPromote_PromotionStatus) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[5]
}

func (x ChatEvent_GroupMemberPromote_PromotionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatEvent_GroupMemberPromote_PromotionStatus.Descriptor instead.
func (ChatEvent_GroupMemberPromote_PromotionStatus) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 7, 0}
}

type ChatEvent_ChatInfoChange_ChangedFeature_Feature int32

const (
	ChatEvent_ChatInfoChange_ChangedFeature_DISPLAY_NAME ChatEvent_ChatInfoChange_ChangedFeature_Feature = 0
	ChatEvent_ChatInfoChange_ChangedFeature_PROFILE_PIC  ChatEvent_ChatInfoChange_ChangedFeature_Feature = 1
	ChatEvent_ChatInfoChange_ChangedFeature_BIO          ChatEvent_ChatInfoChange_ChangedFeature_Feature = 2
	ChatEvent_ChatInfoChange_ChangedFeature_THEME        ChatEvent_ChatInfoChange_ChangedFeature_Feature = 3
	ChatEvent_ChatInfoChange_ChangedFeature_THEME_LOCK   ChatEvent_ChatInfoChange_ChangedFeature_Feature = 4 // TODO: other features?
)

// Enum value maps for ChatEvent_ChatInfoChange_ChangedFeature_Feature.
var (
	ChatEvent_ChatInfoChange_ChangedFeature_Feature_name = map[int32]string{
		0: "DISPLAY_NAME",
		1: "PROFILE_PIC",
		2: "BIO",
		3: "THEME",
		4: "THEME_LOCK",
	}
	ChatEvent_ChatInfoChange_ChangedFeature_Feature_value = map[string]int32{
		"DISPLAY_NAME": 0,
		"PROFILE_PIC":  1,
		"BIO":          2,
		"THEME":        3,
		"THEME_LOCK":   4,
	}
)

func (x ChatEvent_ChatInfoChange_ChangedFeature_Feature) Enum() *ChatEvent_ChatInfoChange_ChangedFeature_Feature {
	p := new(ChatEvent_ChatInfoChange_ChangedFeature_Feature)
	*p = x
	return p
}

func (x ChatEvent_ChatInfoChange_ChangedFeature_Feature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatEvent_ChatInfoChange_ChangedFeature_Feature) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[6].Descriptor()
}

func (ChatEvent_ChatInfoChange_ChangedFeature_Feature) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[6]
}

func (x ChatEvent_ChatInfoChange_ChangedFeature_Feature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatEvent_ChatInfoChange_ChangedFeature_Feature.Descriptor instead.
func (ChatEvent_ChatInfoChange_ChangedFeature_Feature) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 9, 0, 0}
}

type ChatEvent_AnonymousMatchFound_MatchType int32

const (
	ChatEvent_AnonymousMatchFound_QUICK    ChatEvent_AnonymousMatchFound_MatchType = 0
	ChatEvent_AnonymousMatchFound_INTEREST ChatEvent_AnonymousMatchFound_MatchType = 1
)

// Enum value maps for ChatEvent_AnonymousMatchFound_MatchType.
var (
	ChatEvent_AnonymousMatchFound_MatchType_name = map[int32]string{
		0: "QUICK",
		1: "INTEREST",
	}
	ChatEvent_AnonymousMatchFound_MatchType_value = map[string]int32{
		"QUICK":    0,
		"INTEREST": 1,
	}
)

func (x ChatEvent_AnonymousMatchFound_MatchType) Enum() *ChatEvent_AnonymousMatchFound_MatchType {
	p := new(ChatEvent_AnonymousMatchFound_MatchType)
	*p = x
	return p
}

func (x ChatEvent_AnonymousMatchFound_MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatEvent_AnonymousMatchFound_MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_v2_model_proto_enumTypes[7].Descriptor()
}

func (ChatEvent_AnonymousMatchFound_MatchType) Type() protoreflect.EnumType {
	return &file_messaging_v2_model_proto_enumTypes[7]
}

func (x ChatEvent_AnonymousMatchFound_MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatEvent_AnonymousMatchFound_MatchType.Descriptor instead.
func (ChatEvent_AnonymousMatchFound_MatchType) EnumDescriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 18, 0}
}

// Message represents a message. For now, it only includes the bare minimum
// for message routing / MLSM model. A fully defined message model still needs
// to be defined (initial work was started multiple times).
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: ID will be constructed in such a way that ID(M_n) < ID(M_n+1), where
	// n is the order in the underlying message log (as seen by server). If time
	// was a universal truth, and servers had 100% accuracy, ID(M_n) would be the
	// time that the server inserted it into the log.
	//
	// The comparison of two ID's is defined as the lexicographical comparison
	// of the raw_value's.
	//
	// The ID(M_n) < ID(M_n+1) invariant is the _only_ assumption that can be
	// made about the ID. The comparator is a lexical sort.
	//
	// IDs are _only_ gaurenteed to be unique within a given Chat. Collisions can
	// (and will) occure cross-chats. For example, upgrading a 1:1 -> Group chat
	// results in a log copy, which (intentionally) retains the IDs.
	Id *Message_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ClientMessageID is the client generated message ID, which is used
	// for deduplicating messages. It should not be used for ordering, or
	// global uniqueness.
	//
	// In certain scenarios, a message can be sent, persisted, and propagated
	// through the messaging system, but due to network conditions, or other
	// failure modes, the client may see a non OK result. Therefore, they
	// will believe the message was not sent, and will continue retrying.
	//
	// In other scenarios, the client may see the message they've sent
	// appear on the message stream before they get the OK response. In
	// this situation, they won't know that the message they've just seen
	// is the one they're waiting for the OK, which results in a double
	// message (albeit only locally).
	//
	// The ClientMessageID should be tied to the context of the sender.
	// That is, if two senders send the same ClientMessageID, they should
	// not be de-duped.
	ClientMessageId *Message_Id    `protobuf:"bytes,9,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	ChatId          *v2.ChatId     `protobuf:"bytes,2,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Origin          Message_Origin `protobuf:"varint,7,opt,name=origin,proto3,enum=common.messaging.v2.Message_Origin" json:"origin,omitempty"`
	// Sender is the user which created the message.
	// For regular messages with Origin = USER, this field is MANDATORY.
	// For system messages with Origin = SERVER, this field must remain empty.
	// For bot messages with Origin = BOT, this field is always the bot's genesis persona
	Sender *v2.PersonaId `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	// Only used for rendering purposes.
	ClientSent *timestamp.Timestamp `protobuf:"bytes,4,opt,name=client_sent,json=clientSent,proto3" json:"client_sent,omitempty"`
	// Content of the message to be displayed.
	//
	// NOTE: If a ChatEvent is specified below, and that event is understood, the client should generate
	//       message content based on the event instead of using this content.  In such a case, this
	//       content serves as a default message if the chat event's type is not understood.
	Content *Message_Content `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	// Optional Chat-specific metadata included when the kik server processes generate a message.
	// This ChatEvent defines further context details about some action or response that has taken place
	// within the context of the chat that the message was posted to.
	//
	// NOTE: ChatEvent metadata may only be provided by a server-generated message.  Messages created by clients
	//       which contain a ChatEvent are considered invalid and should be treated as such.
	//
	// Clients that receive a message containing a ChatEvent and are familiar with the ChatEvent kind
	// should generate their own localized text in the chat rather than using the 'content' field of the message.
	// "Legacy" clients (clients NOT familiar with the event type) should use the message 'content' field as a
	// fallback, which will be a simple english description of the event.
	ChatEvent *ChatEvent `protobuf:"bytes,8,opt,name=chat_event,json=chatEvent,proto3" json:"chat_event,omitempty"`
	// A message can contain multiple keyboards that are targetted to different
	// users. However, server will filter keyboards on the client's behalf and
	// guarantees that at most one keyboard is received per user.
	Keyboards []*Keyboard `protobuf:"bytes,100,rep,name=keyboards,proto3" json:"keyboards,omitempty"`
	// An optional field indicating the bot that should be mentioned for this message.
	// This should always be a genesis persona.
	MentionedBot *v2.PersonaId `protobuf:"bytes,101,opt,name=mentioned_bot,json=mentionedBot,proto3" json:"mentioned_bot,omitempty"`
	// An optional field indicating the original user that initiated the bot
	// mention exchange within the conversation. This is primarily used for
	// visiblity and block rules so users cannot message via proxy of the bot.
	// This may only be set if Origin = BOT
	BotMentionInitiator *v2.PersonaId `protobuf:"bytes,102,opt,name=bot_mention_initiator,json=botMentionInitiator,proto3" json:"bot_mention_initiator,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetId() *Message_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Message) GetClientMessageId() *Message_Id {
	if x != nil {
		return x.ClientMessageId
	}
	return nil
}

func (x *Message) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *Message) GetOrigin() Message_Origin {
	if x != nil {
		return x.Origin
	}
	return Message_USER
}

func (x *Message) GetSender() *v2.PersonaId {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Message) GetClientSent() *timestamp.Timestamp {
	if x != nil {
		return x.ClientSent
	}
	return nil
}

func (x *Message) GetContent() *Message_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Message) GetChatEvent() *ChatEvent {
	if x != nil {
		return x.ChatEvent
	}
	return nil
}

func (x *Message) GetKeyboards() []*Keyboard {
	if x != nil {
		return x.Keyboards
	}
	return nil
}

func (x *Message) GetMentionedBot() *v2.PersonaId {
	if x != nil {
		return x.MentionedBot
	}
	return nil
}

func (x *Message) GetBotMentionInitiator() *v2.PersonaId {
	if x != nil {
		return x.BotMentionInitiator
	}
	return nil
}

type Pointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatId    *v2.ChatId    `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	MessageId *Message_Id   `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	PersonaId *v2.PersonaId `protobuf:"bytes,3,opt,name=persona_id,json=personaId,proto3" json:"persona_id,omitempty"`
	Type      Pointer_Type  `protobuf:"varint,4,opt,name=type,proto3,enum=common.messaging.v2.Pointer_Type" json:"type,omitempty"`
}

func (x *Pointer) Reset() {
	*x = Pointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pointer) ProtoMessage() {}

func (x *Pointer) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pointer.ProtoReflect.Descriptor instead.
func (*Pointer) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{1}
}

func (x *Pointer) GetChatId() *v2.ChatId {
	if x != nil {
		return x.ChatId
	}
	return nil
}

func (x *Pointer) GetMessageId() *Message_Id {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *Pointer) GetPersonaId() *v2.PersonaId {
	if x != nil {
		return x.PersonaId
	}
	return nil
}

func (x *Pointer) GetType() Pointer_Type {
	if x != nil {
		return x.Type
	}
	return Pointer_PUSHED
}

// Keyboard defines how clients should render the input space on the screen.
type Keyboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user that will render the keyboard. If this field is missing, then
	// all participants should render it.
	//
	// The messaging servers will guarantee that keyboards targetting a
	// particular user will not be viewable by any other participant of
	// a chat.
	Receiver *v2.PersonaId `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Determines the priority of this keyboard with respect to the system
	// default keyboard. If this is true, then the system default keyboard
	// should be viewed with an option to toggle to this keyboard and vice
	// versa.
	PreferSystem bool `protobuf:"varint,2,opt,name=prefer_system,json=preferSystem,proto3" json:"prefer_system,omitempty"`
	// Types that are assignable to Kind:
	//	*Keyboard_SuggestedResponse_
	Kind isKeyboard_Kind `protobuf_oneof:"Kind"`
}

func (x *Keyboard) Reset() {
	*x = Keyboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyboard) ProtoMessage() {}

func (x *Keyboard) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyboard.ProtoReflect.Descriptor instead.
func (*Keyboard) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{2}
}

func (x *Keyboard) GetReceiver() *v2.PersonaId {
	if x != nil {
		return x.Receiver
	}
	return nil
}

func (x *Keyboard) GetPreferSystem() bool {
	if x != nil {
		return x.PreferSystem
	}
	return false
}

func (m *Keyboard) GetKind() isKeyboard_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Keyboard) GetSuggestedResponse() *Keyboard_SuggestedResponse {
	if x, ok := x.GetKind().(*Keyboard_SuggestedResponse_); ok {
		return x.SuggestedResponse
	}
	return nil
}

type isKeyboard_Kind interface {
	isKeyboard_Kind()
}

type Keyboard_SuggestedResponse_ struct {
	SuggestedResponse *Keyboard_SuggestedResponse `protobuf:"bytes,32,opt,name=suggested_response,json=suggestedResponse,proto3,oneof"`
}

func (*Keyboard_SuggestedResponse_) isKeyboard_Kind() {}

// RenderableText can be applied in many locations to annotate a string
// for display to the user. This standardizes the display of links, smileys,
// and mentions so that they can be consistently applied across message
// fields
type RenderableText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text               string                              `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	RenderInstructions []*RenderableText_RenderInstruction `protobuf:"bytes,2,rep,name=render_instructions,json=renderInstructions,proto3" json:"render_instructions,omitempty"`
}

func (x *RenderableText) Reset() {
	*x = RenderableText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderableText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderableText) ProtoMessage() {}

func (x *RenderableText) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderableText.ProtoReflect.Descriptor instead.
func (*RenderableText) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{3}
}

func (x *RenderableText) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RenderableText) GetRenderInstructions() []*RenderableText_RenderInstruction {
	if x != nil {
		return x.RenderInstructions
	}
	return nil
}

// ImagePreview wraps a preview image for display. The properties of the image are
// expanded into the body of this message to allow the client to display a lighter
// weight preview color or ensure the correct aspect ratio before the image can
// be fully loaded
type ImagePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageType ImagePreview_ImageType `protobuf:"varint,1,opt,name=image_type,json=imageType,proto3,enum=common.messaging.v2.ImagePreview_ImageType" json:"image_type,omitempty"`
	// Image data is not mandatory and can be excluded, such as in cases where
	// server receives invalid data (currently possible from classic Clients).
	// The preview should be treated as an image filled with the preview color
	// in this case.
	ImageData []byte `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	// A 32-bit ARGB-encoded color that clients can use to "prefill" the image
	// area with before loading the image_data.
	PreviewColor uint32 `protobuf:"varint,3,opt,name=preview_color,json=previewColor,proto3" json:"preview_color,omitempty"`
	// Defined as width px / height px of the full-size image.
	//
	// This aspect ratio is strictly for the preview. This bound should be
	// imposed on client side as well. Images that cannot be transformed into
	// this range of aspect ratios will not have an image preview.
	AspectRatio float64 `protobuf:"fixed64,4,opt,name=aspect_ratio,json=aspectRatio,proto3" json:"aspect_ratio,omitempty"`
}

func (x *ImagePreview) Reset() {
	*x = ImagePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePreview) ProtoMessage() {}

func (x *ImagePreview) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePreview.ProtoReflect.Descriptor instead.
func (*ImagePreview) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{4}
}

func (x *ImagePreview) GetImageType() ImagePreview_ImageType {
	if x != nil {
		return x.ImageType
	}
	return ImagePreview_JPEG
}

func (x *ImagePreview) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *ImagePreview) GetPreviewColor() uint32 {
	if x != nil {
		return x.PreviewColor
	}
	return 0
}

func (x *ImagePreview) GetAspectRatio() float64 {
	if x != nil {
		return x.AspectRatio
	}
	return 0
}

// Link represents a URL which can be launched from within the app with filtering
// rules which dictate which platforms can launch which kinds of links. A platform
// will launch the first target which applies to the given platform, for the order
// in the targets list
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []*Link_Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{5}
}

func (x *Link) GetTargets() []*Link_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

// Optional Chat-specific metadata included when a kik service generates a message to inform clients about an
// action or event that has taken place.
// This ChatEvent defines further context details about some action or response that has taken place
// within the context of the chat that the message was posted to.
//
// NOTE: ChatEvent metadata may only be provided by a server-generated message.  Messages created by clients
//
//	which contain a ChatEvent are considered invalid and should be treated as such.
//
// Clients that receive this a message containing a ChatEvent and are familiar with the ChatEvent kind
// should generate their own localized text in the chat rather than using the 'content' field of the message.
// "Legacy" clients (clients NOT familiar with the event type) should use the message 'content' field as a
// fallback, which will be a simple english description of the event.
type ChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*ChatEvent_GroupCreate_
	//	*ChatEvent_GroupAdd
	//	*ChatEvent_GroupLeave
	//	*ChatEvent_GroupRemove
	//	*ChatEvent_GroupRemoveToTarget
	//	*ChatEvent_GroupBan_
	//	*ChatEvent_GroupUnban_
	//	*ChatEvent_GroupPromote
	//	*ChatEvent_GroupDemote
	//	*ChatEvent_ChatInfoChange_
	//	*ChatEvent_MessageTipNotification_
	//	*ChatEvent_FriendshipNotice_
	//	*ChatEvent_InactiveParticipant_
	//	*ChatEvent_GroupInviteNotice_
	//	*ChatEvent_ScannedKikCodeNotice_
	//	*ChatEvent_VideoConferenceStarted_
	//	*ChatEvent_VideoConferenceMissed_
	//	*ChatEvent_VideoConferenceTerminated_
	//	*ChatEvent_AnonMatchFound
	//	*ChatEvent_AnonChatEnded
	Kind isChatEvent_Kind `protobuf_oneof:"kind"`
}

func (x *ChatEvent) Reset() {
	*x = ChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent) ProtoMessage() {}

func (x *ChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent.ProtoReflect.Descriptor instead.
func (*ChatEvent) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6}
}

func (m *ChatEvent) GetKind() isChatEvent_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ChatEvent) GetGroupCreate() *ChatEvent_GroupCreate {
	if x, ok := x.GetKind().(*ChatEvent_GroupCreate_); ok {
		return x.GroupCreate
	}
	return nil
}

func (x *ChatEvent) GetGroupAdd() *ChatEvent_GroupMemberAdd {
	if x, ok := x.GetKind().(*ChatEvent_GroupAdd); ok {
		return x.GroupAdd
	}
	return nil
}

func (x *ChatEvent) GetGroupLeave() *ChatEvent_GroupMemberLeave {
	if x, ok := x.GetKind().(*ChatEvent_GroupLeave); ok {
		return x.GroupLeave
	}
	return nil
}

func (x *ChatEvent) GetGroupRemove() *ChatEvent_GroupMemberRemove {
	if x, ok := x.GetKind().(*ChatEvent_GroupRemove); ok {
		return x.GroupRemove
	}
	return nil
}

func (x *ChatEvent) GetGroupRemoveToTarget() *ChatEvent_GroupMemberRemoveToTarget {
	if x, ok := x.GetKind().(*ChatEvent_GroupRemoveToTarget); ok {
		return x.GroupRemoveToTarget
	}
	return nil
}

func (x *ChatEvent) GetGroupBan() *ChatEvent_GroupBan {
	if x, ok := x.GetKind().(*ChatEvent_GroupBan_); ok {
		return x.GroupBan
	}
	return nil
}

func (x *ChatEvent) GetGroupUnban() *ChatEvent_GroupUnban {
	if x, ok := x.GetKind().(*ChatEvent_GroupUnban_); ok {
		return x.GroupUnban
	}
	return nil
}

func (x *ChatEvent) GetGroupPromote() *ChatEvent_GroupMemberPromote {
	if x, ok := x.GetKind().(*ChatEvent_GroupPromote); ok {
		return x.GroupPromote
	}
	return nil
}

func (x *ChatEvent) GetGroupDemote() *ChatEvent_GroupMemberDemote {
	if x, ok := x.GetKind().(*ChatEvent_GroupDemote); ok {
		return x.GroupDemote
	}
	return nil
}

func (x *ChatEvent) GetChatInfoChange() *ChatEvent_ChatInfoChange {
	if x, ok := x.GetKind().(*ChatEvent_ChatInfoChange_); ok {
		return x.ChatInfoChange
	}
	return nil
}

func (x *ChatEvent) GetMessageTipNotification() *ChatEvent_MessageTipNotification {
	if x, ok := x.GetKind().(*ChatEvent_MessageTipNotification_); ok {
		return x.MessageTipNotification
	}
	return nil
}

func (x *ChatEvent) GetFriendshipNotice() *ChatEvent_FriendshipNotice {
	if x, ok := x.GetKind().(*ChatEvent_FriendshipNotice_); ok {
		return x.FriendshipNotice
	}
	return nil
}

func (x *ChatEvent) GetInactiveParticipant() *ChatEvent_InactiveParticipant {
	if x, ok := x.GetKind().(*ChatEvent_InactiveParticipant_); ok {
		return x.InactiveParticipant
	}
	return nil
}

func (x *ChatEvent) GetGroupInviteNotice() *ChatEvent_GroupInviteNotice {
	if x, ok := x.GetKind().(*ChatEvent_GroupInviteNotice_); ok {
		return x.GroupInviteNotice
	}
	return nil
}

func (x *ChatEvent) GetScannedKikCodeNotice() *ChatEvent_ScannedKikCodeNotice {
	if x, ok := x.GetKind().(*ChatEvent_ScannedKikCodeNotice_); ok {
		return x.ScannedKikCodeNotice
	}
	return nil
}

func (x *ChatEvent) GetVideoConferenceStarted() *ChatEvent_VideoConferenceStarted {
	if x, ok := x.GetKind().(*ChatEvent_VideoConferenceStarted_); ok {
		return x.VideoConferenceStarted
	}
	return nil
}

func (x *ChatEvent) GetVideoConferenceMissed() *ChatEvent_VideoConferenceMissed {
	if x, ok := x.GetKind().(*ChatEvent_VideoConferenceMissed_); ok {
		return x.VideoConferenceMissed
	}
	return nil
}

func (x *ChatEvent) GetVideoConferenceTerminated() *ChatEvent_VideoConferenceTerminated {
	if x, ok := x.GetKind().(*ChatEvent_VideoConferenceTerminated_); ok {
		return x.VideoConferenceTerminated
	}
	return nil
}

func (x *ChatEvent) GetAnonMatchFound() *ChatEvent_AnonymousMatchFound {
	if x, ok := x.GetKind().(*ChatEvent_AnonMatchFound); ok {
		return x.AnonMatchFound
	}
	return nil
}

func (x *ChatEvent) GetAnonChatEnded() *ChatEvent_AnonymousChatEnded {
	if x, ok := x.GetKind().(*ChatEvent_AnonChatEnded); ok {
		return x.AnonChatEnded
	}
	return nil
}

type isChatEvent_Kind interface {
	isChatEvent_Kind()
}

type ChatEvent_GroupCreate_ struct {
	// 1-999: Events for Group Chats
	GroupCreate *ChatEvent_GroupCreate `protobuf:"bytes,1,opt,name=group_create,json=groupCreate,proto3,oneof"`
}

type ChatEvent_GroupAdd struct {
	GroupAdd *ChatEvent_GroupMemberAdd `protobuf:"bytes,2,opt,name=group_add,json=groupAdd,proto3,oneof"`
}

type ChatEvent_GroupLeave struct {
	GroupLeave *ChatEvent_GroupMemberLeave `protobuf:"bytes,3,opt,name=group_leave,json=groupLeave,proto3,oneof"`
}

type ChatEvent_GroupRemove struct {
	// GroupMemberRemove is the version of a "user kicked" event sent to the remaining active group members.
	GroupRemove *ChatEvent_GroupMemberRemove `protobuf:"bytes,4,opt,name=group_remove,json=groupRemove,proto3,oneof"`
}

type ChatEvent_GroupRemoveToTarget struct {
	// GroupMemberRemoveToTarget is the version of a "user kicked" event sent to the target of the removal.
	GroupRemoveToTarget *ChatEvent_GroupMemberRemoveToTarget `protobuf:"bytes,5,opt,name=group_remove_to_target,json=groupRemoveToTarget,proto3,oneof"`
}

type ChatEvent_GroupBan_ struct {
	// GroupBan is an event intended for informing the remaining active members of a group of the ban.
	// NOTE: If the GroupBan action also caused a member removal, only the GroupBan event will be sent.
	GroupBan *ChatEvent_GroupBan `protobuf:"bytes,6,opt,name=group_ban,json=groupBan,proto3,oneof"`
}

type ChatEvent_GroupUnban_ struct {
	GroupUnban *ChatEvent_GroupUnban `protobuf:"bytes,7,opt,name=group_unban,json=groupUnban,proto3,oneof"`
}

type ChatEvent_GroupPromote struct {
	GroupPromote *ChatEvent_GroupMemberPromote `protobuf:"bytes,8,opt,name=group_promote,json=groupPromote,proto3,oneof"`
}

type ChatEvent_GroupDemote struct {
	GroupDemote *ChatEvent_GroupMemberDemote `protobuf:"bytes,9,opt,name=group_demote,json=groupDemote,proto3,oneof"`
}

type ChatEvent_ChatInfoChange_ struct {
	// 1000-1999: Events for any kind of chat.
	// ChatInfoChange is used for any chat-specific settings change.  eg: display name, ppic, theme, etc.
	ChatInfoChange *ChatEvent_ChatInfoChange `protobuf:"bytes,1000,opt,name=chat_info_change,json=chatInfoChange,proto3,oneof"`
}

type ChatEvent_MessageTipNotification_ struct {
	// Notification for a message tip
	MessageTipNotification *ChatEvent_MessageTipNotification `protobuf:"bytes,1001,opt,name=message_tip_notification,json=messageTipNotification,proto3,oneof"`
}

type ChatEvent_FriendshipNotice_ struct {
	// 2000-2999 Events for One-On-One chats
	FriendshipNotice *ChatEvent_FriendshipNotice `protobuf:"bytes,2000,opt,name=friendship_notice,json=friendshipNotice,proto3,oneof"`
}

type ChatEvent_InactiveParticipant_ struct {
	InactiveParticipant *ChatEvent_InactiveParticipant `protobuf:"bytes,2001,opt,name=inactive_participant,json=inactiveParticipant,proto3,oneof"`
}

type ChatEvent_GroupInviteNotice_ struct {
	GroupInviteNotice *ChatEvent_GroupInviteNotice `protobuf:"bytes,2002,opt,name=group_invite_notice,json=groupInviteNotice,proto3,oneof"`
}

type ChatEvent_ScannedKikCodeNotice_ struct {
	ScannedKikCodeNotice *ChatEvent_ScannedKikCodeNotice `protobuf:"bytes,2003,opt,name=scanned_kik_code_notice,json=scannedKikCodeNotice,proto3,oneof"`
}

type ChatEvent_VideoConferenceStarted_ struct {
	// 3000-3999 Events for video chat
	VideoConferenceStarted *ChatEvent_VideoConferenceStarted `protobuf:"bytes,3000,opt,name=video_conference_started,json=videoConferenceStarted,proto3,oneof"`
}

type ChatEvent_VideoConferenceMissed_ struct {
	VideoConferenceMissed *ChatEvent_VideoConferenceMissed `protobuf:"bytes,3001,opt,name=video_conference_missed,json=videoConferenceMissed,proto3,oneof"`
}

type ChatEvent_VideoConferenceTerminated_ struct {
	VideoConferenceTerminated *ChatEvent_VideoConferenceTerminated `protobuf:"bytes,3002,opt,name=video_conference_terminated,json=videoConferenceTerminated,proto3,oneof"`
}

type ChatEvent_AnonMatchFound struct {
	// 4000-4999 Events for anonymous chat
	AnonMatchFound *ChatEvent_AnonymousMatchFound `protobuf:"bytes,4000,opt,name=anon_match_found,json=anonMatchFound,proto3,oneof"`
}

type ChatEvent_AnonChatEnded struct {
	AnonChatEnded *ChatEvent_AnonymousChatEnded `protobuf:"bytes,4001,opt,name=anon_chat_ended,json=anonChatEnded,proto3,oneof"`
}

func (*ChatEvent_GroupCreate_) isChatEvent_Kind() {}

func (*ChatEvent_GroupAdd) isChatEvent_Kind() {}

func (*ChatEvent_GroupLeave) isChatEvent_Kind() {}

func (*ChatEvent_GroupRemove) isChatEvent_Kind() {}

func (*ChatEvent_GroupRemoveToTarget) isChatEvent_Kind() {}

func (*ChatEvent_GroupBan_) isChatEvent_Kind() {}

func (*ChatEvent_GroupUnban_) isChatEvent_Kind() {}

func (*ChatEvent_GroupPromote) isChatEvent_Kind() {}

func (*ChatEvent_GroupDemote) isChatEvent_Kind() {}

func (*ChatEvent_ChatInfoChange_) isChatEvent_Kind() {}

func (*ChatEvent_MessageTipNotification_) isChatEvent_Kind() {}

func (*ChatEvent_FriendshipNotice_) isChatEvent_Kind() {}

func (*ChatEvent_InactiveParticipant_) isChatEvent_Kind() {}

func (*ChatEvent_GroupInviteNotice_) isChatEvent_Kind() {}

func (*ChatEvent_ScannedKikCodeNotice_) isChatEvent_Kind() {}

func (*ChatEvent_VideoConferenceStarted_) isChatEvent_Kind() {}

func (*ChatEvent_VideoConferenceMissed_) isChatEvent_Kind() {}

func (*ChatEvent_VideoConferenceTerminated_) isChatEvent_Kind() {}

func (*ChatEvent_AnonMatchFound) isChatEvent_Kind() {}

func (*ChatEvent_AnonChatEnded) isChatEvent_Kind() {}

type Message_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue []byte `protobuf:"bytes,1,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`
}

func (x *Message_Id) Reset() {
	*x = Message_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Id) ProtoMessage() {}

func (x *Message_Id) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Id.ProtoReflect.Descriptor instead.
func (*Message_Id) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Message_Id) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

// The content of a message is the payload portion actually rendered for
// the sending and receiving user
type Message_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*Message_Content_Text_
	//	*Message_Content_GalleryPhoto_
	//	*Message_Content_CameraPhoto_
	//	*Message_Content_Platform_
	//	*Message_Content_GalleryVideo_
	//	*Message_Content_CameraVideo_
	//	*Message_Content_Gif_
	//	*Message_Content_Sticker_
	//	*Message_Content_SelectedSuggestedResponse_
	Kind isMessage_Content_Kind `protobuf_oneof:"kind"`
}

func (x *Message_Content) Reset() {
	*x = Message_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content) ProtoMessage() {}

func (x *Message_Content) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content.ProtoReflect.Descriptor instead.
func (*Message_Content) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Message_Content) GetKind() isMessage_Content_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Message_Content) GetText() *Message_Content_Text {
	if x, ok := x.GetKind().(*Message_Content_Text_); ok {
		return x.Text
	}
	return nil
}

func (x *Message_Content) GetGalleryPhoto() *Message_Content_GalleryPhoto {
	if x, ok := x.GetKind().(*Message_Content_GalleryPhoto_); ok {
		return x.GalleryPhoto
	}
	return nil
}

func (x *Message_Content) GetCameraPhoto() *Message_Content_CameraPhoto {
	if x, ok := x.GetKind().(*Message_Content_CameraPhoto_); ok {
		return x.CameraPhoto
	}
	return nil
}

func (x *Message_Content) GetPlatform() *Message_Content_Platform {
	if x, ok := x.GetKind().(*Message_Content_Platform_); ok {
		return x.Platform
	}
	return nil
}

func (x *Message_Content) GetGalleryVideo() *Message_Content_GalleryVideo {
	if x, ok := x.GetKind().(*Message_Content_GalleryVideo_); ok {
		return x.GalleryVideo
	}
	return nil
}

func (x *Message_Content) GetCameraVideo() *Message_Content_CameraVideo {
	if x, ok := x.GetKind().(*Message_Content_CameraVideo_); ok {
		return x.CameraVideo
	}
	return nil
}

func (x *Message_Content) GetGif() *Message_Content_Gif {
	if x, ok := x.GetKind().(*Message_Content_Gif_); ok {
		return x.Gif
	}
	return nil
}

func (x *Message_Content) GetSticker() *Message_Content_Sticker {
	if x, ok := x.GetKind().(*Message_Content_Sticker_); ok {
		return x.Sticker
	}
	return nil
}

func (x *Message_Content) GetSelectedSuggestedResponse() *Message_Content_SelectedSuggestedResponse {
	if x, ok := x.GetKind().(*Message_Content_SelectedSuggestedResponse_); ok {
		return x.SelectedSuggestedResponse
	}
	return nil
}

type isMessage_Content_Kind interface {
	isMessage_Content_Kind()
}

type Message_Content_Text_ struct {
	Text *Message_Content_Text `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Message_Content_GalleryPhoto_ struct {
	GalleryPhoto *Message_Content_GalleryPhoto `protobuf:"bytes,2,opt,name=gallery_photo,json=galleryPhoto,proto3,oneof"`
}

type Message_Content_CameraPhoto_ struct {
	CameraPhoto *Message_Content_CameraPhoto `protobuf:"bytes,3,opt,name=camera_photo,json=cameraPhoto,proto3,oneof"`
}

type Message_Content_Platform_ struct {
	Platform *Message_Content_Platform `protobuf:"bytes,4,opt,name=platform,proto3,oneof"`
}

type Message_Content_GalleryVideo_ struct {
	GalleryVideo *Message_Content_GalleryVideo `protobuf:"bytes,5,opt,name=gallery_video,json=galleryVideo,proto3,oneof"`
}

type Message_Content_CameraVideo_ struct {
	CameraVideo *Message_Content_CameraVideo `protobuf:"bytes,6,opt,name=camera_video,json=cameraVideo,proto3,oneof"`
}

type Message_Content_Gif_ struct {
	Gif *Message_Content_Gif `protobuf:"bytes,7,opt,name=gif,proto3,oneof"`
}

type Message_Content_Sticker_ struct {
	Sticker *Message_Content_Sticker `protobuf:"bytes,8,opt,name=sticker,proto3,oneof"`
}

type Message_Content_SelectedSuggestedResponse_ struct {
	SelectedSuggestedResponse *Message_Content_SelectedSuggestedResponse `protobuf:"bytes,9,opt,name=selected_suggested_response,json=selectedSuggestedResponse,proto3,oneof"`
}

func (*Message_Content_Text_) isMessage_Content_Kind() {}

func (*Message_Content_GalleryPhoto_) isMessage_Content_Kind() {}

func (*Message_Content_CameraPhoto_) isMessage_Content_Kind() {}

func (*Message_Content_Platform_) isMessage_Content_Kind() {}

func (*Message_Content_GalleryVideo_) isMessage_Content_Kind() {}

func (*Message_Content_CameraVideo_) isMessage_Content_Kind() {}

func (*Message_Content_Gif_) isMessage_Content_Kind() {}

func (*Message_Content_Sticker_) isMessage_Content_Kind() {}

func (*Message_Content_SelectedSuggestedResponse_) isMessage_Content_Kind() {}

// A pure-text message including smiley rendering, links, etc.
type Message_Content_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenderableText *RenderableText `protobuf:"bytes,1,opt,name=renderable_text,json=renderableText,proto3" json:"renderable_text,omitempty"`
}

func (x *Message_Content_Text) Reset() {
	*x = Message_Content_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_Text) ProtoMessage() {}

func (x *Message_Content_Text) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_Text.ProtoReflect.Descriptor instead.
func (*Message_Content_Text) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Message_Content_Text) GetRenderableText() *RenderableText {
	if x != nil {
		return x.RenderableText
	}
	return nil
}

// A photo selected from the sending user's gallery, with the
// associated photo upload
type Message_Content_GalleryPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preview *ImagePreview      `protobuf:"bytes,1,opt,name=preview,proto3" json:"preview,omitempty"`
	Image   *v21.BlobReference `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Message_Content_GalleryPhoto) Reset() {
	*x = Message_Content_GalleryPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_GalleryPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_GalleryPhoto) ProtoMessage() {}

func (x *Message_Content_GalleryPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_GalleryPhoto.ProtoReflect.Descriptor instead.
func (*Message_Content_GalleryPhoto) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *Message_Content_GalleryPhoto) GetPreview() *ImagePreview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Message_Content_GalleryPhoto) GetImage() *v21.BlobReference {
	if x != nil {
		return x.Image
	}
	return nil
}

// A photo taken from the sending user's camera, with the associated
// photo upload
type Message_Content_CameraPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preview *ImagePreview      `protobuf:"bytes,1,opt,name=preview,proto3" json:"preview,omitempty"`
	Blob    *v21.BlobReference `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *Message_Content_CameraPhoto) Reset() {
	*x = Message_Content_CameraPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_CameraPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_CameraPhoto) ProtoMessage() {}

func (x *Message_Content_CameraPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_CameraPhoto.ProtoReflect.Descriptor instead.
func (*Message_Content_CameraPhoto) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *Message_Content_CameraPhoto) GetPreview() *ImagePreview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Message_Content_CameraPhoto) GetBlob() *v21.BlobReference {
	if x != nil {
		return x.Blob
	}
	return nil
}

// A video selecting from the sender user's gallery, with the
// associated video upload
type Message_Content_GalleryVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preview *ImagePreview      `protobuf:"bytes,1,opt,name=preview,proto3" json:"preview,omitempty"`
	Video   *v21.BlobReference `protobuf:"bytes,2,opt,name=video,proto3" json:"video,omitempty"`
}

func (x *Message_Content_GalleryVideo) Reset() {
	*x = Message_Content_GalleryVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_GalleryVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_GalleryVideo) ProtoMessage() {}

func (x *Message_Content_GalleryVideo) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_GalleryVideo.ProtoReflect.Descriptor instead.
func (*Message_Content_GalleryVideo) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 3}
}

func (x *Message_Content_GalleryVideo) GetPreview() *ImagePreview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Message_Content_GalleryVideo) GetVideo() *v21.BlobReference {
	if x != nil {
		return x.Video
	}
	return nil
}

// A video taken from the sending user's camera, with the associated
// video upload
type Message_Content_CameraVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preview *ImagePreview      `protobuf:"bytes,1,opt,name=preview,proto3" json:"preview,omitempty"`
	Blob    *v21.BlobReference `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
}

func (x *Message_Content_CameraVideo) Reset() {
	*x = Message_Content_CameraVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_CameraVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_CameraVideo) ProtoMessage() {}

func (x *Message_Content_CameraVideo) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_CameraVideo.ProtoReflect.Descriptor instead.
func (*Message_Content_CameraVideo) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 4}
}

func (x *Message_Content_CameraVideo) GetPreview() *ImagePreview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Message_Content_CameraVideo) GetBlob() *v21.BlobReference {
	if x != nil {
		return x.Blob
	}
	return nil
}

// A GIF message with a preview image for immediate rendering and a series of
// gif references which contain urls for various formats
// A GIF should always have at least a full size MP4 version, but may also include other formats that clients
// may or may not use, as well as smaller versions
type Message_Content_Gif struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preview *ImagePreview `protobuf:"bytes,1,opt,name=preview,proto3" json:"preview,omitempty"`
	// Reference to the GIF
	// This reference should always contain an original MP4 version, and may also contain preview versions of various formats (including MP4).
	Gif *v21.BlobReference `protobuf:"bytes,2,opt,name=gif,proto3" json:"gif,omitempty"`
}

func (x *Message_Content_Gif) Reset() {
	*x = Message_Content_Gif{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_Gif) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_Gif) ProtoMessage() {}

func (x *Message_Content_Gif) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_Gif.ProtoReflect.Descriptor instead.
func (*Message_Content_Gif) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 5}
}

func (x *Message_Content_Gif) GetPreview() *ImagePreview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Message_Content_Gif) GetGif() *v21.BlobReference {
	if x != nil {
		return x.Gif
	}
	return nil
}

// A Sticker message has the following fields:
//  1. preview: preview image bytes for immediate preview display
//  2. sticker: the sticker url such that the receiver can retrieve the high-res sticker and display it
//  3. sticker_id: numeric sticker id
//  4. pack_id: the packId which this sticker belongs to. Used by recievers to display the sticker pack when
//     the sticker is tapped in chat view
type Message_Content_Sticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Low-res version of the sticker having ImageType always set to PNG
	Preview       *ImagePreview      `protobuf:"bytes,1,opt,name=preview,proto3" json:"preview,omitempty"`
	Sticker       *v21.BlobReference `protobuf:"bytes,2,opt,name=sticker,proto3" json:"sticker,omitempty"`
	StickerId     string             `protobuf:"bytes,3,opt,name=sticker_id,json=stickerId,proto3" json:"sticker_id,omitempty"`
	StickerPackId string             `protobuf:"bytes,4,opt,name=sticker_pack_id,json=stickerPackId,proto3" json:"sticker_pack_id,omitempty"`
}

func (x *Message_Content_Sticker) Reset() {
	*x = Message_Content_Sticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_Sticker) ProtoMessage() {}

func (x *Message_Content_Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_Sticker.ProtoReflect.Descriptor instead.
func (*Message_Content_Sticker) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 6}
}

func (x *Message_Content_Sticker) GetPreview() *ImagePreview {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Message_Content_Sticker) GetSticker() *v21.BlobReference {
	if x != nil {
		return x.Sticker
	}
	return nil
}

func (x *Message_Content_Sticker) GetStickerId() string {
	if x != nil {
		return x.StickerId
	}
	return ""
}

func (x *Message_Content_Sticker) GetStickerPackId() string {
	if x != nil {
		return x.StickerPackId
	}
	return ""
}

// A message constructed using one of the provided Kik SDK integrations.
// The rendering of the message will be predicated on the existance of
// certain fields
type Message_Content_Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName string `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	// NOTE: one of image, title or description must be set for this to be a valid model
	Image       *ImagePreview   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Title       *RenderableText `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description *RenderableText `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Link        *Link           `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	// Extras are generated by and relayed along to 3rd party web sites
	// hosted inside of the Kik webview. Kik features should never use
	// the contents of the extras section
	//
	// The values are generated by third party apps, and consumed by
	// third party apps. Therefore, there is no validation by clients
	// (or kik servers) except for size restrictions. Currently, there
	// is no per-value size restriction, but the sum size of the entire
	// map must be <= 5120.
	Extras map[string]string `protobuf:"bytes,6,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Message_Content_Platform) Reset() {
	*x = Message_Content_Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_Platform) ProtoMessage() {}

func (x *Message_Content_Platform) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_Platform.ProtoReflect.Descriptor instead.
func (*Message_Content_Platform) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 7}
}

func (x *Message_Content_Platform) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Message_Content_Platform) GetImage() *ImagePreview {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Message_Content_Platform) GetTitle() *RenderableText {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Message_Content_Platform) GetDescription() *RenderableText {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Message_Content_Platform) GetLink() *Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *Message_Content_Platform) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

// A message that is selected from a SuggestedResponse.
type Message_Content_SelectedSuggestedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bot sender of the SuggestedResponse.
	// Notably, the bot may not be a participant of the chat, so server
	// needs to know who the response should be routed to.
	Bot *v2.PersonaId `protobuf:"bytes,1,opt,name=bot,proto3" json:"bot,omitempty"`
	// The exact metadata in the SuggestedResponse that is selected.
	Metadata []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to Kind:
	//	*Message_Content_SelectedSuggestedResponse_Text
	//	*Message_Content_SelectedSuggestedResponse_FriendPicker_
	//	*Message_Content_SelectedSuggestedResponse_Image_
	Kind isMessage_Content_SelectedSuggestedResponse_Kind `protobuf_oneof:"kind"`
}

func (x *Message_Content_SelectedSuggestedResponse) Reset() {
	*x = Message_Content_SelectedSuggestedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_SelectedSuggestedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_SelectedSuggestedResponse) ProtoMessage() {}

func (x *Message_Content_SelectedSuggestedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_SelectedSuggestedResponse.ProtoReflect.Descriptor instead.
func (*Message_Content_SelectedSuggestedResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 8}
}

func (x *Message_Content_SelectedSuggestedResponse) GetBot() *v2.PersonaId {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *Message_Content_SelectedSuggestedResponse) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Message_Content_SelectedSuggestedResponse) GetKind() isMessage_Content_SelectedSuggestedResponse_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Message_Content_SelectedSuggestedResponse) GetText() *RenderableText {
	if x, ok := x.GetKind().(*Message_Content_SelectedSuggestedResponse_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Message_Content_SelectedSuggestedResponse) GetFriendPicker() *Message_Content_SelectedSuggestedResponse_FriendPicker {
	if x, ok := x.GetKind().(*Message_Content_SelectedSuggestedResponse_FriendPicker_); ok {
		return x.FriendPicker
	}
	return nil
}

func (x *Message_Content_SelectedSuggestedResponse) GetImage() *Message_Content_SelectedSuggestedResponse_Image {
	if x, ok := x.GetKind().(*Message_Content_SelectedSuggestedResponse_Image_); ok {
		return x.Image
	}
	return nil
}

type isMessage_Content_SelectedSuggestedResponse_Kind interface {
	isMessage_Content_SelectedSuggestedResponse_Kind()
}

type Message_Content_SelectedSuggestedResponse_Text struct {
	Text *RenderableText `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}

type Message_Content_SelectedSuggestedResponse_FriendPicker_ struct {
	FriendPicker *Message_Content_SelectedSuggestedResponse_FriendPicker `protobuf:"bytes,4,opt,name=friend_picker,json=friendPicker,proto3,oneof"`
}

type Message_Content_SelectedSuggestedResponse_Image_ struct {
	Image *Message_Content_SelectedSuggestedResponse_Image `protobuf:"bytes,5,opt,name=image,proto3,oneof"`
}

func (*Message_Content_SelectedSuggestedResponse_Text) isMessage_Content_SelectedSuggestedResponse_Kind() {
}

func (*Message_Content_SelectedSuggestedResponse_FriendPicker_) isMessage_Content_SelectedSuggestedResponse_Kind() {
}

func (*Message_Content_SelectedSuggestedResponse_Image_) isMessage_Content_SelectedSuggestedResponse_Kind() {
}

// The subset of friends that were selected from a FriendPicker suggested
// response.
type Message_Content_SelectedSuggestedResponse_FriendPicker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Picked []*v2.PersonaId `protobuf:"bytes,1,rep,name=picked,proto3" json:"picked,omitempty"`
}

func (x *Message_Content_SelectedSuggestedResponse_FriendPicker) Reset() {
	*x = Message_Content_SelectedSuggestedResponse_FriendPicker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_SelectedSuggestedResponse_FriendPicker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_SelectedSuggestedResponse_FriendPicker) ProtoMessage() {}

func (x *Message_Content_SelectedSuggestedResponse_FriendPicker) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_SelectedSuggestedResponse_FriendPicker.ProtoReflect.Descriptor instead.
func (*Message_Content_SelectedSuggestedResponse_FriendPicker) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 8, 0}
}

func (x *Message_Content_SelectedSuggestedResponse_FriendPicker) GetPicked() []*v2.PersonaId {
	if x != nil {
		return x.Picked
	}
	return nil
}

// The exact blob reference of the image selected in an Image suggested
// response.
type Message_Content_SelectedSuggestedResponse_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *v21.BlobReference `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Message_Content_SelectedSuggestedResponse_Image) Reset() {
	*x = Message_Content_SelectedSuggestedResponse_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Content_SelectedSuggestedResponse_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Content_SelectedSuggestedResponse_Image) ProtoMessage() {}

func (x *Message_Content_SelectedSuggestedResponse_Image) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Content_SelectedSuggestedResponse_Image.ProtoReflect.Descriptor instead.
func (*Message_Content_SelectedSuggestedResponse_Image) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{0, 1, 8, 1}
}

func (x *Message_Content_SelectedSuggestedResponse_Image) GetImage() *v21.BlobReference {
	if x != nil {
		return x.Image
	}
	return nil
}

// SuggestedResponse defines an ordered list of options that a bot can
// provide to a user that can be used to move a conversation forward in
// a way the bot expects/understands.
type Keyboard_SuggestedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suggestions []*Keyboard_SuggestedResponse_Suggestion `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (x *Keyboard_SuggestedResponse) Reset() {
	*x = Keyboard_SuggestedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyboard_SuggestedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyboard_SuggestedResponse) ProtoMessage() {}

func (x *Keyboard_SuggestedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyboard_SuggestedResponse.ProtoReflect.Descriptor instead.
func (*Keyboard_SuggestedResponse) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Keyboard_SuggestedResponse) GetSuggestions() []*Keyboard_SuggestedResponse_Suggestion {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type Keyboard_SuggestedResponse_Suggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata is provided by bots, and must be returned back upon users
	// selecting this instance of response via the SelectedSuggestedResponse.
	//
	// This should not be inspected or interpreted by clients.
	Metadata []byte `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to Kind:
	//	*Keyboard_SuggestedResponse_Suggestion_Text
	//	*Keyboard_SuggestedResponse_Suggestion_FriendPicker_
	//	*Keyboard_SuggestedResponse_Suggestion_Image_
	Kind isKeyboard_SuggestedResponse_Suggestion_Kind `protobuf_oneof:"kind"`
}

func (x *Keyboard_SuggestedResponse_Suggestion) Reset() {
	*x = Keyboard_SuggestedResponse_Suggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyboard_SuggestedResponse_Suggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyboard_SuggestedResponse_Suggestion) ProtoMessage() {}

func (x *Keyboard_SuggestedResponse_Suggestion) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyboard_SuggestedResponse_Suggestion.ProtoReflect.Descriptor instead.
func (*Keyboard_SuggestedResponse_Suggestion) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *Keyboard_SuggestedResponse_Suggestion) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Keyboard_SuggestedResponse_Suggestion) GetKind() isKeyboard_SuggestedResponse_Suggestion_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Keyboard_SuggestedResponse_Suggestion) GetText() *RenderableText {
	if x, ok := x.GetKind().(*Keyboard_SuggestedResponse_Suggestion_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Keyboard_SuggestedResponse_Suggestion) GetFriendPicker() *Keyboard_SuggestedResponse_Suggestion_FriendPicker {
	if x, ok := x.GetKind().(*Keyboard_SuggestedResponse_Suggestion_FriendPicker_); ok {
		return x.FriendPicker
	}
	return nil
}

func (x *Keyboard_SuggestedResponse_Suggestion) GetImage() *Keyboard_SuggestedResponse_Suggestion_Image {
	if x, ok := x.GetKind().(*Keyboard_SuggestedResponse_Suggestion_Image_); ok {
		return x.Image
	}
	return nil
}

type isKeyboard_SuggestedResponse_Suggestion_Kind interface {
	isKeyboard_SuggestedResponse_Suggestion_Kind()
}

type Keyboard_SuggestedResponse_Suggestion_Text struct {
	Text *RenderableText `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type Keyboard_SuggestedResponse_Suggestion_FriendPicker_ struct {
	FriendPicker *Keyboard_SuggestedResponse_Suggestion_FriendPicker `protobuf:"bytes,3,opt,name=friend_picker,json=friendPicker,proto3,oneof"`
}

type Keyboard_SuggestedResponse_Suggestion_Image_ struct {
	Image *Keyboard_SuggestedResponse_Suggestion_Image `protobuf:"bytes,4,opt,name=image,proto3,oneof"`
}

func (*Keyboard_SuggestedResponse_Suggestion_Text) isKeyboard_SuggestedResponse_Suggestion_Kind() {}

func (*Keyboard_SuggestedResponse_Suggestion_FriendPicker_) isKeyboard_SuggestedResponse_Suggestion_Kind() {
}

func (*Keyboard_SuggestedResponse_Suggestion_Image_) isKeyboard_SuggestedResponse_Suggestion_Kind() {}

// A suggested response for selecting between a set of chat participants.
type Keyboard_SuggestedResponse_Suggestion_FriendPicker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body *RenderableText `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// At least min number of users should be selected. This must be
	// less than or equal to max.
	Min uint32 `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	// At most max number of users should be selected. If the bot
	// doesn't specify the max value, then this will be set to
	// max_val by server.
	Max uint32 `protobuf:"varint,3,opt,name=max,proto3" json:"max,omitempty"`
	// A set of users that will be preselected prior to the user
	// providing any input selections.
	Preselected []*v2.PersonaId `protobuf:"bytes,4,rep,name=preselected,proto3" json:"preselected,omitempty"`
}

func (x *Keyboard_SuggestedResponse_Suggestion_FriendPicker) Reset() {
	*x = Keyboard_SuggestedResponse_Suggestion_FriendPicker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyboard_SuggestedResponse_Suggestion_FriendPicker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyboard_SuggestedResponse_Suggestion_FriendPicker) ProtoMessage() {}

func (x *Keyboard_SuggestedResponse_Suggestion_FriendPicker) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyboard_SuggestedResponse_Suggestion_FriendPicker.ProtoReflect.Descriptor instead.
func (*Keyboard_SuggestedResponse_Suggestion_FriendPicker) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

func (x *Keyboard_SuggestedResponse_Suggestion_FriendPicker) GetBody() *RenderableText {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Keyboard_SuggestedResponse_Suggestion_FriendPicker) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Keyboard_SuggestedResponse_Suggestion_FriendPicker) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Keyboard_SuggestedResponse_Suggestion_FriendPicker) GetPreselected() []*v2.PersonaId {
	if x != nil {
		return x.Preselected
	}
	return nil
}

// A suggested response containing a blob reference to an image.
type Keyboard_SuggestedResponse_Suggestion_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *v21.BlobReference `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Keyboard_SuggestedResponse_Suggestion_Image) Reset() {
	*x = Keyboard_SuggestedResponse_Suggestion_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyboard_SuggestedResponse_Suggestion_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyboard_SuggestedResponse_Suggestion_Image) ProtoMessage() {}

func (x *Keyboard_SuggestedResponse_Suggestion_Image) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyboard_SuggestedResponse_Suggestion_Image.ProtoReflect.Descriptor instead.
func (*Keyboard_SuggestedResponse_Suggestion_Image) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{2, 0, 0, 1}
}

func (x *Keyboard_SuggestedResponse_Suggestion_Image) GetImage() *v21.BlobReference {
	if x != nil {
		return x.Image
	}
	return nil
}

type RenderableText_RenderInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// offset and length are in units of character position within the text field
	// The rendering client will apply appropriate rules to ensure regions do
	// not overlap and that they fall within the bounds of the text
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Length uint32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	// Types that are assignable to Kind:
	//	*RenderableText_RenderInstruction_Smiley_
	//	*RenderableText_RenderInstruction_Link
	//	*RenderableText_RenderInstruction_Mention_
	Kind isRenderableText_RenderInstruction_Kind `protobuf_oneof:"kind"`
}

func (x *RenderableText_RenderInstruction) Reset() {
	*x = RenderableText_RenderInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderableText_RenderInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderableText_RenderInstruction) ProtoMessage() {}

func (x *RenderableText_RenderInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderableText_RenderInstruction.ProtoReflect.Descriptor instead.
func (*RenderableText_RenderInstruction) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RenderableText_RenderInstruction) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RenderableText_RenderInstruction) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (m *RenderableText_RenderInstruction) GetKind() isRenderableText_RenderInstruction_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *RenderableText_RenderInstruction) GetSmiley() *RenderableText_RenderInstruction_Smiley {
	if x, ok := x.GetKind().(*RenderableText_RenderInstruction_Smiley_); ok {
		return x.Smiley
	}
	return nil
}

func (x *RenderableText_RenderInstruction) GetLink() *Link {
	if x, ok := x.GetKind().(*RenderableText_RenderInstruction_Link); ok {
		return x.Link
	}
	return nil
}

func (x *RenderableText_RenderInstruction) GetMention() *RenderableText_RenderInstruction_Mention {
	if x, ok := x.GetKind().(*RenderableText_RenderInstruction_Mention_); ok {
		return x.Mention
	}
	return nil
}

type isRenderableText_RenderInstruction_Kind interface {
	isRenderableText_RenderInstruction_Kind()
}

type RenderableText_RenderInstruction_Smiley_ struct {
	Smiley *RenderableText_RenderInstruction_Smiley `protobuf:"bytes,3,opt,name=smiley,proto3,oneof"`
}

type RenderableText_RenderInstruction_Link struct {
	Link *Link `protobuf:"bytes,4,opt,name=link,proto3,oneof"`
}

type RenderableText_RenderInstruction_Mention_ struct {
	Mention *RenderableText_RenderInstruction_Mention `protobuf:"bytes,5,opt,name=mention,proto3,oneof"`
}

func (*RenderableText_RenderInstruction_Smiley_) isRenderableText_RenderInstruction_Kind() {}

func (*RenderableText_RenderInstruction_Link) isRenderableText_RenderInstruction_Kind() {}

func (*RenderableText_RenderInstruction_Mention_) isRenderableText_RenderInstruction_Kind() {}

type RenderableText_RenderInstruction_Smiley struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource_id is expected to be empty for default emojis e.g. ":)"
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
}

func (x *RenderableText_RenderInstruction_Smiley) Reset() {
	*x = RenderableText_RenderInstruction_Smiley{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderableText_RenderInstruction_Smiley) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderableText_RenderInstruction_Smiley) ProtoMessage() {}

func (x *RenderableText_RenderInstruction_Smiley) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderableText_RenderInstruction_Smiley.ProtoReflect.Descriptor instead.
func (*RenderableText_RenderInstruction_Smiley) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *RenderableText_RenderInstruction_Smiley) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *RenderableText_RenderInstruction_Smiley) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

type RenderableText_RenderInstruction_Mention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *v22.Username `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *RenderableText_RenderInstruction_Mention) Reset() {
	*x = RenderableText_RenderInstruction_Mention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderableText_RenderInstruction_Mention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderableText_RenderInstruction_Mention) ProtoMessage() {}

func (x *RenderableText_RenderInstruction_Mention) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderableText_RenderInstruction_Mention.ProtoReflect.Descriptor instead.
func (*RenderableText_RenderInstruction_Mention) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *RenderableText_RenderInstruction_Mention) GetUsername() *v22.Username {
	if x != nil {
		return x.Username
	}
	return nil
}

type Link_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A RFC 1738 URL. The URL can use a custom scheme like ITMS: or
	// any standard web scheme (HTTP/HTTPS. It is up to the OS on the client
	// to determine the ability to launch the given URL
	Url  string           `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type Link_Target_Type `protobuf:"varint,2,opt,name=type,proto3,enum=common.messaging.v2.Link_Target_Type" json:"type,omitempty"`
}

func (x *Link_Target) Reset() {
	*x = Link_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link_Target) ProtoMessage() {}

func (x *Link_Target) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link_Target.ProtoReflect.Descriptor instead.
func (*Link_Target) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Link_Target) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Link_Target) GetType() Link_Target_Type {
	if x != nil {
		return x.Type
	}
	return Link_Target_DEFAULT
}

type ChatEvent_GroupCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creator of the group
	Creator *v2.PersonaId `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// All other members of the group, not including the creator.
	// Optional, since public groups may legitimately be creator-only, specifying no initial members.
	// Note: Max repetitions should match the value found in mobile group service's create request.
	InitialMembers []*v2.PersonaId `protobuf:"bytes,2,rep,name=initial_members,json=initialMembers,proto3" json:"initial_members,omitempty"`
	// The ChatId that this group is being upgraded from,
	// which is expected to be one-to-one chat.
	//
	// If present, clients should try and copy the contents
	// of the chat specified by upgraded_chat_id from local
	// storage into Chat the this event came in through.
	// Server will not clone the logs.
	UpgradedChatId *v2.ChatId `protobuf:"bytes,3,opt,name=upgraded_chat_id,json=upgradedChatId,proto3" json:"upgraded_chat_id,omitempty"`
}

func (x *ChatEvent_GroupCreate) Reset() {
	*x = ChatEvent_GroupCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupCreate) ProtoMessage() {}

func (x *ChatEvent_GroupCreate) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupCreate.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupCreate) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ChatEvent_GroupCreate) GetCreator() *v2.PersonaId {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *ChatEvent_GroupCreate) GetInitialMembers() []*v2.PersonaId {
	if x != nil {
		return x.InitialMembers
	}
	return nil
}

func (x *ChatEvent_GroupCreate) GetUpgradedChatId() *v2.ChatId {
	if x != nil {
		return x.UpgradedChatId
	}
	return nil
}

type ChatEvent_GroupMemberAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Member(s) which have been added to the group.
	NewMembers []*v2.PersonaId `protobuf:"bytes,1,rep,name=new_members,json=newMembers,proto3" json:"new_members,omitempty"`
	// User whose action was the origin of the new members being added.
	// Note: If someone joined via invite/scan code, this is the user which created the code.
	//       If someone joined by searching and adding themselves, then this field will be empty.
	Inviter *v2.PersonaId `protobuf:"bytes,2,opt,name=inviter,proto3" json:"inviter,omitempty"`
	// Mechanism by which the inviter invited the members added
	Via ChatEvent_GroupMemberAdd_InviteVia `protobuf:"varint,3,opt,name=via,proto3,enum=common.messaging.v2.ChatEvent_GroupMemberAdd_InviteVia" json:"via,omitempty"`
}

func (x *ChatEvent_GroupMemberAdd) Reset() {
	*x = ChatEvent_GroupMemberAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupMemberAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupMemberAdd) ProtoMessage() {}

func (x *ChatEvent_GroupMemberAdd) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupMemberAdd.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupMemberAdd) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ChatEvent_GroupMemberAdd) GetNewMembers() []*v2.PersonaId {
	if x != nil {
		return x.NewMembers
	}
	return nil
}

func (x *ChatEvent_GroupMemberAdd) GetInviter() *v2.PersonaId {
	if x != nil {
		return x.Inviter
	}
	return nil
}

func (x *ChatEvent_GroupMemberAdd) GetVia() ChatEvent_GroupMemberAdd_InviteVia {
	if x != nil {
		return x.Via
	}
	return ChatEvent_GroupMemberAdd_NOT_SPECIFIED
}

type ChatEvent_GroupMemberLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *v2.PersonaId `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (x *ChatEvent_GroupMemberLeave) Reset() {
	*x = ChatEvent_GroupMemberLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupMemberLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupMemberLeave) ProtoMessage() {}

func (x *ChatEvent_GroupMemberLeave) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupMemberLeave.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupMemberLeave) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ChatEvent_GroupMemberLeave) GetMember() *v2.PersonaId {
	if x != nil {
		return x.Member
	}
	return nil
}

// event which is provided to the kicked or banned user
type ChatEvent_GroupMemberRemoveToTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemovedMember *v2.PersonaId `protobuf:"bytes,1,opt,name=removed_member,json=removedMember,proto3" json:"removed_member,omitempty"` // TODO: determine if we should include a "banned" flag here (classic does not specify this to user)
}

func (x *ChatEvent_GroupMemberRemoveToTarget) Reset() {
	*x = ChatEvent_GroupMemberRemoveToTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupMemberRemoveToTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupMemberRemoveToTarget) ProtoMessage() {}

func (x *ChatEvent_GroupMemberRemoveToTarget) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupMemberRemoveToTarget.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupMemberRemoveToTarget) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 3}
}

func (x *ChatEvent_GroupMemberRemoveToTarget) GetRemovedMember() *v2.PersonaId {
	if x != nil {
		return x.RemovedMember
	}
	return nil
}

// event used to inform others of a kick event.
type ChatEvent_GroupMemberRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemovedMember *v2.PersonaId `protobuf:"bytes,1,opt,name=removed_member,json=removedMember,proto3" json:"removed_member,omitempty"`
	ActingAdmin   *v2.PersonaId `protobuf:"bytes,2,opt,name=acting_admin,json=actingAdmin,proto3" json:"acting_admin,omitempty"`
}

func (x *ChatEvent_GroupMemberRemove) Reset() {
	*x = ChatEvent_GroupMemberRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupMemberRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupMemberRemove) ProtoMessage() {}

func (x *ChatEvent_GroupMemberRemove) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupMemberRemove.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupMemberRemove) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 4}
}

func (x *ChatEvent_GroupMemberRemove) GetRemovedMember() *v2.PersonaId {
	if x != nil {
		return x.RemovedMember
	}
	return nil
}

func (x *ChatEvent_GroupMemberRemove) GetActingAdmin() *v2.PersonaId {
	if x != nil {
		return x.ActingAdmin
	}
	return nil
}

type ChatEvent_GroupBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannedUser  *v2.PersonaId `protobuf:"bytes,1,opt,name=banned_user,json=bannedUser,proto3" json:"banned_user,omitempty"`
	ActingAdmin *v2.PersonaId `protobuf:"bytes,2,opt,name=acting_admin,json=actingAdmin,proto3" json:"acting_admin,omitempty"`
}

func (x *ChatEvent_GroupBan) Reset() {
	*x = ChatEvent_GroupBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupBan) ProtoMessage() {}

func (x *ChatEvent_GroupBan) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupBan.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupBan) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 5}
}

func (x *ChatEvent_GroupBan) GetBannedUser() *v2.PersonaId {
	if x != nil {
		return x.BannedUser
	}
	return nil
}

func (x *ChatEvent_GroupBan) GetActingAdmin() *v2.PersonaId {
	if x != nil {
		return x.ActingAdmin
	}
	return nil
}

type ChatEvent_GroupUnban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnbannedUser *v2.PersonaId `protobuf:"bytes,1,opt,name=unbanned_user,json=unbannedUser,proto3" json:"unbanned_user,omitempty"`
	ActingAdmin  *v2.PersonaId `protobuf:"bytes,2,opt,name=acting_admin,json=actingAdmin,proto3" json:"acting_admin,omitempty"`
}

func (x *ChatEvent_GroupUnban) Reset() {
	*x = ChatEvent_GroupUnban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupUnban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupUnban) ProtoMessage() {}

func (x *ChatEvent_GroupUnban) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupUnban.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupUnban) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 6}
}

func (x *ChatEvent_GroupUnban) GetUnbannedUser() *v2.PersonaId {
	if x != nil {
		return x.UnbannedUser
	}
	return nil
}

func (x *ChatEvent_GroupUnban) GetActingAdmin() *v2.PersonaId {
	if x != nil {
		return x.ActingAdmin
	}
	return nil
}

type ChatEvent_GroupMemberPromote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromotedMember *v2.PersonaId `protobuf:"bytes,1,opt,name=promoted_member,json=promotedMember,proto3" json:"promoted_member,omitempty"`
	// new_status indicates what status the promoted member was changed to.
	NewStatus ChatEvent_GroupMemberPromote_PromotionStatus `protobuf:"varint,2,opt,name=new_status,json=newStatus,proto3,enum=common.messaging.v2.ChatEvent_GroupMemberPromote_PromotionStatus" json:"new_status,omitempty"`
	// acting_admin is the admin that did the promoting.  May be absent if system has done an auto-promotion.
	ActingAdmin *v2.PersonaId `protobuf:"bytes,3,opt,name=acting_admin,json=actingAdmin,proto3" json:"acting_admin,omitempty"`
}

func (x *ChatEvent_GroupMemberPromote) Reset() {
	*x = ChatEvent_GroupMemberPromote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupMemberPromote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupMemberPromote) ProtoMessage() {}

func (x *ChatEvent_GroupMemberPromote) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupMemberPromote.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupMemberPromote) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 7}
}

func (x *ChatEvent_GroupMemberPromote) GetPromotedMember() *v2.PersonaId {
	if x != nil {
		return x.PromotedMember
	}
	return nil
}

func (x *ChatEvent_GroupMemberPromote) GetNewStatus() ChatEvent_GroupMemberPromote_PromotionStatus {
	if x != nil {
		return x.NewStatus
	}
	return ChatEvent_GroupMemberPromote_ADMIN
}

func (x *ChatEvent_GroupMemberPromote) GetActingAdmin() *v2.PersonaId {
	if x != nil {
		return x.ActingAdmin
	}
	return nil
}

type ChatEvent_GroupMemberDemote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DemotedMember *v2.PersonaId `protobuf:"bytes,1,opt,name=demoted_member,json=demotedMember,proto3" json:"demoted_member,omitempty"`
	// acting_admin is the admin that did the demoting.
	ActingAdmin *v2.PersonaId `protobuf:"bytes,2,opt,name=acting_admin,json=actingAdmin,proto3" json:"acting_admin,omitempty"`
}

func (x *ChatEvent_GroupMemberDemote) Reset() {
	*x = ChatEvent_GroupMemberDemote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupMemberDemote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupMemberDemote) ProtoMessage() {}

func (x *ChatEvent_GroupMemberDemote) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupMemberDemote.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupMemberDemote) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 8}
}

func (x *ChatEvent_GroupMemberDemote) GetDemotedMember() *v2.PersonaId {
	if x != nil {
		return x.DemotedMember
	}
	return nil
}

func (x *ChatEvent_GroupMemberDemote) GetActingAdmin() *v2.PersonaId {
	if x != nil {
		return x.ActingAdmin
	}
	return nil
}

type ChatEvent_ChatInfoChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// acting_member is the participant (admin) that initiated the change.
	ActingMember *v2.PersonaId                              `protobuf:"bytes,1,opt,name=acting_member,json=actingMember,proto3" json:"acting_member,omitempty"`
	Features     []*ChatEvent_ChatInfoChange_ChangedFeature `protobuf:"bytes,2,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *ChatEvent_ChatInfoChange) Reset() {
	*x = ChatEvent_ChatInfoChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_ChatInfoChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_ChatInfoChange) ProtoMessage() {}

func (x *ChatEvent_ChatInfoChange) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_ChatInfoChange.ProtoReflect.Descriptor instead.
func (*ChatEvent_ChatInfoChange) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 9}
}

func (x *ChatEvent_ChatInfoChange) GetActingMember() *v2.PersonaId {
	if x != nil {
		return x.ActingMember
	}
	return nil
}

func (x *ChatEvent_ChatInfoChange) GetFeatures() []*ChatEvent_ChatInfoChange_ChangedFeature {
	if x != nil {
		return x.Features
	}
	return nil
}

type ChatEvent_MessageTipNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TippedMessageId *Message_Id    `protobuf:"bytes,1,opt,name=tipped_message_id,json=tippedMessageId,proto3" json:"tipped_message_id,omitempty"`
	Sender          *v2.PersonaId  `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient       *v2.PersonaId  `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount          *v23.KinAmount `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ChatEvent_MessageTipNotification) Reset() {
	*x = ChatEvent_MessageTipNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_MessageTipNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_MessageTipNotification) ProtoMessage() {}

func (x *ChatEvent_MessageTipNotification) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_MessageTipNotification.ProtoReflect.Descriptor instead.
func (*ChatEvent_MessageTipNotification) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 10}
}

func (x *ChatEvent_MessageTipNotification) GetTippedMessageId() *Message_Id {
	if x != nil {
		return x.TippedMessageId
	}
	return nil
}

func (x *ChatEvent_MessageTipNotification) GetSender() *v2.PersonaId {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *ChatEvent_MessageTipNotification) GetRecipient() *v2.PersonaId {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *ChatEvent_MessageTipNotification) GetAmount() *v23.KinAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Indication of a friend add from the server which happens when user A adds user B to their contact list.
type ChatEvent_FriendshipNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActingUser    *v2.PersonaId          `protobuf:"bytes,1,opt,name=acting_user,json=actingUser,proto3" json:"acting_user,omitempty"`
	TargetUser    *v2.PersonaId          `protobuf:"bytes,2,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty"`
	FriendContext *v24.UserFriendContext `protobuf:"bytes,3,opt,name=friend_context,json=friendContext,proto3" json:"friend_context,omitempty"`
}

func (x *ChatEvent_FriendshipNotice) Reset() {
	*x = ChatEvent_FriendshipNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_FriendshipNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_FriendshipNotice) ProtoMessage() {}

func (x *ChatEvent_FriendshipNotice) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_FriendshipNotice.ProtoReflect.Descriptor instead.
func (*ChatEvent_FriendshipNotice) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 11}
}

func (x *ChatEvent_FriendshipNotice) GetActingUser() *v2.PersonaId {
	if x != nil {
		return x.ActingUser
	}
	return nil
}

func (x *ChatEvent_FriendshipNotice) GetTargetUser() *v2.PersonaId {
	if x != nil {
		return x.TargetUser
	}
	return nil
}

func (x *ChatEvent_FriendshipNotice) GetFriendContext() *v24.UserFriendContext {
	if x != nil {
		return x.FriendContext
	}
	return nil
}

// InactiveParticipant indicates to one particpant that the other has been inactive for a "long" period of time.
type ChatEvent_InactiveParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChatEvent_InactiveParticipant) Reset() {
	*x = ChatEvent_InactiveParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_InactiveParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_InactiveParticipant) ProtoMessage() {}

func (x *ChatEvent_InactiveParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_InactiveParticipant.ProtoReflect.Descriptor instead.
func (*ChatEvent_InactiveParticipant) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 12}
}

// Message generated by server when someone attempts to invite a user into a group where the inviting user
// is not in the contactlist of the invitee.
// Instead, this message is sent to the invitee in a one-to-one context, with a participant filter such that only
// the invitee receives it.  The client display of this message should present a link for easy joining of the group.
type ChatEvent_GroupInviteNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvitingUser *v2.PersonaId        `protobuf:"bytes,1,opt,name=inviting_user,json=invitingUser,proto3" json:"inviting_user,omitempty"`
	GroupChatId  *v2.ChatId           `protobuf:"bytes,2,opt,name=group_chat_id,json=groupChatId,proto3" json:"group_chat_id,omitempty"`
	InviteCode   *v25.GroupInviteCode `protobuf:"bytes,3,opt,name=invite_code,json=inviteCode,proto3" json:"invite_code,omitempty"`
}

func (x *ChatEvent_GroupInviteNotice) Reset() {
	*x = ChatEvent_GroupInviteNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_GroupInviteNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_GroupInviteNotice) ProtoMessage() {}

func (x *ChatEvent_GroupInviteNotice) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_GroupInviteNotice.ProtoReflect.Descriptor instead.
func (*ChatEvent_GroupInviteNotice) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 13}
}

func (x *ChatEvent_GroupInviteNotice) GetInvitingUser() *v2.PersonaId {
	if x != nil {
		return x.InvitingUser
	}
	return nil
}

func (x *ChatEvent_GroupInviteNotice) GetGroupChatId() *v2.ChatId {
	if x != nil {
		return x.GroupChatId
	}
	return nil
}

func (x *ChatEvent_GroupInviteNotice) GetInviteCode() *v25.GroupInviteCode {
	if x != nil {
		return x.InviteCode
	}
	return nil
}

// Message generated by server when a chat is created as a result of scanning a Kik code
type ChatEvent_ScannedKikCodeNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanningUser *v2.PersonaId `protobuf:"bytes,1,opt,name=scanning_user,json=scanningUser,proto3" json:"scanning_user,omitempty"`
	ScannedUser  *v2.PersonaId `protobuf:"bytes,2,opt,name=scanned_user,json=scannedUser,proto3" json:"scanned_user,omitempty"`
}

func (x *ChatEvent_ScannedKikCodeNotice) Reset() {
	*x = ChatEvent_ScannedKikCodeNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_ScannedKikCodeNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_ScannedKikCodeNotice) ProtoMessage() {}

func (x *ChatEvent_ScannedKikCodeNotice) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_ScannedKikCodeNotice.ProtoReflect.Descriptor instead.
func (*ChatEvent_ScannedKikCodeNotice) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 14}
}

func (x *ChatEvent_ScannedKikCodeNotice) GetScanningUser() *v2.PersonaId {
	if x != nil {
		return x.ScanningUser
	}
	return nil
}

func (x *ChatEvent_ScannedKikCodeNotice) GetScannedUser() *v2.PersonaId {
	if x != nil {
		return x.ScannedUser
	}
	return nil
}

// Message generated by server when a client initiates a video conference for this chat
// Upon receiving such message, clients should attempt to fetch the video conference details, unless they are marked
// as the sender of the message.
type ChatEvent_VideoConferenceStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoConferenceId *v26.VideoConferenceId `protobuf:"bytes,1,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
}

func (x *ChatEvent_VideoConferenceStarted) Reset() {
	*x = ChatEvent_VideoConferenceStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_VideoConferenceStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_VideoConferenceStarted) ProtoMessage() {}

func (x *ChatEvent_VideoConferenceStarted) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_VideoConferenceStarted.ProtoReflect.Descriptor instead.
func (*ChatEvent_VideoConferenceStarted) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 15}
}

func (x *ChatEvent_VideoConferenceStarted) GetVideoConferenceId() *v26.VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

// Message generated by server when a client initiates a video conference for this chat and terminates it before
// the other client joins it.
type ChatEvent_VideoConferenceMissed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoConferenceId *v26.VideoConferenceId `protobuf:"bytes,1,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
}

func (x *ChatEvent_VideoConferenceMissed) Reset() {
	*x = ChatEvent_VideoConferenceMissed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_VideoConferenceMissed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_VideoConferenceMissed) ProtoMessage() {}

func (x *ChatEvent_VideoConferenceMissed) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_VideoConferenceMissed.ProtoReflect.Descriptor instead.
func (*ChatEvent_VideoConferenceMissed) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 16}
}

func (x *ChatEvent_VideoConferenceMissed) GetVideoConferenceId() *v26.VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

// Message generated by server when either participant of a video conference notifies that it has ended after the
// receiving participant has joined the video conference.
type ChatEvent_VideoConferenceTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoConferenceId *v26.VideoConferenceId `protobuf:"bytes,1,opt,name=video_conference_id,json=videoConferenceId,proto3" json:"video_conference_id,omitempty"`
	// Duration of the call if the receiver ever answered.
	// If the receiver never sends an answer for this call, this value will not be set.
	CallDuration *duration.Duration `protobuf:"bytes,2,opt,name=call_duration,json=callDuration,proto3" json:"call_duration,omitempty"`
}

func (x *ChatEvent_VideoConferenceTerminated) Reset() {
	*x = ChatEvent_VideoConferenceTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_VideoConferenceTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_VideoConferenceTerminated) ProtoMessage() {}

func (x *ChatEvent_VideoConferenceTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_VideoConferenceTerminated.ProtoReflect.Descriptor instead.
func (*ChatEvent_VideoConferenceTerminated) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 17}
}

func (x *ChatEvent_VideoConferenceTerminated) GetVideoConferenceId() *v26.VideoConferenceId {
	if x != nil {
		return x.VideoConferenceId
	}
	return nil
}

func (x *ChatEvent_VideoConferenceTerminated) GetCallDuration() *duration.Duration {
	if x != nil {
		return x.CallDuration
	}
	return nil
}

// Message generate by the server when an anonymous match is found
// This message is sent to both user involved in the anonymous chat
type ChatEvent_AnonymousMatchFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Anonymous chat session end time (UTC)
	SessionEndTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=session_end_time,json=sessionEndTime,proto3" json:"session_end_time,omitempty"`
	// This is the request ID for the FindChatPartner request when the match was found
	FindChatPartnerRequestId *v2.Uuid `protobuf:"bytes,2,opt,name=find_chat_partner_request_id,json=findChatPartnerRequestId,proto3" json:"find_chat_partner_request_id,omitempty"`
	// Indicate what type of match it was (quick or interest)
	MatchType ChatEvent_AnonymousMatchFound_MatchType `protobuf:"varint,3,opt,name=match_type,json=matchType,proto3,enum=common.messaging.v2.ChatEvent_AnonymousMatchFound_MatchType" json:"match_type,omitempty"`
	// If the match was interest-based, then this will include the an chat interest
	// identifier. The clients can use this to lookup the interest from anoymous match interests
	AnonMatchInterestId []*v27.AnonMatchInterestId `protobuf:"bytes,4,rep,name=anon_match_interest_id,json=anonMatchInterestId,proto3" json:"anon_match_interest_id,omitempty"`
}

func (x *ChatEvent_AnonymousMatchFound) Reset() {
	*x = ChatEvent_AnonymousMatchFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_AnonymousMatchFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_AnonymousMatchFound) ProtoMessage() {}

func (x *ChatEvent_AnonymousMatchFound) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_AnonymousMatchFound.ProtoReflect.Descriptor instead.
func (*ChatEvent_AnonymousMatchFound) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 18}
}

func (x *ChatEvent_AnonymousMatchFound) GetSessionEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionEndTime
	}
	return nil
}

func (x *ChatEvent_AnonymousMatchFound) GetFindChatPartnerRequestId() *v2.Uuid {
	if x != nil {
		return x.FindChatPartnerRequestId
	}
	return nil
}

func (x *ChatEvent_AnonymousMatchFound) GetMatchType() ChatEvent_AnonymousMatchFound_MatchType {
	if x != nil {
		return x.MatchType
	}
	return ChatEvent_AnonymousMatchFound_QUICK
}

func (x *ChatEvent_AnonymousMatchFound) GetAnonMatchInterestId() []*v27.AnonMatchInterestId {
	if x != nil {
		return x.AnonMatchInterestId
	}
	return nil
}

// Message generated by the server when an anonymous chat is ended,
// either when one one user ends the chat, or both users agree to be friends
// This message is sent to both user involved in the anonymous chat
type ChatEvent_AnonymousChatEnded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Anonymous chat session end time (UTC)
	SessionEndTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=session_end_time,json=sessionEndTime,proto3" json:"session_end_time,omitempty"`
	// If the anonymous chat session ended because both user decided to be friends,
	// this field will contains the upgraded chatId (one-to-one)
	UpgradedChatId *v2.ChatId `protobuf:"bytes,2,opt,name=upgraded_chat_id,json=upgradedChatId,proto3" json:"upgraded_chat_id,omitempty"`
}

func (x *ChatEvent_AnonymousChatEnded) Reset() {
	*x = ChatEvent_AnonymousChatEnded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_AnonymousChatEnded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_AnonymousChatEnded) ProtoMessage() {}

func (x *ChatEvent_AnonymousChatEnded) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_AnonymousChatEnded.ProtoReflect.Descriptor instead.
func (*ChatEvent_AnonymousChatEnded) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 19}
}

func (x *ChatEvent_AnonymousChatEnded) GetSessionEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionEndTime
	}
	return nil
}

func (x *ChatEvent_AnonymousChatEnded) GetUpgradedChatId() *v2.ChatId {
	if x != nil {
		return x.UpgradedChatId
	}
	return nil
}

// NOTE: Needed to define ChangedFeature as a message to allow validation of repetition
type ChatEvent_ChatInfoChange_ChangedFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature ChatEvent_ChatInfoChange_ChangedFeature_Feature `protobuf:"varint,1,opt,name=feature,proto3,enum=common.messaging.v2.ChatEvent_ChatInfoChange_ChangedFeature_Feature" json:"feature,omitempty"`
}

func (x *ChatEvent_ChatInfoChange_ChangedFeature) Reset() {
	*x = ChatEvent_ChatInfoChange_ChangedFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_v2_model_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_ChatInfoChange_ChangedFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_ChatInfoChange_ChangedFeature) ProtoMessage() {}

func (x *ChatEvent_ChatInfoChange_ChangedFeature) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_v2_model_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_ChatInfoChange_ChangedFeature.ProtoReflect.Descriptor instead.
func (*ChatEvent_ChatInfoChange_ChangedFeature) Descriptor() ([]byte, []int) {
	return file_messaging_v2_model_proto_rawDescGZIP(), []int{6, 9, 0}
}

func (x *ChatEvent_ChatInfoChange_ChangedFeature) GetFeature() ChatEvent_ChatInfoChange_ChangedFeature_Feature {
	if x != nil {
		return x.Feature
	}
	return ChatEvent_ChatInfoChange_ChangedFeature_DISPLAY_NAME
}

var File_messaging_v2_model_proto protoreflect.FileDescriptor

var file_messaging_v2_model_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x62, 0x6c, 0x6f,
	0x62, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6b, 0x69, 0x6e, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb0, 0x1c, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x80, 0x01, 0xe8, 0x07,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x6d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00,
	0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x12, 0x50,
	0x0a, 0x15, 0x62, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x13, 0x62, 0x6f, 0x74,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x1a, 0x2e, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x72, 0x61, 0x77, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08,
	0x01, 0x28, 0x01, 0x30, 0x80, 0x01, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0xf6, 0x15, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a,
	0x0d, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x79, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x55, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x4b,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x58, 0x0a, 0x0d, 0x67,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x55, 0x0a, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x3c, 0x0a, 0x03,
	0x67, 0x69, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x69, 0x66, 0x48, 0x00, 0x52, 0x03, 0x67, 0x69, 0x66, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x5c, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x54, 0x0a, 0x0f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x0c, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x79, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x8d, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x39, 0x0a,
	0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x1a, 0x90, 0x01, 0x0a, 0x0c, 0x47, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x79, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xca, 0x9d,
	0x25, 0x02, 0x08, 0x01, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x1a, 0x8d, 0x01, 0x0a, 0x0b,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x43, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x39, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x1a, 0x83, 0x01, 0x0a, 0x03,
	0x47, 0x69, 0x66, 0x12, 0x43, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x37, 0x0a, 0x03, 0x67, 0x69, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62,
	0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x03, 0x67, 0x69,
	0x66, 0x1a, 0xeb, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f,
	0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x08, 0x01, 0x30,
	0x40, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x02,
	0x52, 0x0d, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x1a,
	0xb1, 0x03, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x5a, 0x0a, 0x06,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x30, 0x80, 0x04,
	0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x9b, 0x04, 0x0a, 0x19, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x03, 0x62, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x03, 0x62, 0x6f,
	0x74, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x00, 0x28, 0x01, 0x30, 0xe8, 0x07,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x72, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x4a, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x0c, 0xca,
	0x9d, 0x25, 0x08, 0x08, 0x01, 0x78, 0x01, 0x80, 0x01, 0xe8, 0x07, 0x52, 0x06, 0x70, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x1a, 0x44, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x27, 0x0a, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x54,
	0x10, 0x02, 0x22, 0xa6, 0x02, 0x0a, 0x07, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x22, 0xc1, 0x07, 0x0a, 0x08,
	0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x60, 0x0a, 0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x32, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0xf3, 0x05, 0x0a, 0x11, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01,
	0x78, 0x01, 0x80, 0x01, 0x64, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xf2, 0x04, 0x0a, 0x0a, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x00, 0x28, 0x01, 0x30, 0xe8, 0x07,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a,
	0xe7, 0x01, 0x0a, 0x0c, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x28, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16,
	0xca, 0x9d, 0x25, 0x12, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xe8, 0x03,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xca, 0x9d, 0x25, 0x12, 0x39, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xe8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64,
	0x42, 0x0a, 0xca, 0x9d, 0x25, 0x06, 0x78, 0x00, 0x80, 0x01, 0xe8, 0x07, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0x44, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x62, 0x6c, 0x6f, 0x62, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x22,
	0x95, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x30, 0x80, 0x10, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x6f, 0x0a, 0x13, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x80, 0x01, 0x64, 0x52, 0x12,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xf2, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x06, 0x73, 0x6d, 0x69, 0x6c,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6d, 0x69, 0x6c, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x59, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6d, 0x0a, 0x06,
	0x53, 0x6d, 0x69, 0x6c, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xca, 0x9d, 0x25,
	0x13, 0x12, 0x0f, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x30, 0x2d, 0x39, 0x5d,
	0x2a, 0x24, 0x30, 0x20, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x08, 0x01, 0x30, 0x20, 0x52,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x1a, 0x42, 0x0a, 0x07, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0c, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x4a, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x30, 0xc4,
	0xbf, 0x02, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x16, 0xca, 0x9d, 0x25, 0x12, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x3f, 0x61,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x52, 0x0b, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x1e, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x4e, 0x47, 0x10, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x43,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x07, 0xca, 0x9d, 0x25, 0x03, 0x80, 0x01, 0x0a, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x1a, 0x94, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xca, 0x9d, 0x25,
	0x05, 0x08, 0x01, 0x30, 0xfc, 0x07, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4f, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x03, 0x22, 0xd5, 0x2d, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x61, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x72, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x69, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18,
	0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x73, 0x68, 0x69, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x14, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0xd2, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x17, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6b, 0x69, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x4b, 0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4b, 0x69, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x18, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0xb8, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x6f, 0x0a,
	0x17, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0xb9, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x7b,
	0x0a, 0x1b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0xba, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x19, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x10, 0x61,
	0x6e, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0xa0, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6e,
	0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x0f,
	0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0xa1, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x6e, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0xcb, 0x01, 0x0a, 0x0b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49,
	0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49,
	0x64, 0x42, 0x08, 0xca, 0x9d, 0x25, 0x04, 0x80, 0x01, 0x80, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x10, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x1a, 0x9d, 0x02, 0x0a, 0x0e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x08, 0x01, 0x80, 0x01,
	0x64, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x49, 0x64, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a,
	0x03, 0x76, 0x69, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x64, 0x64, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x52, 0x03, 0x76, 0x69, 0x61, 0x22, 0x4e, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x56, 0x69, 0x61, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x41,
	0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x1a, 0x48, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x60, 0x0a, 0x19, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x43, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca,
	0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x99, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x1a, 0x8a, 0x01, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x61, 0x6e, 0x12, 0x3d, 0x0a,
	0x0b, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x90, 0x01,
	0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x41, 0x0a, 0x0d,
	0x75, 0x6e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x0c, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x1a, 0x9f, 0x02, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x60,
	0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x27, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52,
	0x10, 0x01, 0x1a, 0x99, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x44, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0d,
	0x64, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0xff,
	0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06,
	0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x0b, 0xca, 0x9d, 0x25, 0x07, 0x08, 0x01, 0x78, 0x01, 0x80, 0x01,
	0x0a, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0xc2, 0x01, 0x0a, 0x0e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5e,
	0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x50,
	0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x49, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x04,
	0x1a, 0xa1, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x11, 0x74,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52,
	0x0f, 0x74, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6b, 0x69, 0x6e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x4b, 0x69, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xe1, 0x01, 0x0a, 0x10, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73,
	0x68, 0x69, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x1a,
	0xe1, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x4b,
	0x69, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0d,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08,
	0x01, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x74, 0x0a, 0x16, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0x73, 0x0a, 0x15, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x5a, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x1a, 0xbf, 0x01, 0x0a, 0x19,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x13, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52,
	0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa8, 0x03,
	0x0a, 0x13, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xca, 0x9d, 0x25,
	0x02, 0x08, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02,
	0x08, 0x01, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0a,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x61, 0x6e, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x42, 0x09, 0xca, 0x9d, 0x25, 0x05, 0x78, 0x00, 0x80, 0x01, 0x0a, 0x52, 0x13, 0x61,
	0x6e, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x24, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x01, 0x1a, 0x9f, 0x01, 0x0a, 0x12, 0x41, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x4c, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xca, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x42, 0x80, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x67,
	0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x32, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6b, 0x6b,
	0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61, 0x73, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x32, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0xa2, 0x02,
	0x14, 0x4b, 0x50, 0x42, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messaging_v2_model_proto_rawDescOnce sync.Once
	file_messaging_v2_model_proto_rawDescData = file_messaging_v2_model_proto_rawDesc
)

func file_messaging_v2_model_proto_rawDescGZIP() []byte {
	file_messaging_v2_model_proto_rawDescOnce.Do(func() {
		file_messaging_v2_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_v2_model_proto_rawDescData)
	})
	return file_messaging_v2_model_proto_rawDescData
}

var file_messaging_v2_model_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_messaging_v2_model_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_messaging_v2_model_proto_goTypes = []interface{}{
	(Message_Origin)(0),                                  // 0: common.messaging.v2.Message.Origin
	(Pointer_Type)(0),                                    // 1: common.messaging.v2.Pointer.Type
	(ImagePreview_ImageType)(0),                          // 2: common.messaging.v2.ImagePreview.ImageType
	(Link_Target_Type)(0),                                // 3: common.messaging.v2.Link.Target.Type
	(ChatEvent_GroupMemberAdd_InviteVia)(0),              // 4: common.messaging.v2.ChatEvent.GroupMemberAdd.InviteVia
	(ChatEvent_GroupMemberPromote_PromotionStatus)(0),    // 5: common.messaging.v2.ChatEvent.GroupMemberPromote.PromotionStatus
	(ChatEvent_ChatInfoChange_ChangedFeature_Feature)(0), // 6: common.messaging.v2.ChatEvent.ChatInfoChange.ChangedFeature.Feature
	(ChatEvent_AnonymousMatchFound_MatchType)(0),         // 7: common.messaging.v2.ChatEvent.AnonymousMatchFound.MatchType
	(*Message)(nil),                                      // 8: common.messaging.v2.Message
	(*Pointer)(nil),                                      // 9: common.messaging.v2.Pointer
	(*Keyboard)(nil),                                     // 10: common.messaging.v2.Keyboard
	(*RenderableText)(nil),                               // 11: common.messaging.v2.RenderableText
	(*ImagePreview)(nil),                                 // 12: common.messaging.v2.ImagePreview
	(*Link)(nil),                                         // 13: common.messaging.v2.Link
	(*ChatEvent)(nil),                                    // 14: common.messaging.v2.ChatEvent
	(*Message_Id)(nil),                                   // 15: common.messaging.v2.Message.Id
	(*Message_Content)(nil),                              // 16: common.messaging.v2.Message.Content
	(*Message_Content_Text)(nil),                         // 17: common.messaging.v2.Message.Content.Text
	(*Message_Content_GalleryPhoto)(nil),                 // 18: common.messaging.v2.Message.Content.GalleryPhoto
	(*Message_Content_CameraPhoto)(nil),                  // 19: common.messaging.v2.Message.Content.CameraPhoto
	(*Message_Content_GalleryVideo)(nil),                 // 20: common.messaging.v2.Message.Content.GalleryVideo
	(*Message_Content_CameraVideo)(nil),                  // 21: common.messaging.v2.Message.Content.CameraVideo
	(*Message_Content_Gif)(nil),                          // 22: common.messaging.v2.Message.Content.Gif
	(*Message_Content_Sticker)(nil),                      // 23: common.messaging.v2.Message.Content.Sticker
	(*Message_Content_Platform)(nil),                     // 24: common.messaging.v2.Message.Content.Platform
	(*Message_Content_SelectedSuggestedResponse)(nil),    // 25: common.messaging.v2.Message.Content.SelectedSuggestedResponse
	nil, // 26: common.messaging.v2.Message.Content.Platform.ExtrasEntry
	(*Message_Content_SelectedSuggestedResponse_FriendPicker)(nil), // 27: common.messaging.v2.Message.Content.SelectedSuggestedResponse.FriendPicker
	(*Message_Content_SelectedSuggestedResponse_Image)(nil),        // 28: common.messaging.v2.Message.Content.SelectedSuggestedResponse.Image
	(*Keyboard_SuggestedResponse)(nil),                             // 29: common.messaging.v2.Keyboard.SuggestedResponse
	(*Keyboard_SuggestedResponse_Suggestion)(nil),                  // 30: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion
	(*Keyboard_SuggestedResponse_Suggestion_FriendPicker)(nil),     // 31: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.FriendPicker
	(*Keyboard_SuggestedResponse_Suggestion_Image)(nil),            // 32: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.Image
	(*RenderableText_RenderInstruction)(nil),                       // 33: common.messaging.v2.RenderableText.RenderInstruction
	(*RenderableText_RenderInstruction_Smiley)(nil),                // 34: common.messaging.v2.RenderableText.RenderInstruction.Smiley
	(*RenderableText_RenderInstruction_Mention)(nil),               // 35: common.messaging.v2.RenderableText.RenderInstruction.Mention
	(*Link_Target)(nil),                             // 36: common.messaging.v2.Link.Target
	(*ChatEvent_GroupCreate)(nil),                   // 37: common.messaging.v2.ChatEvent.GroupCreate
	(*ChatEvent_GroupMemberAdd)(nil),                // 38: common.messaging.v2.ChatEvent.GroupMemberAdd
	(*ChatEvent_GroupMemberLeave)(nil),              // 39: common.messaging.v2.ChatEvent.GroupMemberLeave
	(*ChatEvent_GroupMemberRemoveToTarget)(nil),     // 40: common.messaging.v2.ChatEvent.GroupMemberRemoveToTarget
	(*ChatEvent_GroupMemberRemove)(nil),             // 41: common.messaging.v2.ChatEvent.GroupMemberRemove
	(*ChatEvent_GroupBan)(nil),                      // 42: common.messaging.v2.ChatEvent.GroupBan
	(*ChatEvent_GroupUnban)(nil),                    // 43: common.messaging.v2.ChatEvent.GroupUnban
	(*ChatEvent_GroupMemberPromote)(nil),            // 44: common.messaging.v2.ChatEvent.GroupMemberPromote
	(*ChatEvent_GroupMemberDemote)(nil),             // 45: common.messaging.v2.ChatEvent.GroupMemberDemote
	(*ChatEvent_ChatInfoChange)(nil),                // 46: common.messaging.v2.ChatEvent.ChatInfoChange
	(*ChatEvent_MessageTipNotification)(nil),        // 47: common.messaging.v2.ChatEvent.MessageTipNotification
	(*ChatEvent_FriendshipNotice)(nil),              // 48: common.messaging.v2.ChatEvent.FriendshipNotice
	(*ChatEvent_InactiveParticipant)(nil),           // 49: common.messaging.v2.ChatEvent.InactiveParticipant
	(*ChatEvent_GroupInviteNotice)(nil),             // 50: common.messaging.v2.ChatEvent.GroupInviteNotice
	(*ChatEvent_ScannedKikCodeNotice)(nil),          // 51: common.messaging.v2.ChatEvent.ScannedKikCodeNotice
	(*ChatEvent_VideoConferenceStarted)(nil),        // 52: common.messaging.v2.ChatEvent.VideoConferenceStarted
	(*ChatEvent_VideoConferenceMissed)(nil),         // 53: common.messaging.v2.ChatEvent.VideoConferenceMissed
	(*ChatEvent_VideoConferenceTerminated)(nil),     // 54: common.messaging.v2.ChatEvent.VideoConferenceTerminated
	(*ChatEvent_AnonymousMatchFound)(nil),           // 55: common.messaging.v2.ChatEvent.AnonymousMatchFound
	(*ChatEvent_AnonymousChatEnded)(nil),            // 56: common.messaging.v2.ChatEvent.AnonymousChatEnded
	(*ChatEvent_ChatInfoChange_ChangedFeature)(nil), // 57: common.messaging.v2.ChatEvent.ChatInfoChange.ChangedFeature
	(*v2.ChatId)(nil),                               // 58: common.v2.ChatId
	(*v2.PersonaId)(nil),                            // 59: common.v2.PersonaId
	(*timestamp.Timestamp)(nil),                     // 60: google.protobuf.Timestamp
	(*v21.BlobReference)(nil),                       // 61: common.blob.v2.BlobReference
	(*v22.Username)(nil),                            // 62: common.persona.v2.Username
	(*v23.KinAmount)(nil),                           // 63: common.kin.payment.v2.KinAmount
	(*v24.UserFriendContext)(nil),                   // 64: common.contactlist.v2.UserFriendContext
	(*v25.GroupInviteCode)(nil),                     // 65: common.groups.v2.GroupInviteCode
	(*v26.VideoConferenceId)(nil),                   // 66: common.video.v2.VideoConferenceId
	(*duration.Duration)(nil),                       // 67: google.protobuf.Duration
	(*v2.Uuid)(nil),                                 // 68: common.v2.Uuid
	(*v27.AnonMatchInterestId)(nil),                 // 69: common.matching.v2.AnonMatchInterestId
}
var file_messaging_v2_model_proto_depIdxs = []int32{
	15,  // 0: common.messaging.v2.Message.id:type_name -> common.messaging.v2.Message.Id
	15,  // 1: common.messaging.v2.Message.client_message_id:type_name -> common.messaging.v2.Message.Id
	58,  // 2: common.messaging.v2.Message.chat_id:type_name -> common.v2.ChatId
	0,   // 3: common.messaging.v2.Message.origin:type_name -> common.messaging.v2.Message.Origin
	59,  // 4: common.messaging.v2.Message.sender:type_name -> common.v2.PersonaId
	60,  // 5: common.messaging.v2.Message.client_sent:type_name -> google.protobuf.Timestamp
	16,  // 6: common.messaging.v2.Message.content:type_name -> common.messaging.v2.Message.Content
	14,  // 7: common.messaging.v2.Message.chat_event:type_name -> common.messaging.v2.ChatEvent
	10,  // 8: common.messaging.v2.Message.keyboards:type_name -> common.messaging.v2.Keyboard
	59,  // 9: common.messaging.v2.Message.mentioned_bot:type_name -> common.v2.PersonaId
	59,  // 10: common.messaging.v2.Message.bot_mention_initiator:type_name -> common.v2.PersonaId
	58,  // 11: common.messaging.v2.Pointer.chat_id:type_name -> common.v2.ChatId
	15,  // 12: common.messaging.v2.Pointer.message_id:type_name -> common.messaging.v2.Message.Id
	59,  // 13: common.messaging.v2.Pointer.persona_id:type_name -> common.v2.PersonaId
	1,   // 14: common.messaging.v2.Pointer.type:type_name -> common.messaging.v2.Pointer.Type
	59,  // 15: common.messaging.v2.Keyboard.receiver:type_name -> common.v2.PersonaId
	29,  // 16: common.messaging.v2.Keyboard.suggested_response:type_name -> common.messaging.v2.Keyboard.SuggestedResponse
	33,  // 17: common.messaging.v2.RenderableText.render_instructions:type_name -> common.messaging.v2.RenderableText.RenderInstruction
	2,   // 18: common.messaging.v2.ImagePreview.image_type:type_name -> common.messaging.v2.ImagePreview.ImageType
	36,  // 19: common.messaging.v2.Link.targets:type_name -> common.messaging.v2.Link.Target
	37,  // 20: common.messaging.v2.ChatEvent.group_create:type_name -> common.messaging.v2.ChatEvent.GroupCreate
	38,  // 21: common.messaging.v2.ChatEvent.group_add:type_name -> common.messaging.v2.ChatEvent.GroupMemberAdd
	39,  // 22: common.messaging.v2.ChatEvent.group_leave:type_name -> common.messaging.v2.ChatEvent.GroupMemberLeave
	41,  // 23: common.messaging.v2.ChatEvent.group_remove:type_name -> common.messaging.v2.ChatEvent.GroupMemberRemove
	40,  // 24: common.messaging.v2.ChatEvent.group_remove_to_target:type_name -> common.messaging.v2.ChatEvent.GroupMemberRemoveToTarget
	42,  // 25: common.messaging.v2.ChatEvent.group_ban:type_name -> common.messaging.v2.ChatEvent.GroupBan
	43,  // 26: common.messaging.v2.ChatEvent.group_unban:type_name -> common.messaging.v2.ChatEvent.GroupUnban
	44,  // 27: common.messaging.v2.ChatEvent.group_promote:type_name -> common.messaging.v2.ChatEvent.GroupMemberPromote
	45,  // 28: common.messaging.v2.ChatEvent.group_demote:type_name -> common.messaging.v2.ChatEvent.GroupMemberDemote
	46,  // 29: common.messaging.v2.ChatEvent.chat_info_change:type_name -> common.messaging.v2.ChatEvent.ChatInfoChange
	47,  // 30: common.messaging.v2.ChatEvent.message_tip_notification:type_name -> common.messaging.v2.ChatEvent.MessageTipNotification
	48,  // 31: common.messaging.v2.ChatEvent.friendship_notice:type_name -> common.messaging.v2.ChatEvent.FriendshipNotice
	49,  // 32: common.messaging.v2.ChatEvent.inactive_participant:type_name -> common.messaging.v2.ChatEvent.InactiveParticipant
	50,  // 33: common.messaging.v2.ChatEvent.group_invite_notice:type_name -> common.messaging.v2.ChatEvent.GroupInviteNotice
	51,  // 34: common.messaging.v2.ChatEvent.scanned_kik_code_notice:type_name -> common.messaging.v2.ChatEvent.ScannedKikCodeNotice
	52,  // 35: common.messaging.v2.ChatEvent.video_conference_started:type_name -> common.messaging.v2.ChatEvent.VideoConferenceStarted
	53,  // 36: common.messaging.v2.ChatEvent.video_conference_missed:type_name -> common.messaging.v2.ChatEvent.VideoConferenceMissed
	54,  // 37: common.messaging.v2.ChatEvent.video_conference_terminated:type_name -> common.messaging.v2.ChatEvent.VideoConferenceTerminated
	55,  // 38: common.messaging.v2.ChatEvent.anon_match_found:type_name -> common.messaging.v2.ChatEvent.AnonymousMatchFound
	56,  // 39: common.messaging.v2.ChatEvent.anon_chat_ended:type_name -> common.messaging.v2.ChatEvent.AnonymousChatEnded
	17,  // 40: common.messaging.v2.Message.Content.text:type_name -> common.messaging.v2.Message.Content.Text
	18,  // 41: common.messaging.v2.Message.Content.gallery_photo:type_name -> common.messaging.v2.Message.Content.GalleryPhoto
	19,  // 42: common.messaging.v2.Message.Content.camera_photo:type_name -> common.messaging.v2.Message.Content.CameraPhoto
	24,  // 43: common.messaging.v2.Message.Content.platform:type_name -> common.messaging.v2.Message.Content.Platform
	20,  // 44: common.messaging.v2.Message.Content.gallery_video:type_name -> common.messaging.v2.Message.Content.GalleryVideo
	21,  // 45: common.messaging.v2.Message.Content.camera_video:type_name -> common.messaging.v2.Message.Content.CameraVideo
	22,  // 46: common.messaging.v2.Message.Content.gif:type_name -> common.messaging.v2.Message.Content.Gif
	23,  // 47: common.messaging.v2.Message.Content.sticker:type_name -> common.messaging.v2.Message.Content.Sticker
	25,  // 48: common.messaging.v2.Message.Content.selected_suggested_response:type_name -> common.messaging.v2.Message.Content.SelectedSuggestedResponse
	11,  // 49: common.messaging.v2.Message.Content.Text.renderable_text:type_name -> common.messaging.v2.RenderableText
	12,  // 50: common.messaging.v2.Message.Content.GalleryPhoto.preview:type_name -> common.messaging.v2.ImagePreview
	61,  // 51: common.messaging.v2.Message.Content.GalleryPhoto.image:type_name -> common.blob.v2.BlobReference
	12,  // 52: common.messaging.v2.Message.Content.CameraPhoto.preview:type_name -> common.messaging.v2.ImagePreview
	61,  // 53: common.messaging.v2.Message.Content.CameraPhoto.blob:type_name -> common.blob.v2.BlobReference
	12,  // 54: common.messaging.v2.Message.Content.GalleryVideo.preview:type_name -> common.messaging.v2.ImagePreview
	61,  // 55: common.messaging.v2.Message.Content.GalleryVideo.video:type_name -> common.blob.v2.BlobReference
	12,  // 56: common.messaging.v2.Message.Content.CameraVideo.preview:type_name -> common.messaging.v2.ImagePreview
	61,  // 57: common.messaging.v2.Message.Content.CameraVideo.blob:type_name -> common.blob.v2.BlobReference
	12,  // 58: common.messaging.v2.Message.Content.Gif.preview:type_name -> common.messaging.v2.ImagePreview
	61,  // 59: common.messaging.v2.Message.Content.Gif.gif:type_name -> common.blob.v2.BlobReference
	12,  // 60: common.messaging.v2.Message.Content.Sticker.preview:type_name -> common.messaging.v2.ImagePreview
	61,  // 61: common.messaging.v2.Message.Content.Sticker.sticker:type_name -> common.blob.v2.BlobReference
	12,  // 62: common.messaging.v2.Message.Content.Platform.image:type_name -> common.messaging.v2.ImagePreview
	11,  // 63: common.messaging.v2.Message.Content.Platform.title:type_name -> common.messaging.v2.RenderableText
	11,  // 64: common.messaging.v2.Message.Content.Platform.description:type_name -> common.messaging.v2.RenderableText
	13,  // 65: common.messaging.v2.Message.Content.Platform.link:type_name -> common.messaging.v2.Link
	26,  // 66: common.messaging.v2.Message.Content.Platform.extras:type_name -> common.messaging.v2.Message.Content.Platform.ExtrasEntry
	59,  // 67: common.messaging.v2.Message.Content.SelectedSuggestedResponse.bot:type_name -> common.v2.PersonaId
	11,  // 68: common.messaging.v2.Message.Content.SelectedSuggestedResponse.text:type_name -> common.messaging.v2.RenderableText
	27,  // 69: common.messaging.v2.Message.Content.SelectedSuggestedResponse.friend_picker:type_name -> common.messaging.v2.Message.Content.SelectedSuggestedResponse.FriendPicker
	28,  // 70: common.messaging.v2.Message.Content.SelectedSuggestedResponse.image:type_name -> common.messaging.v2.Message.Content.SelectedSuggestedResponse.Image
	59,  // 71: common.messaging.v2.Message.Content.SelectedSuggestedResponse.FriendPicker.picked:type_name -> common.v2.PersonaId
	61,  // 72: common.messaging.v2.Message.Content.SelectedSuggestedResponse.Image.image:type_name -> common.blob.v2.BlobReference
	30,  // 73: common.messaging.v2.Keyboard.SuggestedResponse.suggestions:type_name -> common.messaging.v2.Keyboard.SuggestedResponse.Suggestion
	11,  // 74: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.text:type_name -> common.messaging.v2.RenderableText
	31,  // 75: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.friend_picker:type_name -> common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.FriendPicker
	32,  // 76: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.image:type_name -> common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.Image
	11,  // 77: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.FriendPicker.body:type_name -> common.messaging.v2.RenderableText
	59,  // 78: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.FriendPicker.preselected:type_name -> common.v2.PersonaId
	61,  // 79: common.messaging.v2.Keyboard.SuggestedResponse.Suggestion.Image.image:type_name -> common.blob.v2.BlobReference
	34,  // 80: common.messaging.v2.RenderableText.RenderInstruction.smiley:type_name -> common.messaging.v2.RenderableText.RenderInstruction.Smiley
	13,  // 81: common.messaging.v2.RenderableText.RenderInstruction.link:type_name -> common.messaging.v2.Link
	35,  // 82: common.messaging.v2.RenderableText.RenderInstruction.mention:type_name -> common.messaging.v2.RenderableText.RenderInstruction.Mention
	62,  // 83: common.messaging.v2.RenderableText.RenderInstruction.Mention.username:type_name -> common.persona.v2.Username
	3,   // 84: common.messaging.v2.Link.Target.type:type_name -> common.messaging.v2.Link.Target.Type
	59,  // 85: common.messaging.v2.ChatEvent.GroupCreate.creator:type_name -> common.v2.PersonaId
	59,  // 86: common.messaging.v2.ChatEvent.GroupCreate.initial_members:type_name -> common.v2.PersonaId
	58,  // 87: common.messaging.v2.ChatEvent.GroupCreate.upgraded_chat_id:type_name -> common.v2.ChatId
	59,  // 88: common.messaging.v2.ChatEvent.GroupMemberAdd.new_members:type_name -> common.v2.PersonaId
	59,  // 89: common.messaging.v2.ChatEvent.GroupMemberAdd.inviter:type_name -> common.v2.PersonaId
	4,   // 90: common.messaging.v2.ChatEvent.GroupMemberAdd.via:type_name -> common.messaging.v2.ChatEvent.GroupMemberAdd.InviteVia
	59,  // 91: common.messaging.v2.ChatEvent.GroupMemberLeave.member:type_name -> common.v2.PersonaId
	59,  // 92: common.messaging.v2.ChatEvent.GroupMemberRemoveToTarget.removed_member:type_name -> common.v2.PersonaId
	59,  // 93: common.messaging.v2.ChatEvent.GroupMemberRemove.removed_member:type_name -> common.v2.PersonaId
	59,  // 94: common.messaging.v2.ChatEvent.GroupMemberRemove.acting_admin:type_name -> common.v2.PersonaId
	59,  // 95: common.messaging.v2.ChatEvent.GroupBan.banned_user:type_name -> common.v2.PersonaId
	59,  // 96: common.messaging.v2.ChatEvent.GroupBan.acting_admin:type_name -> common.v2.PersonaId
	59,  // 97: common.messaging.v2.ChatEvent.GroupUnban.unbanned_user:type_name -> common.v2.PersonaId
	59,  // 98: common.messaging.v2.ChatEvent.GroupUnban.acting_admin:type_name -> common.v2.PersonaId
	59,  // 99: common.messaging.v2.ChatEvent.GroupMemberPromote.promoted_member:type_name -> common.v2.PersonaId
	5,   // 100: common.messaging.v2.ChatEvent.GroupMemberPromote.new_status:type_name -> common.messaging.v2.ChatEvent.GroupMemberPromote.PromotionStatus
	59,  // 101: common.messaging.v2.ChatEvent.GroupMemberPromote.acting_admin:type_name -> common.v2.PersonaId
	59,  // 102: common.messaging.v2.ChatEvent.GroupMemberDemote.demoted_member:type_name -> common.v2.PersonaId
	59,  // 103: common.messaging.v2.ChatEvent.GroupMemberDemote.acting_admin:type_name -> common.v2.PersonaId
	59,  // 104: common.messaging.v2.ChatEvent.ChatInfoChange.acting_member:type_name -> common.v2.PersonaId
	57,  // 105: common.messaging.v2.ChatEvent.ChatInfoChange.features:type_name -> common.messaging.v2.ChatEvent.ChatInfoChange.ChangedFeature
	15,  // 106: common.messaging.v2.ChatEvent.MessageTipNotification.tipped_message_id:type_name -> common.messaging.v2.Message.Id
	59,  // 107: common.messaging.v2.ChatEvent.MessageTipNotification.sender:type_name -> common.v2.PersonaId
	59,  // 108: common.messaging.v2.ChatEvent.MessageTipNotification.recipient:type_name -> common.v2.PersonaId
	63,  // 109: common.messaging.v2.ChatEvent.MessageTipNotification.amount:type_name -> common.kin.payment.v2.KinAmount
	59,  // 110: common.messaging.v2.ChatEvent.FriendshipNotice.acting_user:type_name -> common.v2.PersonaId
	59,  // 111: common.messaging.v2.ChatEvent.FriendshipNotice.target_user:type_name -> common.v2.PersonaId
	64,  // 112: common.messaging.v2.ChatEvent.FriendshipNotice.friend_context:type_name -> common.contactlist.v2.UserFriendContext
	59,  // 113: common.messaging.v2.ChatEvent.GroupInviteNotice.inviting_user:type_name -> common.v2.PersonaId
	58,  // 114: common.messaging.v2.ChatEvent.GroupInviteNotice.group_chat_id:type_name -> common.v2.ChatId
	65,  // 115: common.messaging.v2.ChatEvent.GroupInviteNotice.invite_code:type_name -> common.groups.v2.GroupInviteCode
	59,  // 116: common.messaging.v2.ChatEvent.ScannedKikCodeNotice.scanning_user:type_name -> common.v2.PersonaId
	59,  // 117: common.messaging.v2.ChatEvent.ScannedKikCodeNotice.scanned_user:type_name -> common.v2.PersonaId
	66,  // 118: common.messaging.v2.ChatEvent.VideoConferenceStarted.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	66,  // 119: common.messaging.v2.ChatEvent.VideoConferenceMissed.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	66,  // 120: common.messaging.v2.ChatEvent.VideoConferenceTerminated.video_conference_id:type_name -> common.video.v2.VideoConferenceId
	67,  // 121: common.messaging.v2.ChatEvent.VideoConferenceTerminated.call_duration:type_name -> google.protobuf.Duration
	60,  // 122: common.messaging.v2.ChatEvent.AnonymousMatchFound.session_end_time:type_name -> google.protobuf.Timestamp
	68,  // 123: common.messaging.v2.ChatEvent.AnonymousMatchFound.find_chat_partner_request_id:type_name -> common.v2.Uuid
	7,   // 124: common.messaging.v2.ChatEvent.AnonymousMatchFound.match_type:type_name -> common.messaging.v2.ChatEvent.AnonymousMatchFound.MatchType
	69,  // 125: common.messaging.v2.ChatEvent.AnonymousMatchFound.anon_match_interest_id:type_name -> common.matching.v2.AnonMatchInterestId
	60,  // 126: common.messaging.v2.ChatEvent.AnonymousChatEnded.session_end_time:type_name -> google.protobuf.Timestamp
	58,  // 127: common.messaging.v2.ChatEvent.AnonymousChatEnded.upgraded_chat_id:type_name -> common.v2.ChatId
	6,   // 128: common.messaging.v2.ChatEvent.ChatInfoChange.ChangedFeature.feature:type_name -> common.messaging.v2.ChatEvent.ChatInfoChange.ChangedFeature.Feature
	129, // [129:129] is the sub-list for method output_type
	129, // [129:129] is the sub-list for method input_type
	129, // [129:129] is the sub-list for extension type_name
	129, // [129:129] is the sub-list for extension extendee
	0,   // [0:129] is the sub-list for field type_name
}

func init() { file_messaging_v2_model_proto_init() }
func file_messaging_v2_model_proto_init() {
	if File_messaging_v2_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messaging_v2_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderableText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_GalleryPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_CameraPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_GalleryVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_CameraVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_Gif); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_Sticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_SelectedSuggestedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_SelectedSuggestedResponse_FriendPicker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Content_SelectedSuggestedResponse_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyboard_SuggestedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyboard_SuggestedResponse_Suggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyboard_SuggestedResponse_Suggestion_FriendPicker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyboard_SuggestedResponse_Suggestion_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderableText_RenderInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderableText_RenderInstruction_Smiley); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderableText_RenderInstruction_Mention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupMemberAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupMemberLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupMemberRemoveToTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupMemberRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupUnban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupMemberPromote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupMemberDemote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_ChatInfoChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_MessageTipNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_FriendshipNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_InactiveParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_GroupInviteNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_ScannedKikCodeNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_VideoConferenceStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_VideoConferenceMissed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_VideoConferenceTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_AnonymousMatchFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_AnonymousChatEnded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_v2_model_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent_ChatInfoChange_ChangedFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messaging_v2_model_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Keyboard_SuggestedResponse_)(nil),
	}
	file_messaging_v2_model_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ChatEvent_GroupCreate_)(nil),
		(*ChatEvent_GroupAdd)(nil),
		(*ChatEvent_GroupLeave)(nil),
		(*ChatEvent_GroupRemove)(nil),
		(*ChatEvent_GroupRemoveToTarget)(nil),
		(*ChatEvent_GroupBan_)(nil),
		(*ChatEvent_GroupUnban_)(nil),
		(*ChatEvent_GroupPromote)(nil),
		(*ChatEvent_GroupDemote)(nil),
		(*ChatEvent_ChatInfoChange_)(nil),
		(*ChatEvent_MessageTipNotification_)(nil),
		(*ChatEvent_FriendshipNotice_)(nil),
		(*ChatEvent_InactiveParticipant_)(nil),
		(*ChatEvent_GroupInviteNotice_)(nil),
		(*ChatEvent_ScannedKikCodeNotice_)(nil),
		(*ChatEvent_VideoConferenceStarted_)(nil),
		(*ChatEvent_VideoConferenceMissed_)(nil),
		(*ChatEvent_VideoConferenceTerminated_)(nil),
		(*ChatEvent_AnonMatchFound)(nil),
		(*ChatEvent_AnonChatEnded)(nil),
	}
	file_messaging_v2_model_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Message_Content_Text_)(nil),
		(*Message_Content_GalleryPhoto_)(nil),
		(*Message_Content_CameraPhoto_)(nil),
		(*Message_Content_Platform_)(nil),
		(*Message_Content_GalleryVideo_)(nil),
		(*Message_Content_CameraVideo_)(nil),
		(*Message_Content_Gif_)(nil),
		(*Message_Content_Sticker_)(nil),
		(*Message_Content_SelectedSuggestedResponse_)(nil),
	}
	file_messaging_v2_model_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Message_Content_SelectedSuggestedResponse_Text)(nil),
		(*Message_Content_SelectedSuggestedResponse_FriendPicker_)(nil),
		(*Message_Content_SelectedSuggestedResponse_Image_)(nil),
	}
	file_messaging_v2_model_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Keyboard_SuggestedResponse_Suggestion_Text)(nil),
		(*Keyboard_SuggestedResponse_Suggestion_FriendPicker_)(nil),
		(*Keyboard_SuggestedResponse_Suggestion_Image_)(nil),
	}
	file_messaging_v2_model_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*RenderableText_RenderInstruction_Smiley_)(nil),
		(*RenderableText_RenderInstruction_Link)(nil),
		(*RenderableText_RenderInstruction_Mention_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_v2_model_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messaging_v2_model_proto_goTypes,
		DependencyIndexes: file_messaging_v2_model_proto_depIdxs,
		EnumInfos:         file_messaging_v2_model_proto_enumTypes,
		MessageInfos:      file_messaging_v2_model_proto_msgTypes,
	}.Build()
	File_messaging_v2_model_proto = out.File
	file_messaging_v2_model_proto_rawDesc = nil
	file_messaging_v2_model_proto_goTypes = nil
	file_messaging_v2_model_proto_depIdxs = nil
}
