// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: messagepath/v1/core_message.proto

package messagepath

import (
	_ "github.com/sokkit-io/xiphias-model-common/generated/go/kikoptions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoreMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//----------------------------------------------------------------------------------------------
	// Main mutually exclusive attachments
	// 500-999
	//----------------------------------------------------------------------------------------------
	CarouselMessageAttachment *CarouselMessageAttachment `protobuf:"bytes,515,opt,name=carousel_message_attachment,json=carouselMessageAttachment,proto3" json:"carousel_message_attachment,omitempty"`
	// This attachment is used to override the clients default rules for where to display the message
	// and how to send push (among other things) - see comments on the message definition for more
	// info.
	//
	// This attachment may ONLY be set on server generated messages and messages from bots.
	// It is NOT valid for native clients to send messages with this attachment.
	VisibilityRulesAttachment *VisibilityRulesAttachment `protobuf:"bytes,1000,opt,name=visibility_rules_attachment,json=visibilityRulesAttachment,proto3" json:"visibility_rules_attachment,omitempty"`
	// For mention replies (from bots to users), this attachment is used to indicate the user who
	// originally mentioned the bot.
	//
	// This should only be used the client for internal logic specific to mention-reply messages
	// (e.g. on iPhone 10.9 it is used to determine whether to show the "Reply" button)
	// DO NOT use this attachment to determine visibility rules (use the visibility_rules_attachment for that).
	//
	// This attachment may ONLY be sent by bots.
	// It is NOT valid for native clients to send messages with this attachment.
	MentionReplyAttachment *MentionReplyAttachment `protobuf:"bytes,1002,opt,name=mention_reply_attachment,json=mentionReplyAttachment,proto3" json:"mention_reply_attachment,omitempty"`
	// The keyboard attachment is sent by the Bots Platform in order for clients to update their
	// keyboard display.
	//
	// This attachment may not be included in the event that no change in user keyboard is desired
	// from a message.
	//
	// Historically, this property was known as "Suggested Responses", but in the interest of
	// flexibility, and future-compatibility, it was generalized to a field that implies changing
	// a user's input mechanism, rather than only suggesting responses.
	//
	//
	// This attachment may ONLY be set by bots.
	// It is NOT valid for native clients to send messages with this attachment.
	KeyboardAttachment *KeyboardAttachment `protobuf:"bytes,1003,opt,name=keyboard_attachment,json=keyboardAttachment,proto3" json:"keyboard_attachment,omitempty"`
	// The keyboard reply attachment is sent by clients in order to identify when a user has used
	// the input mechanism that was provided by a bot-provided keyboard attachment.
	//
	// This attachment may ONLY be set by clients.
	// It is NOT valid for bots to send messages with this attachment.
	KeyboardReplyAttachment *KeyboardReplyAttachment `protobuf:"bytes,1004,opt,name=keyboard_reply_attachment,json=keyboardReplyAttachment,proto3" json:"keyboard_reply_attachment,omitempty"`
	// The widget attachment is sent by the Bots Platform in order for clients to update their
	// widget display.
	//
	// This attachment may not be included in the event that no change in conversation widgets
	// is desired from a message.
	//
	//
	// This attachment may ONLY be set by bots.
	// It is NOT valid for native clients to send messages with this attachment.
	WidgetAttachment *WidgetAttachment `protobuf:"bytes,1005,opt,name=widget_attachment,json=widgetAttachment,proto3" json:"widget_attachment,omitempty"`
	// For adaptive card messages (from bots to users), this attachment is used to indicate how an
	// adaptive card message should be rendered.
	//
	// This should be used by the client to retrieve the appropriate JSON card definition(s) then
	// render the message.
	//
	// This attachment may ONLY be set by bots.
	// It is NOT valid for native clients to send messages with this attachment.
	AdaptiveCardAttachment *AdaptiveCardAttachment `protobuf:"bytes,1006,opt,name=adaptive_card_attachment,json=adaptiveCardAttachment,proto3" json:"adaptive_card_attachment,omitempty"`
	// For text messages (from bots to users), this attachment is used by the clients
	// to render markdown text.
	//
	// This attachment may ONLY be set by bots.
	// It is NOT valid for native clients to send messages with this attachment.
	TextMarkdownAttachment *TextMarkdownAttachment `protobuf:"bytes,1007,opt,name=text_markdown_attachment,json=textMarkdownAttachment,proto3" json:"text_markdown_attachment,omitempty"`
	// This attachment will be sent with status messages to notify clients
	// about updated chat theme information.
	//
	// This attachment may ONLY be set on the server side.
	// It is NOT valid for native clients to send messages with this attachment.
	ChatThemeAttachment *ChatThemeAttachment `protobuf:"bytes,1008,opt,name=chat_theme_attachment,json=chatThemeAttachment,proto3" json:"chat_theme_attachment,omitempty"`
	// This attachment will be sent with status messages to notify clients
	// about a payment transaction.
	//
	// This attachment may ONLY be set on the server side.
	// It is NOT valid for native clients to send messages with this attachment.
	TransactionDetailsAttachment *TransactionDetailsAttachment `protobuf:"bytes,1009,opt,name=transaction_details_attachment,json=transactionDetailsAttachment,proto3" json:"transaction_details_attachment,omitempty"`
	// WebRTC video related attachments
	VideoConferenceUpdateAttachment *VideoConferenceUpdateAttachment `protobuf:"bytes,1010,opt,name=video_conference_update_attachment,json=videoConferenceUpdateAttachment,proto3" json:"video_conference_update_attachment,omitempty"`
}

func (x *CoreMessage) Reset() {
	*x = CoreMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messagepath_v1_core_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreMessage) ProtoMessage() {}

func (x *CoreMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messagepath_v1_core_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreMessage.ProtoReflect.Descriptor instead.
func (*CoreMessage) Descriptor() ([]byte, []int) {
	return file_messagepath_v1_core_message_proto_rawDescGZIP(), []int{0}
}

func (x *CoreMessage) GetCarouselMessageAttachment() *CarouselMessageAttachment {
	if x != nil {
		return x.CarouselMessageAttachment
	}
	return nil
}

func (x *CoreMessage) GetVisibilityRulesAttachment() *VisibilityRulesAttachment {
	if x != nil {
		return x.VisibilityRulesAttachment
	}
	return nil
}

func (x *CoreMessage) GetMentionReplyAttachment() *MentionReplyAttachment {
	if x != nil {
		return x.MentionReplyAttachment
	}
	return nil
}

func (x *CoreMessage) GetKeyboardAttachment() *KeyboardAttachment {
	if x != nil {
		return x.KeyboardAttachment
	}
	return nil
}

func (x *CoreMessage) GetKeyboardReplyAttachment() *KeyboardReplyAttachment {
	if x != nil {
		return x.KeyboardReplyAttachment
	}
	return nil
}

func (x *CoreMessage) GetWidgetAttachment() *WidgetAttachment {
	if x != nil {
		return x.WidgetAttachment
	}
	return nil
}

func (x *CoreMessage) GetAdaptiveCardAttachment() *AdaptiveCardAttachment {
	if x != nil {
		return x.AdaptiveCardAttachment
	}
	return nil
}

func (x *CoreMessage) GetTextMarkdownAttachment() *TextMarkdownAttachment {
	if x != nil {
		return x.TextMarkdownAttachment
	}
	return nil
}

func (x *CoreMessage) GetChatThemeAttachment() *ChatThemeAttachment {
	if x != nil {
		return x.ChatThemeAttachment
	}
	return nil
}

func (x *CoreMessage) GetTransactionDetailsAttachment() *TransactionDetailsAttachment {
	if x != nil {
		return x.TransactionDetailsAttachment
	}
	return nil
}

func (x *CoreMessage) GetVideoConferenceUpdateAttachment() *VideoConferenceUpdateAttachment {
	if x != nil {
		return x.VideoConferenceUpdateAttachment
	}
	return nil
}

var File_messagepath_v1_core_message_proto protoreflect.FileDescriptor

var file_messagepath_v1_core_message_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x0a, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x71, 0x0a, 0x1b, 0x63, 0x61, 0x72, 0x6f, 0x75,
	0x73, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x83, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x19, 0x63, 0x61, 0x72, 0x6f, 0x75, 0x73, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x79, 0x0a, 0x1b, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x19, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x18, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52,
	0x16, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x19,
	0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x01, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x5d, 0x0a, 0x11, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x10,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x70, 0x0a, 0x18, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xee, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x16, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x72, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x70, 0x0a, 0x18, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xef,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x16, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x68, 0x65,
	0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf0, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x74, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01,
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xda, 0x9d,
	0x25, 0x02, 0x08, 0x00, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x8c, 0x01, 0x0a, 0x22, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0xda, 0x9d, 0x25, 0x02, 0x08, 0x00,
	0x52, 0x1f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x8c, 0x01, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x69, 0x6b, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x10, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6b, 0x6b, 0x69, 0x74, 0x2d, 0x69, 0x6f, 0x2f, 0x78, 0x69, 0x70, 0x68, 0x69, 0x61,
	0x73, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x70, 0x61, 0x74, 0x68, 0xa0, 0x01, 0x01, 0xa2, 0x02, 0x04, 0x4d, 0x50, 0x54, 0x48,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messagepath_v1_core_message_proto_rawDescOnce sync.Once
	file_messagepath_v1_core_message_proto_rawDescData = file_messagepath_v1_core_message_proto_rawDesc
)

func file_messagepath_v1_core_message_proto_rawDescGZIP() []byte {
	file_messagepath_v1_core_message_proto_rawDescOnce.Do(func() {
		file_messagepath_v1_core_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_messagepath_v1_core_message_proto_rawDescData)
	})
	return file_messagepath_v1_core_message_proto_rawDescData
}

var file_messagepath_v1_core_message_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_messagepath_v1_core_message_proto_goTypes = []interface{}{
	(*CoreMessage)(nil),                     // 0: common.messagepath.v1.CoreMessage
	(*CarouselMessageAttachment)(nil),       // 1: common.messagepath.v1.CarouselMessageAttachment
	(*VisibilityRulesAttachment)(nil),       // 2: common.messagepath.v1.VisibilityRulesAttachment
	(*MentionReplyAttachment)(nil),          // 3: common.messagepath.v1.MentionReplyAttachment
	(*KeyboardAttachment)(nil),              // 4: common.messagepath.v1.KeyboardAttachment
	(*KeyboardReplyAttachment)(nil),         // 5: common.messagepath.v1.KeyboardReplyAttachment
	(*WidgetAttachment)(nil),                // 6: common.messagepath.v1.WidgetAttachment
	(*AdaptiveCardAttachment)(nil),          // 7: common.messagepath.v1.AdaptiveCardAttachment
	(*TextMarkdownAttachment)(nil),          // 8: common.messagepath.v1.TextMarkdownAttachment
	(*ChatThemeAttachment)(nil),             // 9: common.messagepath.v1.ChatThemeAttachment
	(*TransactionDetailsAttachment)(nil),    // 10: common.messagepath.v1.TransactionDetailsAttachment
	(*VideoConferenceUpdateAttachment)(nil), // 11: common.messagepath.v1.VideoConferenceUpdateAttachment
}
var file_messagepath_v1_core_message_proto_depIdxs = []int32{
	1,  // 0: common.messagepath.v1.CoreMessage.carousel_message_attachment:type_name -> common.messagepath.v1.CarouselMessageAttachment
	2,  // 1: common.messagepath.v1.CoreMessage.visibility_rules_attachment:type_name -> common.messagepath.v1.VisibilityRulesAttachment
	3,  // 2: common.messagepath.v1.CoreMessage.mention_reply_attachment:type_name -> common.messagepath.v1.MentionReplyAttachment
	4,  // 3: common.messagepath.v1.CoreMessage.keyboard_attachment:type_name -> common.messagepath.v1.KeyboardAttachment
	5,  // 4: common.messagepath.v1.CoreMessage.keyboard_reply_attachment:type_name -> common.messagepath.v1.KeyboardReplyAttachment
	6,  // 5: common.messagepath.v1.CoreMessage.widget_attachment:type_name -> common.messagepath.v1.WidgetAttachment
	7,  // 6: common.messagepath.v1.CoreMessage.adaptive_card_attachment:type_name -> common.messagepath.v1.AdaptiveCardAttachment
	8,  // 7: common.messagepath.v1.CoreMessage.text_markdown_attachment:type_name -> common.messagepath.v1.TextMarkdownAttachment
	9,  // 8: common.messagepath.v1.CoreMessage.chat_theme_attachment:type_name -> common.messagepath.v1.ChatThemeAttachment
	10, // 9: common.messagepath.v1.CoreMessage.transaction_details_attachment:type_name -> common.messagepath.v1.TransactionDetailsAttachment
	11, // 10: common.messagepath.v1.CoreMessage.video_conference_update_attachment:type_name -> common.messagepath.v1.VideoConferenceUpdateAttachment
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_messagepath_v1_core_message_proto_init() }
func file_messagepath_v1_core_message_proto_init() {
	if File_messagepath_v1_core_message_proto != nil {
		return
	}
	file_messagepath_v1_core_message_options_proto_init()
	file_messagepath_v1_visibility_rules_proto_init()
	file_messagepath_v1_mentions_proto_init()
	file_messagepath_v1_keyboards_proto_init()
	file_messagepath_v1_widgets_proto_init()
	file_messagepath_v1_adaptive_cards_proto_init()
	file_messagepath_v1_text_markdown_proto_init()
	file_messagepath_v1_carousels_proto_init()
	file_messagepath_v1_chat_theme_proto_init()
	file_messagepath_v1_feature_payment_proto_init()
	file_messagepath_v1_webrtc_video_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messagepath_v1_core_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messagepath_v1_core_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messagepath_v1_core_message_proto_goTypes,
		DependencyIndexes: file_messagepath_v1_core_message_proto_depIdxs,
		MessageInfos:      file_messagepath_v1_core_message_proto_msgTypes,
	}.Build()
	File_messagepath_v1_core_message_proto = out.File
	file_messagepath_v1_core_message_proto_rawDesc = nil
	file_messagepath_v1_core_message_proto_goTypes = nil
	file_messagepath_v1_core_message_proto_depIdxs = nil
}
